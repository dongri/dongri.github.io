<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dongri</title>
    <link>https://dongri.github.io/</link>
    <description>Recent content on dongri</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Oct 2024 18:25:29 +0900</lastBuildDate>
    <atom:link href="https://dongri.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unichain node (sepolia) 起動</title>
      <link>https://dongri.github.io/2024/10/unichain-node-sepolia-%E8%B5%B7%E5%8B%95/</link>
      <pubDate>Sun, 13 Oct 2024 18:25:29 +0900</pubDate>
      <guid>https://dongri.github.io/2024/10/unichain-node-sepolia-%E8%B5%B7%E5%8B%95/</guid>
      <description>&lt;p&gt;Unichain node (sepolia) 起動操作ログ&lt;/p&gt;&#xA;&lt;h1 id=&#34;環境&#34;&gt;環境&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Cloud: aws&#xA;OS: ubuntu 24&#xA;Instance: t2.xlarge(16GM Memory, 400GB SSD)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;docker-docker-compose-install&#34;&gt;docker, docker-compose install&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# docker install&#xA;$ sudo apt update&#xA;$ sudo apt upgrade&#xA;&#xA;$ curl -sSL https://get.docker.com/ | sh&#xA;&#xA;$ docker version&#xA; Version:           27.3.1&#xA;&#xA;$ sudo service docker start&#xA;$ sudo systemctl enable docker&#xA;$ sudo usermod -aG docker ubuntu&#xA;$ exit&#xA;&#xA;$ docker ps&#xA;&#xA;# docker-compose install&#xA;$ sudo curl -L &amp;#34;https://github.com/docker/compose/releases/download/v2.29.7/docker-compose-$(uname -s)-$(uname -m)&amp;#34; -o /usr/local/bin/docker-compose&#xA;$ sudo chmod +x /usr/local/bin/docker-compose&#xA;$ docker-compose version&#xA;Docker Compose version v2.29.7&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;unichain&#34;&gt;unichain&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone https://github.com/Uniswap/unichain-node.git&#xA;$ cd unichain-node&#xA;$ vim .env.sepolia&#xA;OP_NODE_L1_BEACON=https://ethereum-sepolia-beacon-api.publicnode.com&#xA;&#xA;$ docker-compose up -d&#xA;$ curl -d &amp;#39;{&amp;#34;id&amp;#34;:1,&amp;#34;jsonrpc&amp;#34;:&amp;#34;2.0&amp;#34;,&amp;#34;method&amp;#34;:&amp;#34;eth_syncing&amp;#34;,&amp;#34;params&amp;#34;:[]}&amp;#39; -H &amp;#34;Content-Type: application/json&amp;#34; http://localhost:8545 | jq&#xA;&#xA;# logs&#xA;$ docker logs -f unichain-node-op-node-1&#xA;$ docker logs -f unichain-node-execution-client-1&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>メタトランザクションの実装例</title>
      <link>https://dongri.github.io/2024/06/%E3%83%A1%E3%82%BF%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%AE%9F%E8%A3%85%E4%BE%8B/</link>
      <pubDate>Sun, 23 Jun 2024 10:02:16 +0900</pubDate>
      <guid>https://dongri.github.io/2024/06/%E3%83%A1%E3%82%BF%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%AE%9F%E8%A3%85%E4%BE%8B/</guid>
      <description>&lt;p&gt;Ethereumのメタトランザクション（Meta-Transaction）とは、ユーザーがガス代を支払うことなくトランザクションを実行することを可能にする仕組みです。通常、Ethereum上のトランザクションを実行するには、ユーザーが自分のウォレットからガス代（ETH）を支払う必要があります。しかし、メタトランザクションを使用すると、ガス代を第三者（リレーアー、relayer）が支払い、ユーザーはETHを持っていなくてもトランザクションを送信できるようになります。（とChatGPTがおっしゃいました）&lt;/p&gt;&#xA;&lt;h2 id=&#34;eip-712&#34;&gt;EIP-712&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://eips.ethereum.org/EIPS/eip-712&#34;&gt;https://eips.ethereum.org/EIPS/eip-712&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Typed structured data hashing and signing をしてより人間にとって理解しやすいメッセージを署名する方式、以下の各EIPで使用されます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;eip-2612&#34;&gt;EIP-2612&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://eips.ethereum.org/EIPS/eip-2612&#34;&gt;https://eips.ethereum.org/EIPS/eip-2612&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;permit&lt;/code&gt; 関数を用意して中で &lt;code&gt;_approve&lt;/code&gt; を行います。ユーザーがフロントエンドでEIP712署名を行って、relayerサーバーにsignatureを送ってrelayerが &lt;code&gt;transferFrom&lt;/code&gt; 処理を行います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;eip-3009&#34;&gt;EIP-3009&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://eips.ethereum.org/EIPS/eip-3009&#34;&gt;https://eips.ethereum.org/EIPS/eip-3009&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;transferWithAuthorization&lt;/code&gt; 関数を用意して中で &lt;code&gt;ERC20._transfer&lt;/code&gt; を行います。ユーザーがフロントエンドでEIP712署名を行って、Relayerサーバーにsignatureを送って、relayerが &lt;code&gt;transferWithAuthorization&lt;/code&gt; を呼び出してtransfer処理を行います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;eip-2771&#34;&gt;EIP-2771&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://eips.ethereum.org/EIPS/eip-2771&#34;&gt;https://eips.ethereum.org/EIPS/eip-2771&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;trustedForwarder&lt;/code&gt; というスマートコントラクトを用意してTokenContractに設定します。ユーザーはフロントエンドでverifyingContractをforwarderAddressにしてEIP712署名を行って、Relayerサーバーにデータとsignatureを送ります。RelayerはデータとSignatureを使って &lt;code&gt;forwarderContract&lt;/code&gt; の &lt;code&gt;execute&lt;/code&gt; を呼び出してtransfer処理を行う。&#xA;forwarder contractとrelayサーバーを自前で構築するか、saasを使うことが可能です。relayサーバーは分散化GSN(Gas Station Network)もあります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;実装&#34;&gt;実装&lt;/h2&gt;&#xA;&lt;p&gt;実際動くものを作ってみないとものを言えないタイプなので、各EIPを実装してみました。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/dongri/ERC-2612&#34;&gt;https://github.com/dongri/ERC-2612&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/dongri/ERC-3009&#34;&gt;https://github.com/dongri/ERC-3009&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/dongri/ERC-2771&#34;&gt;https://github.com/dongri/ERC-2771&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>GitHubがお金になった話</title>
      <link>https://dongri.github.io/2024/05/github%E3%81%8C%E3%81%8A%E9%87%91%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E8%A9%B1/</link>
      <pubDate>Wed, 15 May 2024 20:53:16 +0900</pubDate>
      <guid>https://dongri.github.io/2024/05/github%E3%81%8C%E3%81%8A%E9%87%91%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E8%A9%B1/</guid>
      <description>&lt;p&gt;2017年にこんな記事を書いてました。&#xA;&lt;a href=&#34;https://dongri.github.io/2017/12/oss%E3%81%8C%E3%81%8A%E9%87%91%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E8%A9%B1/&#34;&gt;OSSがお金になった話&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;7年過ぎた今はこんな話をしてみようと思います。&#xA;「GitHubがお金になった話」&lt;/p&gt;&#xA;&lt;p&gt;この数年GitHubでブロックチェーン関連のプロジェクトにコミットしたり、issue立てたり、自分が書いたコードを公開したりと活動してました。&#xA;正直どんなプロジェクトで具体的にどんなことやったかははっきり思い出せない状態です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;celestiaの例&#34;&gt;Celestiaの例&lt;/h2&gt;&#xA;&lt;p&gt;2023年9月のある日あるDiscordのチャンネルでCelestiaのエアドロップにGitHubアカウントが対象になってるからどんぐりさんのアカウントでチェックしてみてと言われてチェックしてみたら対象でした。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/CelestiaOrg/status/1706671258757468414&#34;&gt;https://twitter.com/CelestiaOrg/status/1706671258757468414&lt;/a&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2024-05-15/celestia.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.celestia.org/genesis-drop/&#34;&gt;https://blog.celestia.org/genesis-drop/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;当初のCelestiaはそんなに注目されてなくて実際対象になってるGitHubアカウントもClaimせずにいたらしく、残りの枠をClaim申請したアカウントに分配されたようです。もらった $TIA をピーク時に売ったら800万円はあるかと思いますが、トレーダーではない自分には当然そんなことができませんでしたｗ&lt;/p&gt;&#xA;&lt;h2 id=&#34;fluenceの例&#34;&gt;Fluenceの例&lt;/h2&gt;&#xA;&lt;p&gt;2024年3月のある日一通のメールが届きました、お前のGitHubアカウントが &lt;a href=&#34;https://fluence.network&#34;&gt;https://fluence.network&lt;/a&gt; の Developer Rewards 対象になってる、お金払うからそのアカウントに俺のウォレットアドレスを紐付けてほしいと。最初はGmailのスパム機能を疑ってましたが、メールちゃんと見て、fluenceのサイトでチェックしてみたら本当でした。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.fluence.network/the-future-is-cloudless-fluences-depin-computing-platform-and-flt-token-are-now-live/&#34;&gt;The Future is Cloudless: Fluence’s DePIN computing platform DAO and FLT token are now live&lt;/a&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2024-05-15/fluence.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;ロックアップ期間があってすぐ取引できなかったんですが、今日二ヶ月のロックアップが解除で今の値段だと70万円ぐらいありました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;taikoの例&#34;&gt;Taikoの例&lt;/h2&gt;&#xA;&lt;p&gt;2024年6月6日、Taikoのエアドロップが開始されました。602 $TKOで30万円ぐらいの価値がありました。&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2024-05-15/taiko.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;感謝&#34;&gt;感謝&lt;/h2&gt;&#xA;&lt;p&gt;このように開発者の貢献を評価してエアドロップしてくれるプロジェクトに感謝します。&#xA;引き続きGitHubでいろんなプロジェクトに貢献して大事に使おうと思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cypherock X1 Wallet 使ってみた感想</title>
      <link>https://dongri.github.io/2023/02/cypherock-x1-wallet-%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E6%84%9F%E6%83%B3/</link>
      <pubDate>Thu, 23 Feb 2023 22:23:54 +0900</pubDate>
      <guid>https://dongri.github.io/2023/02/cypherock-x1-wallet-%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E6%84%9F%E6%83%B3/</guid>
      <description>&lt;p&gt;(Followed by English translation)&lt;/p&gt;&#xA;&lt;p&gt;先日Bspeak!さんのギブアウェア企画(&lt;a href=&#34;https://bspeak.substack.com/p/aiweb3&#34;&gt;https://bspeak.substack.com/p/aiweb3&lt;/a&gt;)に参加して、当選されたCypherock X1 Walletが先日届きました。数日触ってみた感想を書きます。&lt;/p&gt;&#xA;&lt;p&gt;まず自分の質問の答えから&#xA;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1JWEgAfSGvUpQsNistCrnNCuZGiIgXqmJLtLdgN9lMoM/edit#gid=0&#34;&gt;https://docs.google.com/spreadsheets/d/1JWEgAfSGvUpQsNistCrnNCuZGiIgXqmJLtLdgN9lMoM/edit#gid=0&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;質問&#34;&gt;質問&lt;/h2&gt;&#xA;&lt;p&gt;mnemonicの仕組みを知りたいです。4つのカードに分けて暗号化して管理してるのか？その場合復号するためにマスターキーが必要のはずだけど、それはどうやって実現してるのか？&lt;/p&gt;&#xA;&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;&#xA;&lt;p&gt;mnemonicの前に、デバイスの中でエントロピーが生成されます。このエントロピーを利用して、BIP39規格に準拠したmnemonicを作成します。デフォルトでは、24語のシードフレーズを作成します。このエントロピーを、X1ウォレットに1つ、X1カードに4つ、計5つに暗号的に分割する「Shamir Secret Sharing」というアルゴリズムを適用しています。エントロピーは、1つのシェアが他のシェアのコンポーネントを推測できないように分割されます。つまり、X1ウォレット上のX1カードを1枚タップすると、シードフレーズを見ることができるようになるのです。&lt;/p&gt;&#xA;&lt;h3 id=&#34;chatgptにshamir-secret-sharingについて聞いてみた&#34;&gt;ChatGPTにShamir Secret Sharingについて聞いてみた&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Shamir Secret Sharing（シャミアの秘密分散）は、秘密情報を複数のパーティーに分散させるための暗号技術の1つです。&#xA;&#xA;秘密情報を共有する際に、通常は情報を1つの場所に集中して保管することが多いですが、この方法だと秘密情報が漏洩する危険性があります。Shamir Secret Sharingは、秘密情報を複数のパーティーに分割し、それぞれのパーティーに分割された情報の一部だけを知らせることで、秘密情報の漏洩リスクを低減することができます。&#xA;&#xA;Shamir Secret Sharingは、分割された秘密情報のうち、いくつかの情報のみを知っていても、秘密情報全体を復元することができるしきい値秘密分散の1つです。例えば、秘密情報を3つの部分に分割し、そのうち2つの部分を知っている場合に限り、元の秘密情報を復元できるようにすることができます。&#xA;&#xA;Shamir Secret Sharingは、暗号技術の分野で、データの保護や暗号化、秘密情報の共有など、様々な用途で利用されています。また、ブロックチェーンのスマートコントラクトなどの分野でも、Shamir Secret Sharingを用いて秘密情報を分割する方法が採用されています。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Cypherockはシークレットを4で共有して閾値を1にしたわけですね&lt;/p&gt;&#xA;&lt;h1 id=&#34;使ってみた感想&#34;&gt;使ってみた感想&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;mnemonic（シードフレーズ）を気にする必要がない&lt;br&gt;&#xA;多くのハードウェアウォレットは最初にmnemonicを忘れないように物理紙カードまで用意してそこに書き留めて安全な場所に保管しましょうだけど、Cypherockはそんなことしなくて良くて４枚のカードさえあれば復元できます。&lt;/li&gt;&#xA;&lt;li&gt;端末の操作が楽&lt;br&gt;&#xA;メニューの操作がボタン式ではなく、ゲーム機のスティックのような仕様で片手でも操作できて非常に楽でした。&lt;/li&gt;&#xA;&lt;li&gt;複数のウォレットが作れる&lt;br&gt;&#xA;多くのハードウェアウォレットは一つのウォレットのみサポートしてるが、Cypherockは役割に分けて複数のウォレットを作れたり、削除したりできます。&lt;/li&gt;&#xA;&lt;li&gt;サポートしてるコインの種類多い&lt;br&gt;&#xA;&lt;a href=&#34;https://www.cypherock.com/coin-support&#34;&gt;https://www.cypherock.com/coin-support&lt;/a&gt;&#xA;ここのリストされてるように多くのコインをサポートしてます。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;改善されてほしい点&#34;&gt;改善されてほしい点&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Account という名称がわかりにくかった&lt;br&gt;&#xA;cysyncアプリで最初にコイン追加する時、一瞬種類少ない！と勘違いしてました。アプリ上は &lt;code&gt;Account&lt;/code&gt; という名称で追加するが、USDCがなくて、え！？となりました。一旦Ethereumを追加してみるとサブメニューにAdd TokenがあってそこにEthereumチェーン上のToken一覧出てきました。ここで言う &lt;code&gt;Account&lt;/code&gt; は &lt;code&gt;Chain&lt;/code&gt; だったんですね。慣れたら全然違和感ないですが、初めは少しわかりにくかったんです。 &lt;code&gt;Account(chain)&lt;/code&gt; みたいなわかりやすい名称にしてほしいです。&lt;/li&gt;&#xA;&lt;li&gt;NFT表示機能あるといいね&lt;br&gt;&#xA;今開発中かも知らないが、cysyncアプリでNFT見れたらいいですね。&lt;/li&gt;&#xA;&lt;li&gt;MetaMaskのハードウェアウォレット一覧になかった&lt;br&gt;&#xA;Cypherockのシェアが大きくなるとMetaMaskがサポートするかも知らないが、今のところは使えなくて、今後に期待したいです。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;&#xA;&lt;p&gt;頻繁にMetaMaskなどに繋げて使うのには向いてないかもしれませんが、資産の保管には向いていると思います。&#xA;ニーモニック、シードフレーズ、リカバリーフレーズって何？という初心者にはよいハードウェアウォレットではないかと思います。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;english-translation&#34;&gt;English translation&lt;/h1&gt;&#xA;&lt;p&gt;I recently participated in Bspeak!&amp;rsquo;s give-away project (&lt;a href=&#34;https://bspeak.substack.com/p/aiweb3&#34;&gt;https://bspeak.substack.com/p/aiweb3&lt;/a&gt;) and received the Cypherock X1 Wallet the other day, which I won. I&amp;rsquo;ve had a chance to touch it for a few days and write my impressions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Merge後のEthereumステーキングの話</title>
      <link>https://dongri.github.io/2023/01/the-merge%E5%BE%8C%E3%81%AEethereum%E3%82%B9%E3%83%86%E3%83%BC%E3%82%AD%E3%83%B3%E3%82%B0%E3%81%AE%E8%A9%B1/</link>
      <pubDate>Tue, 10 Jan 2023 18:15:43 +0900</pubDate>
      <guid>https://dongri.github.io/2023/01/the-merge%E5%BE%8C%E3%81%AEethereum%E3%82%B9%E3%83%86%E3%83%BC%E3%82%AD%E3%83%B3%E3%82%B0%E3%81%AE%E8%A9%B1/</guid>
      <description>&lt;p&gt;2022年9月15日にマージが無事完了。&#xA;ステーキングに関してinfura,alchemyなどのRPCがマージ後は使えなくなった。&#xA;つまりノードを自分で建てないといけない。2TBのストレージ用意するのは結構なコスト。&lt;/p&gt;&#xA;&lt;p&gt;今まではawsで月1万円ちょっとでalexaアプリ開発のクレジット50ドル分があったので、実質5千円ぐらいでステーキングできたのが、2TBストレージのノードまで建てると月7万円まで膨らんだ。クリプトのこの冬にこれはやってられないと思って、自宅でノード建てようと思った。使ってないMacBookでやってみたが1TBストレージが10日間ぐらいでいっぱいになった。外部SSD接続してもよいが、どうせやるならRaspberry Piで遊んでみようと思ってRaspberry Piと4TBのSSDを買って構築。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ハードウェア&#34;&gt;ハードウェア&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Raspberry Pi 4B 8GB&#xA;4TB SSD&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;いろいろな問題&#34;&gt;いろいろな問題&lt;/h2&gt;&#xA;&lt;p&gt;いろんな想定外の問題に遭遇したのでリストしてみた&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;2TB以上のストレージマウント問題&lt;br&gt;&#xA;OSとデータを4TB SSDで動かそうとして、マウントで2TB以上だとマウントがうまく行かない問題。GPTフォーマットにしないといけない。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Ethereum on Arm イメージ動かない問題&lt;br&gt;&#xA;&lt;a href=&#34;https://ethereum-on-arm-documentation.readthedocs.io/en/latest/index.html&#34;&gt;https://ethereum-on-arm-documentation.readthedocs.io/en/latest/index.html&lt;/a&gt;&#xA;インストールしたけど、ethereum/etehreumでログインできない。&#xA;諦めて自前でRaspberry Pi用のUbuntuを入れる&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;4TBストレージが壊れた&lt;br&gt;&#xA;Gethの同期中突然書き込めなくなった。試しに修復コマンドで頑張ってみたがだめだった。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Geth最後の100 blockぐらいで同期が終わらない問題&lt;br&gt;&#xA;最後の100 blockが12時間経っても同期が終わらない、ディスクI/Oか、bandwidthの問題&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;USB 2が遅い問題&lt;br&gt;&#xA;SSDをUSB 2のところに挿してた。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;WiFiが遅い問題&lt;br&gt;&#xA;MacBookではWiFiで問題なくステーキングできたけど、Raspberry PiのWiFiは遅い、LANケーブルに変更&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;電源問題&lt;br&gt;&#xA;Raspberry Pi買った時に付いて来た電源を使ってたが、しばらく動かすとsshできなくなり、Raspberry Piが無反応状態になる、PC用の電源に変更。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Prysmがメモリ食う問題&lt;br&gt;&#xA;Go製のPrysmは8GBのメモリでGethと一緒に動かすとメモリが足りなくてすぐ死ぬ、Rust製のLighthouseに変更&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;それでもメモリ足りない問題&lt;br&gt;&#xA;Lighthouseはある程度動かしたけど、数時間立つとvalidator client側が落ちる。&#xA;3GBのswapfile作成してswapスペースを確保する&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;普段クラウド（aws, gcp）で動かすとなかなか出会えない問題で辛かった。面白かったところもあるけど&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://dongri.github.io/images/post/2023-01-10/raspberry-pi.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>国内外NFTマーケットのトランザクション雰囲気を調べてみた</title>
      <link>https://dongri.github.io/2022/03/%E5%9B%BD%E5%86%85%E5%A4%96nft%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%88%E3%81%AE%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E9%9B%B0%E5%9B%B2%E6%B0%97%E3%82%92%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Mon, 21 Mar 2022 09:53:02 +0900</pubDate>
      <guid>https://dongri.github.io/2022/03/%E5%9B%BD%E5%86%85%E5%A4%96nft%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%88%E3%81%AE%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E9%9B%B0%E5%9B%B2%E6%B0%97%E3%82%92%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>&lt;p&gt;NFTマーケットのトランザクション量の正確な数字ではなく、etherscan.io, polygonscan.io からどれぐらいのトランザクションがあるかで雰囲気を感じる図を集めてみた。&#xA;これは日本時間2022年03月21日朝10時時点でのNFTマーケットのトランザクション量を取得した結果である。&#xA;Coincheck NFTや、楽天 NFTも見たかったが、プライベートチェーンなので、不可能だった。&#xA;NFT Studioも見てみたかったがクレジットカードのみの販売でマーケットのコントラクトアドレスを見つけることができなかった。&lt;/p&gt;&#xA;&lt;p&gt;海外勢の秒単位に対して、国内勢の日単位はまだまだ距離感あるなと思った。&lt;/p&gt;&#xA;&lt;h1 id=&#34;opensea&#34;&gt;OpenSea&lt;/h1&gt;&#xA;&lt;h3 id=&#34;ethereum&#34;&gt;Ethereum&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://etherscan.io/address/0x7f268357A8c2552623316e2562D90e642bB538E5&#34;&gt;https://etherscan.io/address/0x7f268357A8c2552623316e2562D90e642bB538E5&lt;/a&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2022-03-21/opensea-ethereum.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;polygon&#34;&gt;Polygon&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://polygonscan.com/address/0xf715beb51ec8f63317d66f491e37e7bb048fcc2d&#34;&gt;https://polygonscan.com/address/0xf715beb51ec8f63317d66f491e37e7bb048fcc2d&lt;/a&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2022-03-21/opensea-polygon.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;rarible&#34;&gt;Rarible&lt;/h1&gt;&#xA;&lt;h3 id=&#34;ethereum-1&#34;&gt;Ethereum&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://etherscan.io/address/0x9757F2d2b135150BBeb65308D4a91804107cd8D6&#34;&gt;https://etherscan.io/address/0x9757F2d2b135150BBeb65308D4a91804107cd8D6&lt;/a&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2022-03-21/rarible-ethereum.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;polygon-1&#34;&gt;Polygon&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://polygonscan.com/address/0x12b3897a36fDB436ddE2788C06Eff0ffD997066e&#34;&gt;https://polygonscan.com/address/0x12b3897a36fDB436ddE2788C06Eff0ffD997066e&lt;/a&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2022-03-21/rarible-polygon.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;foundation&#34;&gt;Foundation&lt;/h1&gt;&#xA;&lt;h3 id=&#34;ethereum-2&#34;&gt;Ethereum&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://etherscan.io/address/0xcda72070e455bb31c7690a170224ce43623d0b6f&#34;&gt;https://etherscan.io/address/0xcda72070e455bb31c7690a170224ce43623d0b6f&lt;/a&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2022-03-21/foundation-ethereum.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;superrare&#34;&gt;SuperRare&lt;/h1&gt;&#xA;&lt;h3 id=&#34;ethereum-3&#34;&gt;Ethereum&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://etherscan.io/address/0xb932a70a57673d89f4acffbe830e8ed7f75fb9e0&#34;&gt;https://etherscan.io/address/0xb932a70a57673d89f4acffbe830e8ed7f75fb9e0&lt;/a&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2022-03-21/superrare-ethereum.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;looksrare&#34;&gt;LooksRare&lt;/h1&gt;&#xA;&lt;h3 id=&#34;ethereum-4&#34;&gt;Ethereum&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://etherscan.io/address/0x59728544B08AB483533076417FbBB2fD0B17CE3a&#34;&gt;https://etherscan.io/address/0x59728544B08AB483533076417FbBB2fD0B17CE3a&lt;/a&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2022-03-21/looksrare-ethereum.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;sbi-nft&#34;&gt;SBI NFT&lt;/h1&gt;&#xA;&lt;h3 id=&#34;ethereum-5&#34;&gt;Ethereum&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://etherscan.io/address/0x2580bcfee471807f75314baac8facb7f63d5b761&#34;&gt;https://etherscan.io/address/0x2580bcfee471807f75314baac8facb7f63d5b761&lt;/a&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2022-03-21/sbinft-ethereum.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;polygon-2&#34;&gt;Polygon&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://polygonscan.com/address/0xf52c52b399101669c3b8bcbd0db0a55395995acb&#34;&gt;https://polygonscan.com/address/0xf52c52b399101669c3b8bcbd0db0a55395995acb&lt;/a&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2022-03-21/sbinft-polygon.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;[2022年12月21日追加]&lt;/p&gt;&#xA;&lt;h1 id=&#34;tofunft&#34;&gt;tofuNFT&lt;/h1&gt;&#xA;&lt;h3 id=&#34;ethereum-6&#34;&gt;Ethereum&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://etherscan.io/address/0x7bc8b1b5aba4df3be9f9a32dae501214dc0e4f3f&#34;&gt;https://etherscan.io/address/0x7bc8b1b5aba4df3be9f9a32dae501214dc0e4f3f&lt;/a&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2022-03-21/tofu-ethereum.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;polygon-3&#34;&gt;Polygon&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://polygonscan.com/address/0x7bc8b1b5aba4df3be9f9a32dae501214dc0e4f3f&#34;&gt;https://polygonscan.com/address/0x7bc8b1b5aba4df3be9f9a32dae501214dc0e4f3f&lt;/a&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2022-03-21/tofu-polygon.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;※ マーケットのコントラクトアドレスが違ったら指摘お願いします。&lt;/p&gt;</description>
    </item>
    <item>
      <title>フルオンチェーンNFTプロジェクト Permavatar</title>
      <link>https://dongri.github.io/2021/11/%E3%83%95%E3%83%AB%E3%82%AA%E3%83%B3%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3nft%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88-permavatar/</link>
      <pubDate>Wed, 10 Nov 2021 10:16:22 +0900</pubDate>
      <guid>https://dongri.github.io/2021/11/%E3%83%95%E3%83%AB%E3%82%AA%E3%83%B3%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3nft%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88-permavatar/</guid>
      <description>&lt;p&gt;数週間前にフルオンチェーンNFTを作ってみたくて、Permavatarというプロジェクトを始めました。&#xA;自分一人でやるのも面白くなかったので、Twitterで募集しました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://dongri.github.io/images/post/2021-11-10/permavatar.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/dongrium/status/1449698160817803278&#34;&gt;https://twitter.com/dongrium/status/1449698160817803278&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ありがたいことにいろんな方から連絡が来てちょっとびっくりしました。&lt;/p&gt;&#xA;&lt;p&gt;この辺の経緯は &lt;a href=&#34;https://twitter.com/smcpglf&#34;&gt;shingofushimi.eth&lt;/a&gt; の記事を見れば雰囲気が分かるかと思います。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/smcpglf&#34;&gt;shingofushimi.eth&lt;/a&gt; の medium : &lt;a href=&#34;https://smcpglf.medium.com/%E6%AE%8B%E3%82%8A%E7%B6%9A%E3%81%91%E3%82%8B%E3%83%A2%E3%83%8E%E3%82%92%E5%89%B5%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%8B%E3%82%89-nft-project%E3%82%92%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%92%E3%81%A6%E3%81%BF%E3%81%BE%E3%81%97%E3%81%9F-a7a42859440f&#34;&gt;残り続けるモノを創ってみたかったから、NFT Projectを立ち上げてみました。&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ここではスマートコントラクトなど技術面の話を少ししようかと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;フルオンチェーンの難しいところ&#34;&gt;フルオンチェーンの難しいところ&lt;/h2&gt;&#xA;&lt;p&gt;フルオンチェーンはすべてのデータをEthereum上に保存するので、データの量でいろんな制約に引っかかりました。&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-一つのfunctionで変数定義オーバー問題&#34;&gt;1. 一つのfunctionで変数定義オーバー問題&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CompilerError: Stack too deep, try removing local variables.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一つのsolidity functionで変数の定義が一定数超えるとエラーが発生します。&#xA;対応策としては、functionを分割して処理を分けるか、ブロックを定義して、それぞれのブロックで変数を定義することで回避できます。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-スマートコントラクトコードサイズ問題&#34;&gt;2. スマートコントラクトコードサイズ問題&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;Permavatar&amp;#34; ran out of gas. Something in the constructor (ex: infinite loop) caused gas estimation to fail. Try:&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;solidityのビルドはうまくいきますが、デプロイすると上のようなエラーが発生しました。&#xA;Gasが足りないようなエラーメッセージですが、実はこのエラーはスマートコントラクトコードサイズが大きすぎたのが問題でした。&#xA;調べて知ったのですが、EIP-170という制約があるらしいです。&#xA;&lt;a href=&#34;https://github.com/ethereum/EIPs/blob/master/EIPS/eip-170.md&#34;&gt;https://github.com/ethereum/EIPs/blob/master/EIPS/eip-170.md&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;gas-fee-節約対策&#34;&gt;Gas fee 節約対策&lt;/h2&gt;&#xA;&lt;p&gt;普通にコントラクト書くとERC721の &lt;code&gt;setTokenURI&lt;/code&gt; にsvgのデータを渡してセットすると思いますが、それだとデータサイズが大きくなるので、Permavatarでは &lt;code&gt;setTokenURI&lt;/code&gt; を使用せず、tokenIDを呼び出す時に使われる &lt;code&gt;tokenURI&lt;/code&gt; でsvgを生成して返すようにしてます。これによってmint時のGas feeを最小限に抑えることができました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;拘ったこと&#34;&gt;拘ったこと&lt;/h2&gt;&#xA;&lt;p&gt;フルオンチェーン + Decentralized&lt;/p&gt;&#xA;&lt;p&gt;これを守りたくて、NFTのmint画面も特定のサーバーで構築するのではなく、IPFSに配置するようにしました。&#xA;&lt;a href=&#34;https://app.uniswap.org/#/swap&#34;&gt;https://app.uniswap.org/#/swap&lt;/a&gt; と同じ方式です。&lt;/p&gt;&#xA;&lt;p&gt;バッドエンドになる部分のスマートコントラクトはEthreumネットワーク上で動いて、フロントエンドになる部分はIPFSにデプロイされてるので、理論上は永久に動くサービスになります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;最後に&#34;&gt;最後に&lt;/h2&gt;&#xA;&lt;p&gt;ここまで読んだら、何十年、何百年残り続ける Permavatar をmintしたくなりましたか？ｗ&lt;/p&gt;</description>
    </item>
    <item>
      <title>Arweave マイニング</title>
      <link>https://dongri.github.io/2021/10/arweave-%E3%83%9E%E3%82%A4%E3%83%8B%E3%83%B3%E3%82%B0/</link>
      <pubDate>Mon, 11 Oct 2021 11:49:39 +0900</pubDate>
      <guid>https://dongri.github.io/2021/10/arweave-%E3%83%9E%E3%82%A4%E3%83%8B%E3%83%B3%E3%82%B0/</guid>
      <description>&lt;h2 id=&#34;arweaveとは&#34;&gt;Arweaveとは&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Arweaveは、データを無期限に保存するためのプラットフォームを提供することを目的とした分散型のストレージネットワークです。本ネットワークは「決して忘れることのない共同所有のハードドライブ」と自己表現しており、主にpermawebをホストしています。これは、コミュニティ主導のアプリケーションやプラットフォームを多数備えた永久的な分散型ウェブです。&#xA;Arweaveネットワークは、ネイティブの仮想通貨ARを使って「マイナー」に料金を支払い、ネットワークの情報を無期限に保存しています。&#xA;このプロジェクトは、まず2017年8月に「Archain」として発表され、その後2018年2月に「Arweave」にリブランディングし、2018年6月に正式にローンチしました。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;coinmarketcapから抜粋&lt;/p&gt;&#xA;&lt;p&gt;アーウィーブと読むらしい。FileCoinとの違いは、従量制課金ではなく、初回一回だけで永久にデータが保存される点です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;arweave-ar-token&#34;&gt;Arweave (AR) Token&lt;/h2&gt;&#xA;&lt;p&gt;Arweaveは自分達のWalletを持ってます。Chrome, FirefoxのExtensionをインストールすれば、MetaMaskの似たようなUIでWalletを生成できて、AR送金もできます。&lt;br&gt;&#xA;&lt;a href=&#34;https://docs.arweave.org/info/wallets/arweave-web-extension-wallet&#34;&gt;https://docs.arweave.org/info/wallets/arweave-web-extension-wallet&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;arweave-mining&#34;&gt;Arweave Mining&lt;/h2&gt;&#xA;&lt;p&gt;日本の取引所にAR上場してないので、マイニングしてみました。マイニングの手順は簡単で、公式ドキュメントを参考にすれば十数分でできるかと思います。&lt;br&gt;&#xA;&lt;a href=&#34;https://docs.arweave.org/info/mining/mining-guide&#34;&gt;https://docs.arweave.org/info/mining/mining-guide&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-awsでec2作成&#34;&gt;1. awsでEC2作成&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;OS: Ubuntu&#xA;CPU: 4&#xA;RAM: 16GB&#xA;Storage: 1000GB&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://viewblock.io/arweave&#34;&gt;https://viewblock.io/arweave&lt;/a&gt;&#xA;こちらのデータから見ると現在データのサイズは18TBなので、全部syncするのはさすがに無理で1000GBにします。それによってマイニング報酬が違います。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-file-ulimit設定&#34;&gt;2. File ulimit設定&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim /etc/sysctl.conf&#xA;&#xA;fs.file-max=900000&#xA;fs.nr_open=9000001&#xA;&#xA;$ sysctl -p&#xA;&#xA;$ vim /etc/security/limits.conf&#xA;ubuntu         soft    nofile  900000&#xA;&#xA;$ umit -n&#xA;900000&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-arweave-ダウンロード&#34;&gt;3. arweave ダウンロード&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ArweaveTeam/arweave/releases&#34;&gt;https://github.com/ArweaveTeam/arweave/releases&lt;/a&gt;&lt;br&gt;&#xA;こちらからUbuntu版をダウンロード&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ wget https://github.com/ArweaveTeam/arweave/releases/download/N.2.4.4.0/arweave-2.4.4.0.ubuntu18-x86_64.tar.gz&#xA;&#xA;$ tar -xzf arweave-2.4.4.0.ubuntu18-x86_64.tar.gz&#xA;&#xA;$ mkdir arweave-2.4.4.0&#xA;$ mv * arweave-2.4.4.0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4-start&#34;&gt;4. start&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd arweave-2.4.4.0&#xA;$ ./bin/start mine mining_addr YOUR-MINING-ADDRESS peer 188.166.200.45 peer 188.166.192.169 peer 163.47.11.64 peer 139.59.51.59 peer 138.197.232.192&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;YOUR-MINING-ADDRESS&lt;/code&gt; のところにChrome Extensionで生成したWalletのアドレスを入れます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NFTの話</title>
      <link>https://dongri.github.io/2021/05/nft%E3%81%AE%E8%A9%B1/</link>
      <pubDate>Sun, 02 May 2021 11:12:03 +0900</pubDate>
      <guid>https://dongri.github.io/2021/05/nft%E3%81%AE%E8%A9%B1/</guid>
      <description>&lt;p&gt;なんであの絵が75億円もするの？なんで初ツイートが3億円もするの？&lt;br&gt;&#xA;ちょうど一年ぐらい前からNFT関連の仕事して、NFT発行したり、NFTマーケット作ったりして、NFTそのものはわかってるつもりだけど、NFTアートについては何もわからない状態です。&lt;/p&gt;&#xA;&lt;h3 id=&#34;nftとは&#34;&gt;NFTとは？&lt;/h3&gt;&#xA;&lt;p&gt;NFT（Non-fungible token）は非代替性トークンと言って、ファンジブルトークン（FT）と比較してみます。&lt;br&gt;&#xA;あなたの1BTCとわたしの1BTCは同じ、これがFT。&lt;br&gt;&#xA;あなたのレベル1の剣とわたしのレベル5の剣は違う。これがNFT。&lt;/p&gt;&#xA;&lt;h3 id=&#34;erc721-erc1155&#34;&gt;ERC721, ERC1155&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://erc721.org/&#34;&gt;http://erc721.org/&lt;/a&gt;&lt;br&gt;&#xA;&lt;a href=&#34;https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&#34;&gt;https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&lt;/a&gt;&lt;br&gt;&#xA;&lt;a href=&#34;https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md&#34;&gt;https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md&lt;/a&gt;&lt;br&gt;&#xA;この辺にNFTの仕様が書いてあります。&lt;br&gt;&#xA;FTはトークンアドレスと発行枚数で誰が何枚持ってるか？みんな持ってるものは同じで、枚数が違うだけです。&lt;br&gt;&#xA;NFT（ERC721）はトークンアドレスとインデックスがあって、各インデックスの発行枚数は1つだけ、人それぞれ持ってるインデックスが違うので、アドレスとインデックスを組み合わせばユニークになるわけです。&lt;br&gt;&#xA;NFT（ERC1155）はトークンアドレスとインデックスで構成されてるところはERC721と同じだが、あるインデックスに対して発行枚数を指定できます。なので、わたしが持ってる剣とあなたが持ってる剣は同じインデックスかもしらないです。（これってノンファンジブルと言えるのか？）&lt;/p&gt;&#xA;&lt;h3 id=&#34;nftの中身&#34;&gt;NFTの中身&lt;/h3&gt;&#xA;&lt;p&gt;75億円の絵を見てみましょう。&lt;br&gt;&#xA;&lt;a href=&#34;https://osake.io/assets/0x2a46f2ffd99e19a89476e2f62270e0a35bbf0756/40913&#34;&gt;https://osake.io/assets/0x2a46f2ffd99e19a89476e2f62270e0a35bbf0756/40913&lt;/a&gt;&lt;br&gt;&#xA;TokenURIの &lt;code&gt;ipfs://ipfs/QmPAg1mjxcEQPPtqsLoEcauVedaeMH81WXDPvPx3VC5zUz&lt;/code&gt; がNFTのメタデータの場所です。実際オンチェーン（ブロックチェーン）に書き込まれるのはここまでです。&#xA;&lt;a href=&#34;https://ipfs.io/ipfs/QmPAg1mjxcEQPPtqsLoEcauVedaeMH81WXDPvPx3VC5zUz&#34;&gt;https://ipfs.io/ipfs/QmPAg1mjxcEQPPtqsLoEcauVedaeMH81WXDPvPx3VC5zUz&lt;/a&gt;&#xA;開いて見るとJSONファイルで、実際のイメージURLとその他プロパティが入ってます。&lt;br&gt;&#xA;imageUrlを見ると、 &lt;a href=&#34;https://ipfsgateway.makersplace.com/ipfs/QmZ15eQX8FPjfrtdX3QYbrhZxJpbLpvDpsgb2p3VEH8Bqq&#34;&gt;https://ipfsgateway.makersplace.com/ipfs/QmZ15eQX8FPjfrtdX3QYbrhZxJpbLpvDpsgb2p3VEH8Bqq&lt;/a&gt; これが画像のサムネイルみたいなものですね。&lt;br&gt;&#xA;実データは &lt;code&gt;raw_media_file&lt;/code&gt; のところにあります。このサイズが320MBぐらいのjpgが75億円ですね。&#xA;&lt;a href=&#34;https://ipfsgateway.makersplace.com/ipfs/QmXkxpwAHCtDXbbZHUwqtFucG1RMS6T87vi1CdvadfL7qA&#34;&gt;https://ipfsgateway.makersplace.com/ipfs/QmXkxpwAHCtDXbbZHUwqtFucG1RMS6T87vi1CdvadfL7qA&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;データの保管場所&#34;&gt;データの保管場所&lt;/h3&gt;&#xA;&lt;p&gt;NFTのメタデータの保管場所は上で見たように、 &lt;code&gt;ipfsgateway.makersplace.com&lt;/code&gt; というところのドメイン配下ですね。&lt;br&gt;&#xA;NFTの所有者データは以下のようにブロックチェーンで管理されてます。&lt;br&gt;&#xA;&lt;a href=&#34;https://etherscan.io/address/0x2a46f2ffd99e19a89476e2f62270e0a35bbf0756#readContract&#34;&gt;https://etherscan.io/address/0x2a46f2ffd99e19a89476e2f62270e0a35bbf0756#readContract&lt;/a&gt;&lt;br&gt;&#xA;ownerOfのところで、_tokenId: 40913 してQueryすると所有者のアドレスが見れます。&lt;br&gt;&#xA;しかし、データそのものは今までのWebと変わらず、ブロックチェーンの外で保管されます。この絵はIPFSというファイルシステムを使って少し（少し）いい方だと思います。&#xA;NFT発行業者によってS3に保管するところもあれば、普通のサーバーに置く業者もあります。&lt;br&gt;&#xA;つまり、S3からデータ消されたり、サーバーが停止されてデータにアクセスできなくなった場合、所有者すらアクセスできなくなります。さらにデータが改ざんされる可能性もあります。&#xA;&lt;a href=&#34;https://osake.io/assets/0x273f7f8e6489682df756151f5525576e322d51a3/40430081&#34;&gt;https://osake.io/assets/0x273f7f8e6489682df756151f5525576e322d51a3/40430081&lt;/a&gt;&lt;br&gt;&#xA;例えばこういうゲームアイテムのNFT買ったとして運営元の mycryptoheroes.net が潰れたらデータも消えて何も残らないですね。昔のゲーム内マネーとかと一緒かと思います。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ipfs&#34;&gt;IPFS&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://ipfs.io/&#34;&gt;https://ipfs.io/&lt;/a&gt;&lt;br&gt;&#xA;IPFSは分散化されて、一度生成したhash値は改ざんできないところはS3などに比べると安全だが、IPFSもnodeが消えたりすると本データは消えます。誤解しがちなのはIPFSにadd, pinしてhash値取れて、gateway提供してるところでアクセスできたと安心してる人もいますが、実際それはgateway, node間のキャッシュであって、本データは別のnodeに存在します。自分でnodeメンテナンスし続けない限りキャッシュがいつ消えてアクセスできなくなるのもおかしくないと思います。お金払ってpinしてくれるところもあるけど、結局は中央集権的やつですよね。&lt;/p&gt;&#xA;&lt;h3 id=&#34;osake飲みながら書いたコードから&#34;&gt;Osake飲みながら書いたコードから&lt;/h3&gt;&#xA;&lt;p&gt;半年ぐらい前に🍺 飲みながらNFT発行、NFTマーケットのコード書いてみました。&lt;br&gt;&#xA;&lt;a href=&#34;https://osake.io&#34;&gt;https://osake.io&lt;/a&gt;&lt;br&gt;&#xA;NFT発行で使う保管場所は &lt;a href=&#34;http://pinata.cloud&#34;&gt;http://pinata.cloud&lt;/a&gt; というIPFS pinning serviceを使ってます。自前でIPFSのnodeをメンテナンスするよりかはこのような業者に任せて方がいいだろうと思いました。無料で似たようなサービスもありますが、いつサービス停止されてもおかしくないので、ここは課金しても比較的に安全な場所を選んだつもりです。&lt;br&gt;&#xA;サポートしてるチェーンもEthereum以外Polygon, Binance Smart Chainなどあります。&lt;br&gt;&#xA;お金がなくて（GasPriceが高くて）メインネットにはコントラクトデプロイしてない状態だが、Rinkebyなどのテストネットではいくらでも遊べます。&lt;/p&gt;&#xA;&lt;h3 id=&#34;nftアートは何もわからない&#34;&gt;NFTアートは何もわからない&lt;/h3&gt;&#xA;&lt;p&gt;NFTそのものはなんとなくわかってるつもりだけど、NFTアートに付く価値は何もわからない。&lt;br&gt;&#xA;NFTのオンチェーン上の所有者情報をチェットの代わりになるとかの使い方はありだけど、なんの保証もないオフチェーンデータを信じて高い価値が付くNFTアートに関しては何もわからないです。（今は）&lt;/p&gt;</description>
    </item>
    <item>
      <title>ETH2 Staking</title>
      <link>https://dongri.github.io/2020/12/eth2-staking/</link>
      <pubDate>Sun, 13 Dec 2020 09:46:43 +0900</pubDate>
      <guid>https://dongri.github.io/2020/12/eth2-staking/</guid>
      <description>&lt;p&gt;ETH2のステーキング方法について、まともな日本語記事がなかったり、あっても会員登録必要だったり、逆にわかりにくかったりしたので、自分がやった手順を書こうと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;staking&#34;&gt;Staking&lt;/h2&gt;&#xA;&lt;p&gt;ステーキングとはPoS（Proof of Stake）において、仮想通貨を自由に動かせない状態（ロック状態）にしてブロックに追加するデータの承認などの面でネットワークの維持に関わる見返りとして、その報酬を仮想通貨で受け取る仕組みです。&#xA;ETH2のステーキングだと年利4.9% ~ 21.6%ですが、stakeするETHが多ければ多いほど下がります。12月12日時点で13%程度です。&#xA;デポジットに関しても始まった時の進捗では524,288 ETHまで間に合うか心配してたが、後半になって一気に増えて予定した12月1日のローンチに間に合いました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;deposit&#34;&gt;Deposit&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://launchpad.ethereum.org/&#34;&gt;https://launchpad.ethereum.org/&lt;/a&gt; で32ETHをデポジットします。（注意: デポジットされた32ETHは今のところ2年間ロックされるので注意が必要）&#xA;デポジット方法は、 &lt;a href=&#34;https://launchpad.ethereum.org/overview&#34;&gt;https://launchpad.ethereum.org/overview&lt;/a&gt; ここの手順のまま進めばできるかと思います。&#xA;特に難しいことはありませんでしたが、ETH1とETH2のクライアント選ぶ時もしかすると注意が必要です。後ほどBeacon node起動する時のクライアントと関係してるので。&#xA;自分の場合はどっちもGo言語実装のGethとPrysmを選択しました。&#xA;デポジットが完了すると、validator_keysファイルを取得できるので、安全な場所に保管します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;prysm-環境&#34;&gt;Prysm 環境&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.prylabs.network/docs/install/install-with-script#system-requirements&#34;&gt;https://docs.prylabs.network/docs/install/install-with-script#system-requirements&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Recommended specifications&#xA;* Processor: Intel Core i7–4770 or AMD FX-8310 or better&#xA;* Memory: 16GB RAM&#xA;* Storage: 100GB available space SSD&#xA;* Internet: Broadband connection&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ラズパイとかでやってみようかと思ってたけど、このスペックは難しいのでペナルティ受ける可能性のあるawsにしました。&#xA;aws, gcp, azureなど大手クラウドサービスだと障害が起きた時大規模のノードが止まる可能性があるので、ペナルティがあるようです。&lt;/p&gt;&#xA;&lt;p&gt;EC2インスタンス&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Memory: 16GB&#xA;Storage: 100GB&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;beacon-node&#34;&gt;Beacon node&lt;/h2&gt;&#xA;&lt;p&gt;続いてbeacon chainのnodeを起動する必要あります。&#xA;&lt;a href=&#34;https://docs.prylabs.network/docs/install/install-with-script/&#34;&gt;https://docs.prylabs.network/docs/install/install-with-script/&lt;/a&gt; こちらからprysm.shをダウンロードします。&#xA;続いて &lt;a href=&#34;https://docs.prylabs.network/docs/mainnet/joining-eth2&#34;&gt;https://docs.prylabs.network/docs/mainnet/joining-eth2&lt;/a&gt; こちらに書いてあるStepでbeacon nodeの起動、validator accountのインポート、validatorの起動順にやっていきます。&lt;/p&gt;&#xA;&lt;h3 id=&#34;prysmshダウンロード&#34;&gt;prysm.shダウンロード&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mkdir prysm &amp;amp;&amp;amp; cd prysm&#xA;$ curl https://raw.githubusercontent.com/prysmaticlabs/prysm/master/prysm.sh --output prysm.sh &amp;amp;&amp;amp; chmod +x prysm.sh&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;beacon-node-1&#34;&gt;Beacon node&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ./prysm.sh beacon-chain --http-web3provider=https://mainnet.infura.io/v3/****&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;自前のETH1ノード使いたくなかったので、infuraを使うようにしました。もちろん自前のETHノードでも問題ないです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>さようなら「どんPay」 さようならOrigami</title>
      <link>https://dongri.github.io/2020/06/%E3%81%95%E3%82%88%E3%81%86%E3%81%AA%E3%82%89%E3%81%A9%E3%82%93pay-%E3%81%95%E3%82%88%E3%81%86%E3%81%AA%E3%82%89origami/</link>
      <pubDate>Tue, 30 Jun 2020 09:15:49 +0900</pubDate>
      <guid>https://dongri.github.io/2020/06/%E3%81%95%E3%82%88%E3%81%86%E3%81%AA%E3%82%89%E3%81%A9%E3%82%93pay-%E3%81%95%E3%82%88%E3%81%86%E3%81%AA%E3%82%89origami/</guid>
      <description>&lt;p&gt;2018年Pay乱立した時期に作った「どんPay」ですが、今日PlayStoreから削除します。&#xA;アプリに表示してるキャンペーン情報をメンテナンスするやる気もなくなりました。&lt;/p&gt;&#xA;&lt;p&gt;今100人前後のアクティブユーザーがいますが、そちらのユーザーには非常に申し訳ないと思います。&#xA;Twitterで応援メッセージまで送られた方もいらっしゃったので、なおさら申し訳ない気分です。&lt;/p&gt;&#xA;&lt;p&gt;ソースコードはこちらに公開してあるので、ご自由にどうぞ&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/donpay&#34;&gt;https://github.com/dongri/donpay&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;アプリの機能としては各種Payアプリのショートカットと期間内キャンペーン情報を見れるだけのシンプルな（クソ）アプリでした。&#xA;当時所属してたOrigamiのPayを宣伝する目的だったのでこんな背景にして、一覧のトップはもちろんOrigami Pay。&lt;/p&gt;&#xA;&lt;p&gt;そして今日2020年6月30日。さようならオリガミ&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://dongri.github.io/images/post/2020-06-30/donpay-0.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;play-store&#34;&gt;Play Store&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://dongri.github.io/images/post/2020-06-30/donpay-1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://dongri.github.io/images/post/2020-06-30/donpay-2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>SNSアカウントを使ったETH送金システム</title>
      <link>https://dongri.github.io/2020/05/sns%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9Feth%E9%80%81%E9%87%91%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0/</link>
      <pubDate>Sun, 31 May 2020 00:42:14 +0900</pubDate>
      <guid>https://dongri.github.io/2020/05/sns%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9Feth%E9%80%81%E9%87%91%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0/</guid>
      <description>&lt;p&gt;プライベートプロジェクトで &lt;a href=&#34;https://cryptotako.com&#34;&gt;cryptotako.com&lt;/a&gt; というサービスを開発しました。&lt;/p&gt;&#xA;&lt;p&gt;相手のイーサリアムアドレスを聞かなくてもシステム通してETHを送金することが可能です。&lt;/p&gt;&#xA;&lt;p&gt;サービスの主な機能は以下のようになります&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Twitter, GitHubなどのソーシャルネットワークアカウントでログイン&lt;/li&gt;&#xA;&lt;li&gt;Metamask, Dapperなどのウォレットからログイン&lt;/li&gt;&#xA;&lt;li&gt;Twitter, GitHub, ETH Addressを選択して送金&lt;/li&gt;&#xA;&lt;li&gt;Twttter, GitHub上での通知&lt;/li&gt;&#xA;&lt;li&gt;トランザクション履歴&lt;/li&gt;&#xA;&lt;li&gt;Twitter, GitHubアカウント連携でアドレス生成&lt;/li&gt;&#xA;&lt;li&gt;秘密鍵エクスポート&lt;/li&gt;&#xA;&lt;li&gt;email, username 変更&lt;/li&gt;&#xA;&lt;li&gt;法定通貨USD, JPYで換算表示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://dongri.github.io/images/post/2020-05-31/cryptotako1.png&#34; alt=&#34;image1&#34;&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2020-05-31/cryptotako2.png&#34; alt=&#34;image2&#34;&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2020-05-31/cryptotako3.png&#34; alt=&#34;image3&#34;&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2020-05-31/cryptotako4.png&#34; alt=&#34;image4&#34;&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2020-05-31/cryptotako5.png&#34; alt=&#34;image5&#34;&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2020-05-31/cryptotako6.png&#34; alt=&#34;image6&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Elixir 触って一ヶ月</title>
      <link>https://dongri.github.io/2020/03/elixir-%E8%A7%A6%E3%81%A3%E3%81%A6%E4%B8%80%E3%83%B6%E6%9C%88/</link>
      <pubDate>Mon, 02 Mar 2020 18:42:14 +0900</pubDate>
      <guid>https://dongri.github.io/2020/03/elixir-%E8%A7%A6%E3%81%A3%E3%81%A6%E4%B8%80%E3%83%B6%E6%9C%88/</guid>
      <description>&lt;p&gt;無職になってから新しい言語でも触ってみようと思い、Elixirを勉強し始めました。&lt;/p&gt;&#xA;&lt;p&gt;8歳になるElixirをなんで今さら触るかと言うと、Webベースのプロジェクトを作ろうと相談を受けて、またRoRでやる？それともGo？&#xA;RoR確かに早く書ける、しかしプロジェクトが大きくなるとパフォーマンスの問題とメンテナンスで若干苦労する感じがしました。&#xA;型のあるGoで書くとパフォーマンスもメンテナンスも心配ないが、飽きたと言うかなんとなく選択肢から外れました。&lt;/p&gt;&#xA;&lt;p&gt;相談受けたプロジェクトはそんなに急ぎのものでもないし、新しい言語、フレームワークでやってみようといろいろググったら出てきたのがElixir。&#xA;Erlang触ったことなかったので、はじめは若干怖い気持ちでしたが、読んでるうちにRubyじゃん！？と思ったときもありましたｗ&lt;/p&gt;&#xA;&lt;p&gt;Web向けのフレームワークはPhoenixがメジャーのようです。こいつもRailsじゃん！？とはじめはそう思いました。しかし、書いてるうちに全然違うことに気付きました。&#xA;Railsのような魔法がなくてよかったです。&lt;/p&gt;&#xA;&lt;p&gt;プロジェクトは2/3ぐらい終わったつもりだが、まだまだElixirのコアな部分は触れてません。途中でパターンマッチが楽しくなってif書いたら負け！と感じたこともありました。&lt;/p&gt;&#xA;&lt;p&gt;そもそもこの言語最高とか、このフレームワーク最高とか言うと絶対叩かれるので、そんなことは言いません。心からそう思ってもないし。&#xA;RoRに比べると確かにメンテナンスしやすい、Phoenixは魔法のようなものが少ないので初心者に優しいという感想でした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>I Love Netskope</title>
      <link>https://dongri.github.io/2019/12/i-love-netskope/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0900</pubDate>
      <guid>https://dongri.github.io/2019/12/i-love-netskope/</guid>
      <description>&lt;p&gt;&lt;code&gt;Maxごめん、復活させた&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Netskope大好きでちょっと便利なコマンド書いてみた。&lt;/p&gt;&#xA;&lt;h3 id=&#34;永遠にさようなら&#34;&gt;永遠にさようなら&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim goodbye.sh&#xA;&#xA;#!/bin/sh&#xA;&#xA;sudo ps aux | grep Netskope | grep -v grep | awk &amp;#39;{ print &amp;#34;kill -9&amp;#34;, $2 }&amp;#39; | sh&#xA;echo &amp;#39;[✓] Kill Netskope Process&amp;#39;&#xA;&#xA;sudo rm -rf /Applications/Remove\ Netskope\ Client.app&#xA;echo &amp;#39;[✓] Removed Remove Netskope Client.app&amp;#39;&#xA;&#xA;sudo rm -rf /Library/Application\ Support/Netskope&#xA;echo &amp;#39;[✓] Removed Agent of Netskope Client.app&amp;#39;&#xA;&#xA;echo &amp;#39;Successfully uninstalled.&amp;#39;&#xA;&#xA;$ sh goodbye.sh&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;しばらく消えて&#34;&gt;しばらく消えて&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim ~/.bashrc&#xA;&#xA;netskope () {&#xA;  case &amp;#34;$1&amp;#34; in&#xA;    pause)&#xA;      sudo launchctl unload /Library/LaunchDaemons/com.netskope.stagentsvc.plist&#xA;      echo &amp;#34;...Pause&amp;#34;&#xA;      ;;&#xA;    resume)&#xA;      sudo launchctl load /Library/LaunchDaemons/com.netskope.stagentsvc.plist&#xA;      echo &amp;#34;...Resume&amp;#34;&#xA;      ;;&#xA;    *)&#xA;      echo -e &amp;#34;netskope [pause|resume]&amp;#34;&#xA;  esac&#xA;}&#xA;&#xA;$ source ~/.bashrc&#xA;&#xA;$ netskope pause&#xA;$ curl ipconfig.io&#xA;&#xA;$ netskope resume&#xA;$ curl ipconfig.io&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上！開発者達の仕事が捗ると何よりです！&lt;/p&gt;</description>
    </item>
    <item>
      <title>GWのアウトプット</title>
      <link>https://dongri.github.io/2019/05/gw%E3%81%AE%E3%82%A2%E3%82%A6%E3%83%88%E3%83%97%E3%83%83%E3%83%88/</link>
      <pubDate>Sun, 05 May 2019 21:03:34 +0900</pubDate>
      <guid>https://dongri.github.io/2019/05/gw%E3%81%AE%E3%82%A2%E3%82%A6%E3%83%88%E3%83%97%E3%83%83%E3%83%88/</guid>
      <description>&lt;p&gt;ゴールデンウェークの長ーい10連休明日が最後。&#xA;元々北海道でも行ってこようかと思ったが飛行機のチケットが高くて諦める。&#xA;映画見に行ったり、スーパー銭湯行ったり、友達とあったり、食べる🍺飲むのがメインでした。&lt;/p&gt;&#xA;&lt;p&gt;夜は偶にコード書いたりもしてました。どんなものを書いたか？&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Terminalで英単語翻訳ツール&lt;br&gt;&#xA;&lt;a href=&#34;https://github.com/dongri/fanyi&#34;&gt;https://github.com/dongri/fanyi&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;GoでRailsみたいなboilerplate&lt;br&gt;&#xA;&lt;a href=&#34;https://github.com/dongri/candle&#34;&gt;https://github.com/dongri/candle&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;ElectronでTwitterデスクトップアプリ&lt;br&gt;&#xA;&lt;a href=&#34;https://github.com/dongri/twitter-mini&#34;&gt;https://github.com/dongri/twitter-mini&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;あとは、会社の人からもらったGW宿題とか、リンクは貼れない&lt;/p&gt;&#xA;&lt;p&gt;一番ハマったのはFit Boxingでしたね。&lt;br&gt;&#xA;&lt;a href=&#34;https://ec.nintendo.com/JP/ja/titles/70010000004221&#34;&gt;https://ec.nintendo.com/JP/ja/titles/70010000004221&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;こんな感じで長ーい10連休が終わりそうです。&lt;/p&gt;&#xA;&lt;p&gt;さー5月病にならないように頑張ろう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Haskellで自分のWebページをリニューアルした</title>
      <link>https://dongri.github.io/2019/04/haskell%E3%81%A7%E8%87%AA%E5%88%86%E3%81%AEweb%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E3%83%AA%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%A2%E3%83%AB%E3%81%97%E3%81%9F/</link>
      <pubDate>Sun, 21 Apr 2019 14:40:34 +0900</pubDate>
      <guid>https://dongri.github.io/2019/04/haskell%E3%81%A7%E8%87%AA%E5%88%86%E3%81%AEweb%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E3%83%AA%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%A2%E3%83%AB%E3%81%97%E3%81%9F/</guid>
      <description>&lt;p&gt;二週間前からHaskellにハマっており、当初は会社のあるサンプルコードをHaskellに書いてみようと思ったのがサーバーのスペックなど考えて諦めて自分のWebページをリニューアルに至ったところです。&lt;/p&gt;&#xA;&lt;p&gt;以下HaskellでWebページの開発、公開まで書いてみようと思います。 &lt;code&gt;Webページ　\= Webシステム&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;開発環境はMac OSXでのDocker for Macです。haskell, dockerのインストールなど省略させてください。&lt;/p&gt;&#xA;&lt;h2 id=&#34;haskellでweb開発&#34;&gt;HaskellでWeb開発？&lt;/h2&gt;&#xA;&lt;p&gt;正気なの？と思う方もいるかと思います、意外とその辺のWebフレームワークは存在してました。&lt;/p&gt;&#xA;&lt;h4 id=&#34;haskell-web-framework&#34;&gt;Haskell Web Framework&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Yesod (&lt;a href=&#34;https://www.yesodweb.com/&#34;&gt;https://www.yesodweb.com/&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Scotty (&lt;a href=&#34;https://github.com/scotty-web/scotty&#34;&gt;https://github.com/scotty-web/scotty&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Miso (&lt;a href=&#34;https://github.com/dmjio/miso&#34;&gt;https://github.com/dmjio/miso&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Servant (&lt;a href=&#34;https://www.servant.dev/&#34;&gt;https://www.servant.dev/&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;今回はScottyを使うことにしました。Yesodと違ってScottyはWeb API向け軽量フレームワークでhtmlのレンダリングにはまた別のものを用意しなければなりませんでした。レンダリングエンジンもいろいろあるみたいですが、今回はblaze-htmlを使うことにしました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;デプロイサーバー&#34;&gt;デプロイサーバー&lt;/h2&gt;&#xA;&lt;p&gt;もともと自分のWebページはgoogle appengineの無料枠で動かしてました。今回もdockerでappengineでなんとかしようとしてみました。具体的にはgoogle container registryにimageをpushしてappengineからそれをデプロイする方法です。無料枠だとデプロイはやっと成功するが、ページにアクセスするとエラーが出ました。（「サーバーが一時的に停止、30秒後にもう一回試してみろ」のエラーだけどあてにならない）&lt;/p&gt;&#xA;&lt;p&gt;次は自分が持ってるvultr vpsでdocker-composeでなんとか動かせないかと。既にサーバーに別のものが動いていて残りメモリは700MBぐらいでした。そこでdocker-compose up (stack build) したらsshが反応しなくなり、ほかのdocker containerも不正終了されました。&lt;/p&gt;&#xA;&lt;p&gt;諦めようかと思ったが、最後にherokuで試してみようと思いました。調べてみたら、heroku container registryこいつが非常に優秀てgoogle container registryより使い勝手が良かったです。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ heroku container:push web&#xA;$ heroku container:release web&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;この2つのコマンドでデプロイ、リリースが完了です！&lt;/p&gt;&#xA;&lt;h2 id=&#34;herokuのプロセススリープ&#34;&gt;herokuのプロセススリープ&lt;/h2&gt;&#xA;&lt;p&gt;herokuの無料dynoでは一定時間アクセスがないとプロセスを殺して、再びアクセス来る時にプロセスを起動するので、最初の表示に非常に時間かかります。そこはheroku schedulerを使って10分おきにcurlコマンドでサイト起こしてあげることにしました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;https化&#34;&gt;https化&lt;/h2&gt;&#xA;&lt;p&gt;herokuではカスタムドメインの設定できますが、httpsにするには有料プランのdynoを買わないと駄目ぽいです。そこはcloudflareを使うことにしました。&#xA;ネームサーバー変更して数時間待てば反映されます。しかもroot domainもサポートしていてwwwも消すことができます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;&#xA;&lt;p&gt;これで完全無料でHaskellでWebページ公開できました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dongri.org&#34;&gt;https://dongri.org&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;詳細はGitHubのRepo見ればわかるかと思います。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/iam&#34;&gt;https://github.com/dongri/iam&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>996.ICUとは？</title>
      <link>https://dongri.github.io/2019/03/996.icu%E3%81%A8%E3%81%AF/</link>
      <pubDate>Sun, 31 Mar 2019 14:40:34 +0900</pubDate>
      <guid>https://dongri.github.io/2019/03/996.icu%E3%81%A8%E3%81%AF/</guid>
      <description>&lt;p&gt;この数日GitHub上で一番人気の996.icuリポとはなんなのか？&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/996icu/996.ICU&#34;&gt;https://github.com/996icu/996.ICU&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ソースコードは全くなく、markdownのみなのに、一週間も経たないうちに12万Starであのtensorflowを抜いて5位まで登ってきてる。&#xA;このブログ書く時点で 125,347 Star&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/search?q=stars%3A%3E1&#34;&gt;https://github.com/search?q=stars%3A%3E1&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;日本語: &lt;a href=&#34;https://github.com/996icu/996.ICU/blob/master/i18n/ja_JP.md&#34;&gt;https://github.com/996icu/996.ICU/blob/master/i18n/ja_JP.md&lt;/a&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;996とは9時出社、9時退社、週6勤務から来てる。&lt;/p&gt;&#xA;&lt;p&gt;中国国内ではどう見てるのか？&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;良い活動だ。&lt;/li&gt;&#xA;&lt;li&gt;一週間後は誰も覚えてなくて、今までと変わらないだろう&lt;/li&gt;&#xA;&lt;li&gt;10年後見ると良い活動だったと思うはずだ&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;個人的には996ICU Licenseもよいと思う。&lt;/p&gt;&#xA;&lt;p&gt;996制度会社では使えない「996ICU License」。（あとで自分もRepoもこのライセンスにしようかな）&lt;/p&gt;&#xA;&lt;p&gt;GitHubでStarで一位になって国際で注目されて、中国のIT企業の勤務制度が改善されるといいですね。&lt;/p&gt;&#xA;&lt;h1 id=&#34;2019-04-01-1219-更新&#34;&gt;2019-04-01 12:19 更新&lt;/h1&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h3 id=&#34;133919-starで２位&#34;&gt;133,919 Starで２位&lt;/h3&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h1 id=&#34;2019-04-14-更新&#34;&gt;2019-04-14 更新&lt;/h1&gt;&#xA;&lt;p&gt;gen-license-rbでRubyバージョンのPR送ってみたが、理由なしにCloseされた。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/996icu/996.ICU/pull/25546&#34;&gt;https://github.com/996icu/996.ICU/pull/25546&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;有点丢人。。。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Amazon DocumentDBを試してみた</title>
      <link>https://dongri.github.io/2019/01/amazon-documentdb%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Mon, 14 Jan 2019 21:42:00 +0900</pubDate>
      <guid>https://dongri.github.io/2019/01/amazon-documentdb%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>&lt;p&gt;AmazonからMongoDBと互換性を持つDocumentDBをリリースしたと言ってるので試してみた。&#xA;クラスタを作成するためにVPCが必要だったのでVPCを一つ作成。VPCの他にアベイラビリティゾーン２つ必要なので、違うアベイラビリティゾーンを持つサブネット２つ作成。これでクラスタ作成できる。&lt;/p&gt;&#xA;&lt;p&gt;インスタンスタイプは最低でもdb.r4.largeで15.25GBのメモリ。値段は$0.277&lt;/p&gt;&#xA;&lt;p&gt;エンドポイントはPublicにできないので、sshトンネル作って接続するようにする。&lt;/p&gt;&#xA;&lt;h3 id=&#34;sshトンネル&#34;&gt;SSHトンネル&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ssh -L 27017:docdb-2019-01-14-13-34-21.cluster-crgjmmxnvvix.us-east-1.docdb.amazonaws.com:27017 -i ~/.ssh/{pem file} -p 22 ec2-user@{bastion ip}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;bastionをssh configに設定済みであれば以下のようにしてもOK&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ssh -L 27017:docdb-2019-01-14-13-34-21.cluster-crgjmmxnvvix.us-east-1.docdb.amazonaws.com:27017 {bastion}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;mongo-cliで接続してみる&#34;&gt;mongo cliで接続してみる&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ wget https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem&#xA;&#xA;$ mongo --ssl --host localhost:27017 --sslCAFile ./rds-combined-ca-bundle.pem --username {user} --password {password} --sslAllowInvalidHostnames&#xA;&#xA;MongoDB shell version v4.0.1&#xA;connecting to: mongodb://localhost:12345/&#xA;MongoDB server version: 3.6.0&#xA;rs0:PRIMARY&amp;gt; show dbs&#xA;docdb-2019-01-14-13-34-21  0.000GB&#xA;rs0:PRIMARY&amp;gt; use docdb-2019-01-14-13-34-21&#xA;switched to db docdb-2019-01-14-13-34-21&#xA;rs0:PRIMARY&amp;gt; show collections&#xA;users&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;mongriで接続してみる&#34;&gt;mongriで接続してみる&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/mongri&#34;&gt;https://github.com/dongri/mongri&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim config/mongo.json&#xA;&#xA;  &amp;#34;docdb&amp;#34;: {&#xA;    &amp;#34;uri&amp;#34;: &amp;#34;mongodb://{user}:{password}@localhost:27017/{docdb-2019-01-14-13-34-21}&amp;#34;,&#xA;    &amp;#34;opts&amp;#34;: {&#xA;      &amp;#34;poolSize&amp;#34;: 20,&#xA;      &amp;#34;useNewUrlParser&amp;#34;: true,&#xA;      &amp;#34;ssl&amp;#34;: true&#xA;    }&#xA;  },&#xA;&#xA;$ NODE_ENV=docdb node app.js&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;&#xA;&lt;p&gt;本当にmongodbと互換性があったｗ&lt;/p&gt;</description>
    </item>
    <item>
      <title>WeChatミニプログラム作ってみた</title>
      <link>https://dongri.github.io/2018/12/wechat%E3%83%9F%E3%83%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Thu, 13 Dec 2018 10:43:06 +0900</pubDate>
      <guid>https://dongri.github.io/2018/12/wechat%E3%83%9F%E3%83%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>&lt;p&gt;WeChatミニプログラムとは？&lt;/p&gt;&#xA;&lt;p&gt;WeChat上で構築できるアプリのことです。基本Javascript(TypeScript)とwxmlで書けます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developers.weixin.qq.com/miniprogram/dev/index.html&#34;&gt;https://developers.weixin.qq.com/miniprogram/dev/index.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;こちらに書いてあるようにアカウント申請して、開発ツールダウンロードすれば開発できます。&lt;/p&gt;&#xA;&lt;p&gt;勉強も含めてミニプログラム作ってみました。&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;今日は何を食おうかを登録済みのリストからランダムに表示させて選ばせるシンプルなアプリです。&lt;/p&gt;&#xA;&lt;p&gt;WeChatでスキャンして確認できます。&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;ソースコードはこちらにあります。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/what-to-eat&#34;&gt;https://github.com/dongri/what-to-eat&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;触ってみた感じ&#34;&gt;触ってみた感じ&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;wxmlはhtmlと互換性が低い&lt;/li&gt;&#xA;&lt;li&gt;wxmlに独自のタグがたくさんある&lt;/li&gt;&#xA;&lt;li&gt;外部リンク貼れない&lt;/li&gt;&#xA;&lt;li&gt;ajaxで通信するには管理画面のwhite listにドメインを登録する必要がある&lt;/li&gt;&#xA;&lt;li&gt;storage機能が付いてる&lt;/li&gt;&#xA;&lt;li&gt;クラウド用意してあるのでサーバレスで開発できる&lt;/li&gt;&#xA;&lt;li&gt;アプリのサイズが5MB超えると申請できない&lt;/li&gt;&#xA;&lt;li&gt;アプリの審査が簡単。初回だとちょっと時間かかるが、更新だと早いときは1,2時間で反映される。&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>WeChat Pay, Alipay両方対応QRコード</title>
      <link>https://dongri.github.io/2018/12/wechat-pay-alipay%E4%B8%A1%E6%96%B9%E5%AF%BE%E5%BF%9Cqr%E3%82%B3%E3%83%BC%E3%83%89/</link>
      <pubDate>Sat, 08 Dec 2018 10:55:01 +0900</pubDate>
      <guid>https://dongri.github.io/2018/12/wechat-pay-alipay%E4%B8%A1%E6%96%B9%E5%AF%BE%E5%BF%9Cqr%E3%82%B3%E3%83%BC%E3%83%89/</guid>
      <description>&lt;p&gt;先週会社のオフサイトで中国上海に行って来ました。&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;QRコード決済先進国、中国・上海にて、どのようにQRコード決済が人々の生活の一部になっているのかを実際に「見る」、「体験する」ことが醍醐味です。&amp;rdquo; らしいです。&lt;/p&gt;&#xA;&lt;p&gt;QRコードで決済する以外にもofo,mobike QRコードで鍵を解除できたら、QRコードで自販機のジュース買えたりなどなど。&lt;/p&gt;&#xA;&lt;p&gt;そこでみんなが気になってたのが、店頭に置いてある一枚のQRコードでWeChat Pay, Alipayどっちも決済できることでした。どのアプリからスキャンしても正しく認識して決済画面に遷移させるQRコードのことです。その辺の仕組み調べたので共有しようと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アプリの判別&#34;&gt;アプリの判別&lt;/h2&gt;&#xA;&lt;p&gt;WeChatからスキャンされたか、AlipayからスキャンされたかはUser Agentで判別します。&#xA;下の図がAlipayとWeChatからスキャンされたときのUser Agentです。&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if (navigator.userAgent.match(/Alipay/i)) {&#xA;  // Alipay&#xA;} else if (navigator.userAgent.match(/MicroMessenger\//i)) {&#xA;  // WeChat pay&#xA;} else {&#xA;  // その他&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Javascriptの例ですが、これをnginxのレベルで判別してもいいし、アプリケーションサーバー側で判別してもいいかと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;alipay&#34;&gt;Alipay&lt;/h2&gt;&#xA;&lt;p&gt;AlipayのQRコードはURL形式になっていて、アプリ判別したら用意したURLにリダイレクトすれば決済（送金）画面に遷移します。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;例: https://qr.alipay.com/fkx07120vzhsliuln927l74&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;wechat-pay&#34;&gt;WeChat Pay&lt;/h2&gt;&#xA;&lt;p&gt;WeChat PayはカスタマURLスキーム形式になっていて、Alipayのようにリダイレクトさせてもアプリが認識してくれませんでした。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;例: wxp://f2f067yve_yNrmWOKjAmyEeuYcStPZXhjpud&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;スマートな方法ではないですが、WeChat Payのオリジナル「お金を受け取るQRコード」を表示させて、ユーザーがそれを長押しして「画像内のQRコードをスキャンする」でアプリに認識させる方法があります。&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;実装&#34;&gt;実装&lt;/h2&gt;&#xA;&lt;p&gt;簡単な例ですが、こんな感じになります。ここの &lt;code&gt;weixin.png&lt;/code&gt; を自分のオリジナルQRコードの画像に置き換えてください。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;div id=&amp;#34;weixin&amp;#34; style=&amp;#34;display: none;&amp;#34;&amp;gt;&#xA;  &amp;lt;img src=&amp;#34;./weixin.png&amp;#34; style=&amp;#34;width: 300px;&amp;#34;&amp;gt;&#xA;  &amp;lt;br&amp;gt;&#xA;  &amp;lt;h4&amp;gt;QRコードを長押しして認識させる&amp;lt;/h4&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;  if (navigator.userAgent.match(/Alipay/i)) {&#xA;    window.location.href = &amp;#34;https://qr.alipay.com/fkx07120vzhsliuln927l74&amp;#34;;&#xA;  } else if (navigator.userAgent.match(/MicroMessenger\//i)) {&#xA;    document.getElementById(&amp;#34;weixin&amp;#34;).style.display = &amp;#39;block&amp;#39;;&#xA;  } else {&#xA;    alert(&amp;#34;Only Support WeChat Pay and Alipay&amp;#34;);&#xA;  }&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&#xA;このQRコードをWeChatとAlipayどれからスキャンしても相手に送金する画面に遷移します。（間違って送金しないように）&lt;/p&gt;</description>
    </item>
    <item>
      <title>中国旅行おすすめアプリ</title>
      <link>https://dongri.github.io/2018/11/%E4%B8%AD%E5%9B%BD%E6%97%85%E8%A1%8C%E3%81%8A%E3%81%99%E3%81%99%E3%82%81%E3%82%A2%E3%83%97%E3%83%AA/</link>
      <pubDate>Tue, 13 Nov 2018 17:50:13 +0900</pubDate>
      <guid>https://dongri.github.io/2018/11/%E4%B8%AD%E5%9B%BD%E6%97%85%E8%A1%8C%E3%81%8A%E3%81%99%E3%81%99%E3%82%81%E3%82%A2%E3%83%97%E3%83%AA/</guid>
      <description>&lt;p&gt;中国旅行時あると便利なアプリをちょっとまとめてみました。&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;高德地图---gaode&#34;&gt;高德地图 - Gaode&lt;/h2&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/jp/app/id461703208?mt=8&#34;&gt;App Store&lt;/a&gt; / &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.autonavi.minimap&amp;amp;hl=ja&#34;&gt;Play Store&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.autonavi.com&#34;&gt;https://www.autonavi.com&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Google Mapが使えないので、これを使います。Baidu Mapもありますが、個人的にこっちのほうが好きです。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;日本語非対応&lt;/li&gt;&#xA;&lt;li&gt;ユーザー登録必要なし&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;微信---wechat&#34;&gt;微信 - WeChat&lt;/h2&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/jp/app/id414478124?mt=8&#34;&gt;App Store&lt;/a&gt; / &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.tencent.mm&#34;&gt;Play Store&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.wechat.com&#34;&gt;https://www.wechat.com&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;よく中国版LINEと言われてますが、チャットだけではなく飲食店やタクシーでの支払いもできます。仕組みは個人間送金。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;日本語対応&lt;/li&gt;&#xA;&lt;li&gt;チャージは中国の銀行口座が必要&lt;/li&gt;&#xA;&lt;li&gt;クレジットカード登録して他人から送金してもらえば決済も可能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;支付宝---alipay&#34;&gt;支付宝 - Alipay&lt;/h2&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/jp/app/id333206289?mt=8&#34;&gt;App Store&lt;/a&gt; / &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.eg.android.AlipayGphone&#34;&gt;Play Store&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.alipay.com&#34;&gt;https://www.alipay.com&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;日本語非対応&lt;/li&gt;&#xA;&lt;li&gt;英語対応&lt;/li&gt;&#xA;&lt;li&gt;Zhīfùbǎoと発音&lt;/li&gt;&#xA;&lt;li&gt;日本国内ではOrigami Payが使えるところで使用可能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;滴滴出行---didi&#34;&gt;滴滴出行 - DiDi&lt;/h2&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/jp/app/id1362398401?mt=8&#34;&gt;App Store&lt;/a&gt; / &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.didiglobal.passenger&#34;&gt;Play Store&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goodbye Doper</title>
      <link>https://dongri.github.io/2018/11/goodbye-doper/</link>
      <pubDate>Sun, 11 Nov 2018 23:32:06 +0900</pubDate>
      <guid>https://dongri.github.io/2018/11/goodbye-doper/</guid>
      <description>&lt;p&gt;二年間メンテナンスしてたdoper.ioというサービスを終了することになりました。&#xA;作ったきっかけは社内デモ用のアプリで外部サービスとの連携が必要だったので作りました。（サービスまで言うほどではないですが）&lt;/p&gt;&#xA;&lt;h3 id=&#34;リリースノート&#34;&gt;リリースノート&lt;/h3&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;ドメインが25日に切れるのと、ユーザーデータのダウンロードを待たないといけないので、 &lt;a href=&#34;https://doper.io&#34;&gt;https://doper.io&lt;/a&gt; にアクセスできるのは25日までです。&lt;/p&gt;&#xA;&lt;p&gt;ありがとうございました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chromeアドレスバー非表示</title>
      <link>https://dongri.github.io/2018/10/chrome%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%83%90%E3%83%BC%E9%9D%9E%E8%A1%A8%E7%A4%BA/</link>
      <pubDate>Sun, 14 Oct 2018 23:55:10 +0900</pubDate>
      <guid>https://dongri.github.io/2018/10/chrome%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%83%90%E3%83%BC%E9%9D%9E%E8%A1%A8%E7%A4%BA/</guid>
      <description>&lt;p&gt;ある案件でChromeのアドレスバーを隠す必要があって調べてみたが、以下どれも効かなかった。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Javascriptでwindow.open時toolbar,locationなどをnoにする方法&lt;/li&gt;&#xA;&lt;li&gt;Chromeのショートカットキー作成して、開く方法&lt;/li&gt;&#xA;&lt;li&gt;フルスクリーンモード&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;2018年10月14日時点で、Windows, Macで確実に隠せる方法。&lt;/p&gt;&#xA;&lt;h3 id=&#34;mac&#34;&gt;Mac&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd /Applications/Google\ Chrome.app/Contents/MacOS&#xA;$ sudo ./Google\ Chrome --app=&amp;#34;https://google.com&amp;#34; --incognito&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; cd &amp;#34;C:\Program Files (x86)\Google\Chrome\Application&amp;#34;&#xA;&amp;gt; chrome.exe --app=&amp;#34;https://google.com&amp;#34; --incognito&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>我想要(I Want Remix)</title>
      <link>https://dongri.github.io/2018/10/%E6%88%91%E6%83%B3%E8%A6%81i-want-remix/</link>
      <pubDate>Mon, 01 Oct 2018 12:39:07 +0900</pubDate>
      <guid>https://dongri.github.io/2018/10/%E6%88%91%E6%83%B3%E8%A6%81i-want-remix/</guid>
      <description>&lt;p&gt;Silicon Valley Season 5 Episode 4 Song&lt;/p&gt;&#xA;&lt;h3 id=&#34;我想要i-want-remix-艾福杰尼boom黄旭&#34;&gt;我想要(I Want Remix) 艾福杰尼／BooM黄旭&lt;/h3&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h3 id=&#34;歌词&#34;&gt;歌词&lt;/h3&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    <item>
      <title>二週間で2つのプロジェクトリリースしてみた</title>
      <link>https://dongri.github.io/2018/06/%E4%BA%8C%E9%80%B1%E9%96%93%E3%81%A72%E3%81%A4%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Sat, 16 Jun 2018 14:39:28 +0900</pubDate>
      <guid>https://dongri.github.io/2018/06/%E4%BA%8C%E9%80%B1%E9%96%93%E3%81%A72%E3%81%A4%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>&lt;p&gt;仕事のコードは飽きだし、やる気出して新しいことやろうとすると政治かなにかでうまく行かないし、まあこの辺の話は別の機会でゆっくり話すことにして、今日は2週間プライベートサイドプロジェクトでやったことを書こうと思います。&lt;/p&gt;&#xA;&lt;p&gt;今月1日仙台言ってRubyKaigi参加して来ました。印象に残ってるのは牡蠣でしたね。本当にうまかったんです。普段勉強会、カンファレンスまったく行かない自分にはRubyKaigiが結構新鮮な感じでした。世界中からRubyを愛してる人達が集まって三日間Rubyについて語るのがすごいと思いました。三日間もあるし、Rubyも結構久しぶりだし、これを機会にRubyでなんか作ってみようと思いました。いろいろ悩んだ結果投げ銭サービスを作ることにしました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://merci.nilth.com&#34;&gt;https://merci.nilth.com&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Ruby, Sinatra, Postgres, Bulma, Stripe, Docker を使って構築されてます。Twitterログインでアカウント作って、Twitter Usernameでユーザー検索して少額のお金を投げる非常にシンプルなサービスです。&lt;/p&gt;&#xA;&lt;p&gt;バックグラウンドイメージをアクセス毎に変わるようにしたのですが、使ってるpcisum.photosが若干遅くて、Tokyo Regionで少しでも早く表示できるようにして作ったのがvia photosでした。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://via.photos&#34;&gt;https://via.photos&lt;/a&gt; (shutdown)&lt;/p&gt;&#xA;&lt;p&gt;Nodejs, Coffeescript, Dockerを使って構築されてます。&#xA;写真はunsplash.comのものを使って、作ったChrome Extensionで新しいタブを開く度に画像をサーバーにダウンロードして溜まっていきます。そのデータを使ってリクエスト来ると指定されたサイズで返すようにしてます。Webページデザインする時とか、アプリ作る時とかダミーのイメージでテストできるので便利かと思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>BIP39をGo言語で実装してみました</title>
      <link>https://dongri.github.io/2018/05/bip39%E3%82%92go%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%BF%E3%81%BE%E3%81%97%E3%81%9F/</link>
      <pubDate>Sun, 27 May 2018 20:36:00 +0900</pubDate>
      <guid>https://dongri.github.io/2018/05/bip39%E3%82%92go%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%BF%E3%81%BE%E3%81%97%E3%81%9F/</guid>
      <description>&lt;p&gt;アカウント復元周りで仮想通貨で使ってるパスフレーズ使えば簡単に解決できるんじゃと思ってBIP39を実装してみました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/go-mnemonic&#34;&gt;https://github.com/dongri/go-mnemonic&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;既にGoの実装はいくつかあるけど、サポートしてる言語が足りなかったり、ちゃんと動かなかったり、、ライブラリとしては使えなかったりしたので、Go言語で書いてみました。&lt;/p&gt;&#xA;&lt;p&gt;機種変などでアカウントにログインできない問題は、サポート側、ユーザー側どっちも結構面倒な問題です。そこでアカウント復元してくれるパスフレーズを見てみようと思いました。&lt;/p&gt;&#xA;&lt;p&gt;BIPとはBitcoin Improvement Proposalsの略で「ビットコインの改善提案」のことです。インターネットのRFC（Request For Comments）と同じようなものです。https://github.com/bitcoin/bips/ こちらを見ると一覧が載ってます。今回は39番の「Mnemonic code for generating deterministic keys」を使います。&lt;/p&gt;&#xA;&lt;p&gt;BIP39はメモしにくい16進数のハッシュから英単語、日本語単語にして伝えやすくメモしやすくしたものです。ハッシュそのものをメモすると途中で間違いやすいですが、パスフレーズにすると比較的に簡単です。通常は12から24個の単語になります。単語は今のところ英語以外日本語、中国語など8種類サポートしてます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki&#34;&gt;https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki&lt;/a&gt; こちらに詳細な仕様が書いてあります。&lt;/p&gt;&#xA;&lt;p&gt;以下のような感じです。&lt;/p&gt;&#xA;&lt;h3 id=&#34;words&#34;&gt;Words&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;English: abandon add duck until hurry armed pledge area fan tired cheap employ&#xA;French: abaisser accroche descente tousser gardien amiral notifier ambre enchère stipuler caillou donateur&#xA;Japanese: あいこくしん　あてな　けちらす　もどる　すすむ　いちぶ　とかい　いちおう　このみ　まわる　おんせん　けんしゅう&#xA;ChineseSimplified: 的 到 师 帐 践 当 颜 两 尽 叹 切 食&#xA;Korean: 가격 간판 미용실 학년 손질 경쟁 이별 경비 보험 통계 냇물 발바닥&#xA;Spanish: ábaco acto dieta treinta humo ameno osadía amargo exigir taza caja ecuador&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これらどれを入力しても下のseedになります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>健全な組織だと感じる時</title>
      <link>https://dongri.github.io/2018/04/%E5%81%A5%E5%85%A8%E3%81%AA%E7%B5%84%E7%B9%94%E3%81%A0%E3%81%A8%E6%84%9F%E3%81%98%E3%82%8B%E6%99%82/</link>
      <pubDate>Sun, 22 Apr 2018 13:01:18 +0900</pubDate>
      <guid>https://dongri.github.io/2018/04/%E5%81%A5%E5%85%A8%E3%81%AA%E7%B5%84%E7%B9%94%E3%81%A0%E3%81%A8%E6%84%9F%E3%81%98%E3%82%8B%E6%99%82/</guid>
      <description>&lt;p&gt;Facebookでめっちゃ良い文字列見かけたので日本語にしたい気持ちになりました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/dgtgrade/posts/1776370592421799&#34;&gt;https://www.facebook.com/dgtgrade/posts/1776370592421799&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;組織が健全だと感じる時: （順序なし）&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1. 知らない人が正直に知らないと言う時&#xA;2. よく知ってる人が前に出て話す時&#xA;3. 難しことを自分がやると手上げる人がいる時&#xA;4. 頑張ってる人、よくやった人に拍手をあげる時&#xA;5. 困難にぶつかった人が手伝ってほしいと言う時&#xA;6. 問題を起こした人が隠さず、共有する時&#xA;7. 他人の仕事について会話できる時&#xA;8. リーダーが人の誤りをみんなと共有できる時&#xA;9. 失敗の理由について出して反省できる時&#xA;10. メンバー達が同僚、組織、社会を同じく考える時&#xA;11. みんなの長所でみんなの短所をかぶせる時&#xA;&#xA;a. 大したことないのにみんなで笑える時&#xA;b. メンバー達だけ理解できる言葉がある時&#xA;c. メンバーがお互いの短所までわかる時&#xA;d. 冗談がお互いすぐ理解できる時&#xA;e. お互いに他人の好き嫌いを把握できる時&#xA;f. 短い言葉でも意味が明確に伝わる時&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>短縮URLサービスを作ってみた</title>
      <link>https://dongri.github.io/2018/04/%E7%9F%AD%E7%B8%AEurl%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Sat, 14 Apr 2018 03:13:44 +0800</pubDate>
      <guid>https://dongri.github.io/2018/04/%E7%9F%AD%E7%B8%AEurl%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>&lt;p&gt;goo.glサービス終了のニュースで「短縮URLサービス作ってみた」の記事見かけで、ちょうど自分も一ヶ月ほど前に作ったものがあってその解説をしようと思います。&#xA;作ってみたきっかけはサイドプロジェクトでSMS送信する必要があったのですが、140文字の制限で長いURLは送れませんでした。それでGo言語用の &lt;a href=&#34;https://github.com/dongri/go-shortener&#34;&gt;go-shortener&lt;/a&gt; というライブラリ？まで作りました。&lt;/p&gt;&#xA;&lt;p&gt;その後５日間の休みを取って海外旅行したので、飛行機の中と旅行先で自前の短縮URLサービスを作ってみたくなって作りました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://shortener.nilth.com&#34;&gt;https://shortener.nilth.com&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;del&gt;clacky.org ドメインは旅行先のシンガポールClarke Quayから来てます。（ドメインは短くないですが）&lt;/del&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;一定長さの文字列にする&#34;&gt;一定長さの文字列にする&lt;/h3&gt;&#xA;&lt;p&gt;ハッシュ関数を使ってすべての文字列を一定長さにする方法もありますが、&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;MD5    - 32文字&#xA;sha1   - 40文字&#xA;sha256 - 64文字&#xA;sha512 - 128文字&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;どれも短くありません。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ランダム文字列にしてデータベースに保存&#34;&gt;ランダム文字列にしてデータベースに保存&lt;/h3&gt;&#xA;&lt;p&gt;一定長さのランダム文字列を生成してデータベースに保存して、マッピング表を作ります。同じランダム文字列のキーがあったらもう一回ランダム文字列を生成して同じキーがないところまで処理を繰り返します。これは短い文字列生成の目的は達成できますが、データの量が多くなると一つの処理で数千、数万、データの数分データベースにクエリを発行することになります。データベースに対しての負荷が大きすぎるので、現実的ではありませんでした。&lt;/p&gt;&#xA;&lt;h3 id=&#34;データベースのidを62進数に変換する&#34;&gt;データベースのIDを62進数に変換する&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;小文字、大文字アルファベット + 数字 = 62文字&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;URLをデータベースに保存して発行される連番IDを62進数に変換して短縮URLのキーにします。100億件のデータも62進数に変換すると6桁（aUKYOA）だけなので十分短いです。&lt;/p&gt;&#xA;&lt;h3 id=&#34;pythonコード&#34;&gt;pythonコード&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chars = &amp;#34;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJELMNOPQRSTUVWXYZ&amp;#34;&#xA;&#xA;def encode62(num, chars=chars):&#xA;    base = len(chars)&#xA;    string = &amp;#34;&amp;#34;&#xA;    while True:&#xA;        string = chars[num % base] + string&#xA;        num = num // base&#xA;        if num == 0:&#xA;            break&#xA;    return string&#xA;&#xA;def decode62(string, chars=chars):&#xA;    base = len(chars)&#xA;    num = 0&#xA;    for char in string:&#xA;        num = num * base + chars.index(char)&#xA;    return num&#xA;&#xA;e = encode62(99999999999)&#xA;print(e)  # 1L9zO9N&#xA;&#xA;d = decode62(&amp;#39;1L9zO9N&amp;#39;)&#xA;print(d)  # 99999999999&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ちょっと工夫&#34;&gt;ちょっと工夫&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数字アルファベット順にするとランダム性ないので、charsをシャッフルしてから設定&lt;/li&gt;&#xA;&lt;li&gt;238327件でやっとZZZなのでencode62(id+238327)して3桁、4桁にしてそれぽく見せる&lt;/li&gt;&#xA;&lt;li&gt;連番だと62進数も連番で増えていくのでランダムを求めるためにIDをreverseする&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;これで&lt;/p&gt;</description>
    </item>
    <item>
      <title>非認証Android端末をGoogle認証通す方法</title>
      <link>https://dongri.github.io/2018/04/%E9%9D%9E%E8%AA%8D%E8%A8%BCandroid%E7%AB%AF%E6%9C%AB%E3%82%92google%E8%AA%8D%E8%A8%BC%E9%80%9A%E3%81%99%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 13 Apr 2018 03:13:44 +0800</pubDate>
      <guid>https://dongri.github.io/2018/04/%E9%9D%9E%E8%AA%8D%E8%A8%BCandroid%E7%AB%AF%E6%9C%AB%E3%82%92google%E8%AA%8D%E8%A8%BC%E9%80%9A%E3%81%99%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;突然Kyashが使えなくなった。&lt;/p&gt;&#xA;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;この端末はRoot取ってないのでおそらくGoogleの認定を受けてない端末だからでしょう。Play Storeアプリ開いて設定見ると端末の認証のところが認証されてませんと出る。&lt;/p&gt;&#xA;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.android.com/certified/partners/&#34;&gt;https://www.android.com/certified/partners/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;自分の端末はsmartisanという中国の端末で上のパートナー一覧には載ってなかった。&lt;/p&gt;&#xA;&lt;p&gt;確かにこの前この辺のニュースも出て、将来はGoogleのアプリ（Gmail, Chromeなど）も認証されてない端末では動かないようにする予定。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.google.com/android/uncertified/&#34;&gt;https://www.google.com/android/uncertified/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;上のリンク先にカスタムROMをインストールした端末はAndroid IDを入れるといいらしいが、自分の端末はちょっと違う。試しにAndroid IDを入れてみたら通った。Kyashも正しく起動してくれた。&lt;/p&gt;&#xA;&lt;p&gt;Android IDはどう取得するのか？上のページでは adb コマンドで取得すると書いてあるが、そもそもRoot取ってないのでこの方法だとだめで、違う方法でAndroid IDを取得しないといけない。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;String androidId = Settings.Secure.getString(getContext().getContentResolver(), Settings.Secure.ANDROID_ID);&#xA;System.out.println(androidId);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Android開発環境でこのようなコードで取得できるが、エンジニアじゃないと無理だろう。せっかくなのでAndroid IDだけを表示するアプリを作ってPlay Storeに公開した。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.dongri.androidid&#34;&gt;https://play.google.com/store/apps/details?id=org.dongri.androidid&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;追記&#34;&gt;追記&lt;/h3&gt;&#xA;&lt;p&gt;あとでPlay StoreでAndroid IDで検索してみたらアプリが大量に出てきたｗ&lt;/p&gt;</description>
    </item>
    <item>
      <title>Let&#39;s Encryptでワイルドカード証明書発行してみた</title>
      <link>https://dongri.github.io/2018/03/lets-encrypt%E3%81%A7%E3%83%AF%E3%82%A4%E3%83%AB%E3%83%89%E3%82%AB%E3%83%BC%E3%83%89%E8%A8%BC%E6%98%8E%E6%9B%B8%E7%99%BA%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Fri, 23 Mar 2018 23:37:02 +0900</pubDate>
      <guid>https://dongri.github.io/2018/03/lets-encrypt%E3%81%A7%E3%83%AF%E3%82%A4%E3%83%AB%E3%83%89%E3%82%AB%E3%83%BC%E3%83%89%E8%A8%BC%E6%98%8E%E6%9B%B8%E7%99%BA%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s Encryptがワイルドカード証明書サポートしたので設定してみた。&lt;/p&gt;&#xA;&lt;h2 id=&#34;certbot&#34;&gt;certbot&lt;/h2&gt;&#xA;&lt;p&gt;certbotの最新版をgithubから持ってくる&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone https://github.com/certbot/certbot.git&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ワイルドカード証明書の取得&#34;&gt;ワイルドカード証明書の取得&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ./certbot-auto certonly --manual \&#xA;-d *.nilth.com -d nilth.com \&#xA;-m dongrium@gmail.com \&#xA;--agree-tos \&#xA;--manual-public-ip-logging-ok \&#xA;--preferred-challenges dns-01 \&#xA;--server https://acme-v02.api.letsencrypt.org/directory&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;-d *.nilth.com -d nilth.com: ワイルドカード証明書とサブドメイン無しの証明書も含めて取得&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;-m &lt;a href=&#34;mailto:sample@example.com&#34;&gt;sample@example.com&lt;/a&gt;: 指定したメールアドレスとに証明書更新の通知を受け取る&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&amp;ndash;agree-tos: 利用規約に同意&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&amp;ndash;manual-public-ip-logging-ok: サーバーの IPアドレスがログに記録され公開されることを許可します。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&amp;ndash;preferred-challenges dns-01: DNS-01チャレンジタイプで検証するように指定&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&amp;ndash;server &lt;a href=&#34;https://acme-v02.api.letsencrypt.org/directory&#34;&gt;https://acme-v02.api.letsencrypt.org/directory&lt;/a&gt;: ACMEv2 のエンドポイント&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Requesting to rerun ./certbot-auto with root privileges...&#xA;[sudo] password for dongri:&#xA;Creating virtual environment...&#xA;Installing Python packages...&#xA;Installation succeeded.&#xA;Saving debug log to /var/log/letsencrypt/letsencrypt.log&#xA;Plugins selected: Authenticator manual, Installer None&#xA;&#xA;-------------------------------------------------------------------------------&#xA;Would you be willing to share your email address with the Electronic Frontier&#xA;Foundation, a founding partner of the Let&amp;#39;s Encrypt project and the non-profit&#xA;organization that develops Certbot? We&amp;#39;d like to send you email about EFF and&#xA;our work to encrypt the web, protect its users and defend digital rights.&#xA;-------------------------------------------------------------------------------&#xA;(Y)es/(N)o: Y ← 入力&#xA;Obtaining a new certificate&#xA;Performing the following challenges:&#xA;dns-01 challenge for nilth.com&#xA;&#xA;-------------------------------------------------------------------------------&#xA;Please deploy a DNS TXT record under the name&#xA;_acme-challenge.nilth.com with the following value:&#xA;&#xA;T32vZj4xmZ12QR_kMblVS31p2Czjb7HT-UQyelDPcYE&#xA;&#xA;Before continuing, verify the record is deployed.&#xA;-------------------------------------------------------------------------------&#xA;Press Enter to Continue&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;DNS TXT設定のためこの状態で一旦待つ。ドメインプロバイダでtxtレコードを設定する。&#xA;Value-Domainの例をあげると以下のように設定&lt;/p&gt;</description>
    </item>
    <item>
      <title>どんぐりコインを作ってみた</title>
      <link>https://dongri.github.io/2018/03/%E3%81%A9%E3%82%93%E3%81%90%E3%82%8A%E3%82%B3%E3%82%A4%E3%83%B3%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Tue, 06 Mar 2018 06:39:14 +0900</pubDate>
      <guid>https://dongri.github.io/2018/03/%E3%81%A9%E3%82%93%E3%81%90%E3%82%8A%E3%82%B3%E3%82%A4%E3%83%B3%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>&lt;p&gt;ICOで必要な新しい通貨の開発で、自分の中でずっともやもやしてたいくつかの疑問がちょっとはっきりしたので、&#xA;メモしながらみんなと共有できればと思います。&lt;/p&gt;&#xA;&lt;p&gt;ICOしてる企業は自分独自のブロックチェーンを作ってその上に新しい仮想通貨を発行してる、ずっとそう思って来たが、&#xA;それがちょっと違ったみたいでした。そういう企業もあれば、既存のプラットフォーム（Ethereum）でコインを発行するのが普通だったみたいです。&lt;/p&gt;&#xA;&lt;p&gt;以下、実際新しいトークンをEthereum上に作ってみた記事になります。&lt;/p&gt;&#xA;&lt;p&gt;GitHub: &lt;a href=&#34;https://github.com/dongri/DongriCoin&#34;&gt;https://github.com/dongri/DongriCoin&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;まず、今回の記事で使う用語、ソフトウェア、ツールをまとめます。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ethereum-イーサリアム&#34;&gt;Ethereum (イーサリアム)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;スマートコントラクトを実行するためのプラットフォーム。&lt;/li&gt;&#xA;&lt;li&gt;Ethereum Virtual Machine (EVM)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ethereum.org/&#34;&gt;https://www.ethereum.org/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;token-トークン&#34;&gt;Token (トークン)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;独自コインのこと&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;erc20トークン&#34;&gt;ERC20トークン&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ERC20 は、Ethereum ブロックチェーン上でトークンを発行する際の標準規格。&lt;/li&gt;&#xA;&lt;li&gt;ERC20 に準拠したトークンであれば、無数に存在する種類のトークンを同じ枠組みで価値移転することができます。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;truffle-トリュフ&#34;&gt;Truffle (トリュフ)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ethereum開発用フレームワーク。&lt;/li&gt;&#xA;&lt;li&gt;トークン作成、コンパイル、デプロイなど&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://truffleframework.com/&#34;&gt;http://truffleframework.com/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;solidity-ソリディティ&#34;&gt;Solidity (ソリディティ)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;スマートコントラクトを記述するための言語。&lt;/li&gt;&#xA;&lt;li&gt;デファクトスタンダードになりつつある。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ethereum.github.io/browser-solidity/&#34;&gt;https://ethereum.github.io/browser-solidity/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;infuraio&#34;&gt;infura.io&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ethereumホスティングサービス&lt;/li&gt;&#xA;&lt;li&gt;geth(go-ethereum)でノードの同期などしなくて済む&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://infura.io/&#34;&gt;https://infura.io/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;metamaskio&#34;&gt;metamask.io&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;イーサリアムウォレット&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://metamask.io/&#34;&gt;https://metamask.io/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;必要なソフトウェアはnodejsのみです。その後はnpmで必要なモジュールをインストールします。&lt;/p&gt;&#xA;&lt;h2 id=&#34;nodejsインストール&#34;&gt;nodejsインストール&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash&#xA;$ nvm ls-remote&#xA;$ nvm instal 8.9.4&#xA;$ nvm alias default 8.9.4&#xA;$ node -v&#xA;v8.9.4&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;truffleインストール&#34;&gt;truffleインストール&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ npm instal -g truffle&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;プロジェクト作成&#34;&gt;プロジェクト作成&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mkdir DongriCoin&#xA;$ cd DongriCoin&#xA;&#xA;$ truffle init&#xA;$ ls -l&#xA;&#xA;$ npm -f init&#xA;$ npm install zeppelin-solidity --save&#xA;$ npm install truffle-hdwallet-provider --save&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;contract作成&#34;&gt;contract作成&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim contracts/DongriCoin.sol&#xA;&#xA;pragma solidity ^0.4.18;&#xA;import &amp;#39;zeppelin-solidity/contracts/token/ERC20/MintableToken.sol&amp;#39;;&#xA;&#xA;contract DongriCoin is StandardToken {&#xA;  string public name = &amp;#34;DongriCoin&amp;#34;;&#xA;  string public symbol = &amp;#34;DON&amp;#34;;&#xA;  uint public decimals = 18;&#xA;&#xA;  function DongriCoin(uint initialSupply) public {&#xA;    totalSupply_ = initialSupply;&#xA;    balances[msg.sender] = initialSupply;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;migrate作成&#34;&gt;migrate作成&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim migrations/2_deploy_dongri_token.js&#xA;&#xA;const DongriCoin = artifacts.require(&amp;#39;./DongriCoin.sol&amp;#39;)&#xA;&#xA;module.exports = (deployer) =&amp;gt; {&#xA;  let initialSupply = 1000000e18 // 100万(初期発行量)&#xA;  deployer.deploy(DongriCoin, initialSupply)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;develop環境にデプロイ送金確認&#34;&gt;develop環境にデプロイ、送金確認&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ truffle compile&#xA;$ truffle develop&#xA;&#xA;truffle(develop)&amp;gt; migrate&#xA;&#xA;truffle(develop)&amp;gt; token = DongriCoin.at(DongriCoin.address)&#xA;&#xA;truffle(develop)&amp;gt; token.name()&#xA;&amp;#39;DongriCoin&amp;#39;&#xA;truffle(develop)&amp;gt; token.symbol()&#xA;&amp;#39;DON&amp;#39;&#xA;truffle(develop)&amp;gt; token.totalSupply()&#xA;BigNumber { s: 1, e: 24, c: [ 10000000000 ] }&#xA;&#xA;truffle(develop)&amp;gt; token.balanceOf(web3.eth.coinbase)&#xA;BigNumber { s: 1, e: 24, c: [ 10000000000 ] }&#xA;truffle(develop)&amp;gt; token.balanceOf(web3.eth.accounts[0])&#xA;BigNumber { s: 1, e: 24, c: [ 10000000000 ] }&#xA;truffle(develop)&amp;gt; token.balanceOf(web3.eth.accounts[1])&#xA;BigNumber { s: 1, e: 0, c: [ 0 ] }&#xA;truffle(develop)&amp;gt; token.transfer(web3.eth.accounts[1], 20000e18)&#xA;&#xA;truffle(develop)&amp;gt; token.balanceOf(web3.eth.accounts[1])&#xA;BigNumber { s: 1, e: 22, c: [ 200000000 ] }&#xA;truffle(develop)&amp;gt; token.balanceOf(web3.eth.accounts[0])&#xA;BigNumber { s: 1, e: 23, c: [ 9800000000 ] }&#xA;&#xA;truffle(develop)&amp;gt; token.totalSupply()&#xA;BigNumber { s: 1, e: 24, c: [ 10000000000 ] }&#xA;truffle(develop)&amp;gt;&#xA;&#xA;$ truffle compile&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;live環境にデプロイ&#34;&gt;live環境にデプロイ&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim truffle.js&#xA;const Web3 = require(&amp;#34;web3&amp;#34;);&#xA;const web3 = new Web3();&#xA;const HDWalletProvider = require(&amp;#34;truffle-hdwallet-provider&amp;#34;);&#xA;&#xA;// process.env.MNEMONIC: metamask.io 登録時の12 wordsを記載。&#xA;// process.env.INFURA_ACCESS_TOKEN: infura.io 登録で取得したaccess tokenを記載。&#xA;// process.env.FROM_ADDRESS: metamask.io でのアカウントアドレス。&#xA;&#xA;var mnemonic = process.env.MNEMONIC;&#xA;var accessToken = process.env.INFURA_ACCESS_TOKEN;&#xA;var fromAddress = process.env.FROM_ADDRESS&#xA;&#xA;module.exports = {&#xA;  networks: {&#xA;    live: {&#xA;      provider: function() {&#xA;        return new HDWalletProvider(&#xA;          mnemonic,&#xA;          &amp;#34;https://mainnet.infura.io/&amp;#34; + accessToken&#xA;        );&#xA;      },&#xA;      network_id: &amp;#34;1&amp;#34;,&#xA;      from: fromAddress,&#xA;      gas: 3000000,&#xA;      gasPrice: web3.toWei(&amp;#34;10&amp;#34;, &amp;#34;gwei&amp;#34;)&#xA;    }&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下のコマンド実行する前に、fromに書いてるアドレスに0.1ETHぐらい入れたほうがいいです。gasが足りないと失敗します。&#xA;2018/03/04 時点で2800円ぐらいでできました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Alexa Skill 審査通ってリリースできた</title>
      <link>https://dongri.github.io/2018/01/alexa-skill-%E5%AF%A9%E6%9F%BB%E9%80%9A%E3%81%A3%E3%81%A6%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%A7%E3%81%8D%E3%81%9F/</link>
      <pubDate>Wed, 31 Jan 2018 23:12:53 +0900</pubDate>
      <guid>https://dongri.github.io/2018/01/alexa-skill-%E5%AF%A9%E6%9F%BB%E9%80%9A%E3%81%A3%E3%81%A6%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%A7%E3%81%8D%E3%81%9F/</guid>
      <description>&lt;p&gt;先日の &lt;a href=&#34;https://dongri.github.io/2018/01/rebuild%E3%81%AEalexa-skill%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%83%AA%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%95%E3%82%8C%E3%81%9F%E8%A9%B1/&#34;&gt;「RebuildのAlexa Skillを作ってリジェクトされた話」&lt;/a&gt; は諦めましたが、「カフェの音」というスキルは頑張ってリリース出来ました。今回も三回リジェクトされ四回目でやっとな感じで、審査について書いてみます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一回目&#34;&gt;一回目&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Amazon Alexaスキルカタログに申請されたスキルに関して、第三者の商標またはブランドが使用されていたため、認定を却下いたしました。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;アイコンにコーヒーカップに「カフェ・ベローチェ」文字があったのでダメでした。アイコンを変えて再申請&lt;/p&gt;&#xA;&lt;h2 id=&#34;二回目&#34;&gt;二回目&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;スキルの詳細カードに表示される説明には、ユーザーがスキルの使用方法について正確な情報が含まれていません。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;一時停止と停止を分けて記述してくださいとのことだったのでその通りに修正して再申請&lt;/p&gt;&#xA;&lt;h2 id=&#34;三回目&#34;&gt;三回目&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Alexa Skills Kitの今後のバージョンでは、既存のプロパティとの後方互換性を維持しながら、JSONリクエストおよび応答のフォーマットに新しいプロパティが追加される場合があります。追加されたパラメーターを指定してスキルを呼び出した際、受け入れられると想定される場合にスキルがリクエストを拒否します。そのため、このタイプの変更に柔軟に対応できるコードを作成する必要があります。&#xA;たとえば、JSONリクエストをデシリアライズするコードは、新しい、不明なプロパティを検出しても停止しないようにすることが必要です。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;これは意味不明で良くわからない。メールに書いてある「問い合わせ」リンク先も500エラーで落ちてるので、知るか！と思いそのまま再申請&lt;/p&gt;&#xA;&lt;h2 id=&#34;四回目&#34;&gt;四回目&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;この度は カフェの音で集中力アップ スキルを申請いただき、誠にありがとうございます。&#xA;おめでとうございます。スキルは認定プロセスに合格し、まもなくスキルストアに公開されます。&#xA;スキルストアに公開されると、サービスへのトラフィックが増えることが見込まれます。十分なキャパシティがあることをご確認ください。　また、ユーザーが想定外のオペレーションを行なった場合にもサービスが機能し続けることを確認してください。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;通ったが、三回目は何だったんですかね？&lt;/p&gt;&#xA;&lt;p&gt;ログを仕込んでアクセスが来るとBotで通知来るようにしたので、審査が始まると通知が来てました。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;朝10時頃から始まるらしい&lt;/li&gt;&#xA;&lt;li&gt;複数人がやるみたいで、10時、13時、15時で3,4回集中してアクセスが来る&lt;/li&gt;&#xA;&lt;li&gt;意外と細かくテストしてる模様&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>RebuildのAlexa Skillを作ってリジェクトされた話</title>
      <link>https://dongri.github.io/2018/01/rebuild%E3%81%AEalexa-skill%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%83%AA%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%95%E3%82%8C%E3%81%9F%E8%A9%B1/</link>
      <pubDate>Tue, 23 Jan 2018 23:13:19 +0900</pubDate>
      <guid>https://dongri.github.io/2018/01/rebuild%E3%81%AEalexa-skill%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%83%AA%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%95%E3%82%8C%E3%81%9F%E8%A9%B1/</guid>
      <description>&lt;p&gt;Echo Dotが届いたのでAlexa Skillを作ってみることにしました。オフィスに届いた当日はSlackで使ってたhubot deployをAlexaからデプロイできるようにと遊んでみたがちゃんとしたものを作ろうと思って週末に &lt;a href=&#34;http://rebuild.fm&#34;&gt;http://rebuild.fm&lt;/a&gt; をAmazon Echoで聞けるようにしてみました。&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;以下実装上で困った話をしようと思います&lt;/p&gt;&#xA;&lt;h2 id=&#34;xml2jsonをrequireすると反応しない&#34;&gt;xml2jsonをrequireすると反応しない&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://feeds.rebuild.fm/rebuildfm&#34;&gt;http://feeds.rebuild.fm/rebuildfm&lt;/a&gt; RSSなのでxmlをパースする必要があり、nodejsでxmlパーサを探してみた結果これでした。&#xA;しかしrequireした時点でAlexa（Lambda）が反応しなくなりました。深く検証してませんが、おそらくnodejs 6.10にサポートしてないのが原因かと思われます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;xml2jsファイルパースで無反応&#34;&gt;xml2jsファイルパースで無反応&lt;/h2&gt;&#xA;&lt;p&gt;xml2jsonがサポートしてないので、xml2jsで試してみました、こいつは正しく動いてるように見えますが、でかいファイルのパースにはダメでした。http://feeds.rebuild.fm/rebuildfm 実はこいつのxmlが意外とでかくて数千行もありましたね。。。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自前のサーバーでやろう&#34;&gt;自前のサーバーでやろう&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://feeds.rebuild.fm/rebuildfm&#34;&gt;http://feeds.rebuild.fm/rebuildfm&lt;/a&gt; このfeedを定期的に取ってきて必要な情報だけjsonに変換してS3に突っ込んでそこから情報を取るようにしました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;mp3が再生できない問題&#34;&gt;mp3が再生できない問題&lt;/h2&gt;&#xA;&lt;p&gt;Rebuildのfeedに書いてあるデフォルトのmp3ファイルだとURLがhttpのため &lt;code&gt;this.response.audioPlayerPlay&lt;/code&gt; では再生できませんでした。&#xA;これもなんとかしようとして自前のS3にアップロードしてhttps対応しました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自動化&#34;&gt;自動化&lt;/h2&gt;&#xA;&lt;p&gt;一時間おきにrebuildのfeedから最新のxmlからjsonに変換して、追加されたmp3ファイルをS3にアップロードするようにしました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;リジェクト&#34;&gt;リジェクト&lt;/h2&gt;&#xA;&lt;p&gt;気軽く申請してみようと思い申請したものの、案の定リレクトされました。理由は&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;使用されている第三者の知的財産: 「Rebuild.fm」&#xA;第三者の知的財産が使用されていたメタデータ: スキル名、スキルアイコン、呼び出し名、スキル詳細ページ &#xA;&#xA;Amazonにとってカスタマーへの透明性は非常に重要なものです。これらの問題への対策としては、以下の2つが考えられます。 &#xA;&#xA;A. ブランド所有者が「Rebuild.fm」の知的財産の使用を許可することを明記した署名入りの書面、またはライセンス契約等を提出する。 • 商標、知的財産、ブランドを正当に利用するスキルがある場合、そのスキルの認証を申請する際に、これらの使用許諾を所有することを示し、明示的に証明する。開発者ポータルの「Publishing Information」ページでテスト手順フォームを使用して、必要に応じて外部リンクと連絡先情報を含めてこの情報を入力し、スキルに必要な使用許諾があることを認定チームが判断できるようにする。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;まあ、そうでしょうね。&lt;/p&gt;&#xA;&lt;h2 id=&#34;やってみてわかったこと&#34;&gt;やってみてわかったこと&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Podcast系は所有者の承認を得ること&lt;/li&gt;&#xA;&lt;li&gt;ステップごとにヘルプ、ストップ、終了して、を認識させること&lt;/li&gt;&#xA;&lt;li&gt;Audio Playerの場合、一時停止、再開を認識させること&lt;/li&gt;&#xA;&lt;li&gt;意外とちゃんとテストしてること&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;参考にコードをgithubに上げときます&#34;&gt;参考にコードをgithubに上げときます&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/alexa-rebuild/&#34;&gt;https://github.com/dongri/alexa-rebuild/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;index.jsがalexa skillで、main.goが rebuildのfeedからxmlをjsonに変換し、mp3をS3にアップロードしてるスクリプトです。&lt;/p&gt;&#xA;&lt;p&gt;以上でした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Progressive Web Apps</title>
      <link>https://dongri.github.io/2018/01/progressive-web-apps/</link>
      <pubDate>Wed, 10 Jan 2018 12:12:06 +0900</pubDate>
      <guid>https://dongri.github.io/2018/01/progressive-web-apps/</guid>
      <description>&lt;p&gt;PWA(Progressive Web Apps)とは、WebページをネイティブアプリのようなUXを提供するためのものです。&lt;/p&gt;&#xA;&lt;p&gt;なんでこれを思い出したかと言うと &lt;a href=&#34;https://doper.io&#34;&gt;https://doper.io&lt;/a&gt; というWebサイトを開発していて、iOSクライアントは去年なんとか作りましたが、Androidはなかなか手が出せなくて、今年に入ってなんとかしようと思いPWAがいいんじゃないかと思いました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;条件&#34;&gt;条件&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Webサイトがhttps対応してること&lt;/li&gt;&#xA;&lt;li&gt;Android Chromeが必要&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;対応&#34;&gt;対応&lt;/h2&gt;&#xA;&lt;h3 id=&#34;manifestjson&#34;&gt;manifest.json&lt;/h3&gt;&#xA;&lt;p&gt;manifest.jsonファイル作成します。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{&#xA;    lang: &amp;#34;ja&amp;#34;,&#xA;    name: &amp;#34;Doper Lite&amp;#34;,&#xA;    short_name: &amp;#34;Doper Lite&amp;#34;,&#xA;    start_url: &amp;#34;/&amp;#34;,&#xA;    display: &amp;#34;standalone&amp;#34;,&#xA;    theme_color: &amp;#34;#24292e&amp;#34;,&#xA;    icons: [&#xA;        {&#xA;            src: &amp;#34;/img/launcher-icon48.png&amp;#34;,&#xA;            sizes: &amp;#34;48x48&amp;#34;,&#xA;            type: &amp;#34;image/png&amp;#34;&#xA;        },&#xA;        {&#xA;            src: &amp;#34;/img/launcher-icon-72.png&amp;#34;,&#xA;            sizes: &amp;#34;72x72&amp;#34;,&#xA;            type: &amp;#34;image/png&amp;#34;&#xA;        },&#xA;        {&#xA;            src: &amp;#34;/img/launcher-icon-96.png&amp;#34;,&#xA;            sizes: &amp;#34;96x96&amp;#34;,&#xA;            type: &amp;#34;image/png&amp;#34;&#xA;        },&#xA;        {&#xA;            src: &amp;#34;/img/launcher-icon-144.png&amp;#34;,&#xA;            sizes: &amp;#34;144x144&amp;#34;,&#xA;            type: &amp;#34;image/png&amp;#34;&#xA;        },&#xA;        {&#xA;            src: &amp;#34;/img/launcher-icon-192.png&amp;#34;,&#xA;            sizes: &amp;#34;192x192&amp;#34;,&#xA;            type: &amp;#34;image/png&amp;#34;&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://www.w3.org/TR/appmanifest/&#34;&gt;https://www.w3.org/TR/appmanifest/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>勤怠打刻について考えてみた</title>
      <link>https://dongri.github.io/2017/12/%E5%8B%A4%E6%80%A0%E6%89%93%E5%88%BB%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%80%83%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Wed, 20 Dec 2017 15:39:07 +0900</pubDate>
      <guid>https://dongri.github.io/2017/12/%E5%8B%A4%E6%80%A0%E6%89%93%E5%88%BB%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%80%83%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>&lt;p&gt;打刻システム投入でちょっと考えてみた。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;朝打刻忘れた&lt;/li&gt;&#xA;&lt;li&gt;朝早起きして作業してたら出社するの忘れた&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;こんなの一々上長に打刻修正申請してもいいのだが、上長も忙しいし自分でなんとか解決しようと考えてみた。&lt;/p&gt;&#xA;&lt;h1 id=&#34;hubotで打刻通知&#34;&gt;hubotで打刻通知&lt;/h1&gt;&#xA;&lt;p&gt;定時10分前に @channel でみんな打刻しろの通知を送る。&lt;/p&gt;&#xA;&lt;p&gt;dakoku.coffee&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cronJob = require(&amp;#39;cron&amp;#39;).CronJob&#xA;&#xA;module.exports = (robot) -&amp;gt;&#xA;  cronjob = new cronJob(&amp;#39;50 0 * * 1,2,3,4,5&amp;#39;, () =&amp;gt;&#xA;    channel = room: &amp;#34;random&amp;#34;&#xA;    message = &amp;#34;&amp;lt;!channel&amp;gt; 打刻した？&amp;#34;&#xA;    robot.send channel, message&#xA;  )&#xA;  cronjob.start()&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;オフィスにいなくても位置情報をオフィスにして打刻する&#34;&gt;オフィスにいなくても位置情報をオフィスにして打刻する&lt;/h1&gt;&#xA;&lt;p&gt;Chromeからだとchange locationを使えば良さそう。デベロッパーツールで一々変更してもいいのだが、on, offでやりたいので&#xA;&lt;a href=&#34;https://chrome.google.com/webstore/detail/change-geolocation/njjpmclekpigefnogajiknnheheacoaj?hl=ja&#34;&gt;Change GeoLocation&lt;/a&gt; というextensionを使う。ラベルにオフィスを入れてlatitudeとlongitudeを調べて保存すればOK。後は普通に打刻すればOKなはず。&lt;/p&gt;&#xA;&lt;p&gt;Androidアプリからだと&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.lexa.fakegps&#34;&gt;Fake GPS location&lt;/a&gt; みたいなアプリ大量にあるのでどれか使えば良さそう。&lt;/p&gt;&#xA;&lt;h1 id=&#34;どうせならcronで出来ない&#34;&gt;どうせならcronで出来ない？&lt;/h1&gt;&#xA;&lt;p&gt;まずシステムのAPIはおそらくないと思って調べてない、絶対ないだろう。&lt;/p&gt;&#xA;&lt;p&gt;後は自前でなんとかしてシステムを騙すか。&lt;/p&gt;&#xA;&lt;p&gt;打刻のリクエスト見ると&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl &amp;#39;https://hoge.force.com/apexremote&amp;#39; --data-binary &amp;#39;{&amp;#34;action&amp;#34;:&amp;#34;hogeCtl&amp;#34;,&amp;#34;method&amp;#34;:&amp;#34;inputTime&amp;#34;,&amp;#34;data&amp;#34;:[&amp;#34;{\&amp;#34;flag\&amp;#34;:1,\&amp;#34;face\&amp;#34;:0,\&amp;#34;comment\&amp;#34;:\&amp;#34;\&amp;#34;,\&amp;#34;device\&amp;#34;:\&amp;#34;TS1\&amp;#34;,\&amp;#34;latitude\&amp;#34;:35.660464,\&amp;#34;longitude\&amp;#34;:139.729249}&amp;#34;],&amp;#34;type&amp;#34;:&amp;#34;rpc&amp;#34;,&amp;#34;tid&amp;#34;:7,&amp;#34;ctx&amp;#34;:{&amp;#34;csrf&amp;#34;:&amp;#34;hoge&amp;#34;}}&amp;#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;headerとか書いてないが大体こんな感じ。あとはlatitudeとlongitudeをオフィスにしてcurlすればいけるはず。問題はcsrfだな。こいつはブラウザ開かないとわからないやつなので、難しい。もしくはcurlでwebページ取ってきて中のcsrfを取得してcurlするとか？&lt;/p&gt;&#xA;&lt;h1 id=&#34;以上&#34;&gt;以上&lt;/h1&gt;&#xA;&lt;p&gt;どれもまだ試してないですが、今後進展あったら共有します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>iOS, Android アプリダウンロード数を取得</title>
      <link>https://dongri.github.io/2017/12/ios-android-%E3%82%A2%E3%83%97%E3%83%AA%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E6%95%B0%E3%82%92%E5%8F%96%E5%BE%97/</link>
      <pubDate>Tue, 19 Dec 2017 15:38:35 +0900</pubDate>
      <guid>https://dongri.github.io/2017/12/ios-android-%E3%82%A2%E3%83%97%E3%83%AA%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E6%95%B0%E3%82%92%E5%8F%96%E5%BE%97/</guid>
      <description>&lt;p&gt;App Annie、Search Manなどサービスを使えばAPI経由でアプリのダウンロード数を取得する方法いろいろあるようだが、iTunesconnectとPlay Storeから直接取得してみた。&lt;/p&gt;&#xA;&lt;h1 id=&#34;ios-reporter&#34;&gt;iOS Reporter&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://help.apple.com/itc/appsreporterguide/#/itc0f2481229&#34;&gt;https://help.apple.com/itc/appsreporterguide/#/itc0f2481229&lt;/a&gt; ここからReporter.zipをダウンロード。&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-access-tokenをitunesconnectページで発行する&#34;&gt;1. access tokenをitunesconnectページで発行する。&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://reportingitc2.apple.com/reports.html&#34;&gt;https://reportingitc2.apple.com/reports.html&lt;/a&gt; ページの左にに「レポートについて？」があるので？マークをクリックして「アクセストークン生成」リンクがクリックして生成する。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-reporterpropertiesを編集&#34;&gt;2. Reporter.propertiesを編集&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;AccessToken=********-****-****-****-************&#xA;&#xA;Mode=Normal&#xA;&#xA;SalesUrl=https://reportingitc-reporter.apple.com/reportservice/sales/v1&#xA;FinanceUrl=https://reportingitc-reporter.apple.com/reportservice/finance/v1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-javaでレポート取得&#34;&gt;3. javaでレポート取得&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ java -jar Reporter.jar p=Reporter.properties Sales.getVendors&#xA;********&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上で取得したVendor Numberを設定&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;DATE=&amp;#34;20171216&amp;#34;&#xA;VENDOR_NUMBER=&amp;#34;********&amp;#34;&#xA;$ java -jar Reporter.jar p=Reporter.properties Sales.getReport ${VENDOR_NUMBER}, Sales, Summary, Daily, ${DATE}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4-レポート形式&#34;&gt;4. レポート形式&lt;/h3&gt;&#xA;&lt;p&gt;ドキュメントのリンク切れたりして正確なドキュメント見つかってないが、tvsファイルの&#xA;Product Type Identifierが1のものが新規ダウンロードらしい。&#xA;あとはファイルをshellか、何かで読んでunitsを出せば日付別に新規ダウンロード数取得できる。&lt;/p&gt;&#xA;&lt;h1 id=&#34;android&#34;&gt;Android&lt;/h1&gt;&#xA;&lt;h3 id=&#34;1-google-cloud-sdkダウンロード初期化&#34;&gt;1. Google Cloud SDKダウンロード、初期化&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/sdk/docs/&#34;&gt;https://cloud.google.com/sdk/docs/&lt;/a&gt; からgoogle cloud sdkをダウンロード。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd google-cloud-sdk&#xA;$ ./bin/gcloud init&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;途中でブラウザが起動されて認証を終わらせる&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-バケットid取得&#34;&gt;2. バケットID取得&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/apps/publish/&#34;&gt;https://play.google.com/apps/publish/&lt;/a&gt; Play Store Consoleの統計情報ページでアプリを選択して、ページの下に表示されてる「レポートの直接 URI:」の &lt;code&gt;pubsite_prod_rev_***&lt;/code&gt; をメモする。これが&lt;code&gt;developer_bucket_id&lt;/code&gt; になる&lt;/p&gt;</description>
    </item>
    <item>
      <title>SwiftでgRPC対応する</title>
      <link>https://dongri.github.io/2017/12/swift%E3%81%A7grpc%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B/</link>
      <pubDate>Thu, 14 Dec 2017 23:36:27 +0900</pubDate>
      <guid>https://dongri.github.io/2017/12/swift%E3%81%A7grpc%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B/</guid>
      <description>&lt;p&gt;サーバー側gRPC対応終わったので、クライアントもgRPC対応してみました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;サーバー側api&#34;&gt;サーバー側API&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://lgtm.lol/api&#34;&gt;https://lgtm.lol/api&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;protoファイル準備&#34;&gt;protoファイル準備&lt;/h2&gt;&#xA;&lt;p&gt;protosディレクトリを作成して、↑のドキュメントから &lt;code&gt;api.proto&lt;/code&gt; を作成します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;specファイル作成&#34;&gt;specファイル作成&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;api.podspec&lt;/code&gt; ファイルを作成&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Pod::Spec.new do |s|&#xA;  s.name     = &amp;#34;api&amp;#34;&#xA;  s.version  = &amp;#34;0.0.1&amp;#34;&#xA;  s.license  = &amp;#34;MIT&amp;#34;&#xA;  s.authors  = { &amp;#39;Dongri Jin&amp;#39; =&amp;gt; &amp;#39;dongrium@gmail.com&amp;#39; }&#xA;  s.homepage = &amp;#34;https://github.com/dongri&amp;#34;&#xA;  s.summary = &amp;#34;gRPC API&amp;#34;&#xA;  s.source = { :git =&amp;gt; &amp;#39;https://github.com/dongri/grpc.git&amp;#39; }&#xA;&#xA;  s.ios.deployment_target = &amp;#34;10.1&amp;#34;&#xA;&#xA;  src = &amp;#34;./protos&amp;#34;&#xA;&#xA;  # gRPC Plugin&#xA;  s.dependency &amp;#34;!ProtoCompiler-gRPCPlugin&amp;#34;, &amp;#34;~&amp;gt; 1.0&amp;#34;&#xA;&#xA;  pods_root = &amp;#39;Pods&amp;#39;&#xA;&#xA;  protoc_dir = &amp;#34;#{pods_root}/!ProtoCompiler&amp;#34;&#xA;  protoc = &amp;#34;#{protoc_dir}/protoc&amp;#34;&#xA;  plugin = &amp;#34;#{pods_root}/!ProtoCompiler-gRPCPlugin/grpc_objective_c_plugin&amp;#34;&#xA;&#xA;  dir = &amp;#34;#{pods_root}/#{s.name}&amp;#34;&#xA;&#xA;  # source files&#xA;  s.prepare_command = &amp;lt;&amp;lt;-CMD&#xA;    mkdir -p #{dir}&#xA;    #{protoc} \&#xA;        --plugin=protoc-gen-grpc=#{plugin} \&#xA;        --objc_out=#{dir} \&#xA;        --grpc_out=#{dir} \&#xA;        -I #{src} \&#xA;        -I #{protoc_dir} \&#xA;        #{src}/api.proto&#xA;  CMD&#xA;&#xA;  # subspec&#xA;  s.subspec &amp;#34;Messages&amp;#34; do |ms|&#xA;    ms.source_files = &amp;#34;#{dir}/*.pbobjc.{h,m}&amp;#34;, &amp;#34;#{dir}/**/*.pbobjc.{h,m}&amp;#34;&#xA;    ms.header_mappings_dir = dir&#xA;    ms.requires_arc = false&#xA;    ms.dependency &amp;#34;Protobuf&amp;#34;&#xA;  end&#xA;&#xA;  # subspec&#xA;  s.subspec &amp;#34;Services&amp;#34; do |ss|&#xA;    ss.source_files = &amp;#34;#{dir}/*.pbrpc.{h,m}&amp;#34;, &amp;#34;#{dir}/**/*.pbrpc.{h,m}&amp;#34;&#xA;    ss.header_mappings_dir = dir&#xA;    ss.requires_arc = true&#xA;    ss.dependency &amp;#34;gRPC-ProtoRPC&amp;#34;&#xA;    ss.dependency &amp;#34;#{s.name}/Messages&amp;#34;&#xA;  end&#xA;&#xA;  s.pod_target_xcconfig = {&#xA;    &amp;#39;GCC_PREPROCESSOR_DEFINITIONS&amp;#39; =&amp;gt; &amp;#39;$(inherited) GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS=1&amp;#39;,&#xA;    &amp;#39;CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES&amp;#39; =&amp;gt; &amp;#39;YES&amp;#39;,&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.&#xA;├── LGTM&#xA;├── Podfile&#xA;├── Podfile.lock&#xA;├── api.podspec&#xA;└── protos&#xA;    └── api.proto&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;install&#34;&gt;install&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ pod init&#xA;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これで &lt;code&gt;Pods -&amp;gt; Development Pods -&amp;gt; api&lt;/code&gt; ができるので &lt;code&gt;Bridging-Header.h&lt;/code&gt; ファイルを作成してimpoorします。&lt;/p&gt;</description>
    </item>
    <item>
      <title>RubyでgRPC対応する</title>
      <link>https://dongri.github.io/2017/12/ruby%E3%81%A7grpc%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B/</link>
      <pubDate>Thu, 14 Dec 2017 19:13:30 +0900</pubDate>
      <guid>https://dongri.github.io/2017/12/ruby%E3%81%A7grpc%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B/</guid>
      <description>&lt;p&gt;既存のRailsのRest APIをgRPC対応しました。&lt;/p&gt;&#xA;&lt;h1 id=&#34;gem-install&#34;&gt;gem install&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gem install grpc&#xA;$ gem install grpc-tools&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;protoファイル作成&#34;&gt;protoファイル作成&lt;/h1&gt;&#xA;&lt;p&gt;api.proto&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;syntax = &amp;#34;proto3&amp;#34;;&#xA;&#xA;package api;&#xA;&#xA;service LGTM {&#xA;  rpc Items (ItemsRequest) returns (ItemsResponse) {}&#xA;  rpc Upload (UploadRequest) returns (UploadResponse) {}&#xA;  rpc Item (ItemRequest) returns (ItemResponse) {}&#xA;}&#xA;&#xA;message Item {&#xA;    int64 id = 1;&#xA;    string url = 2;&#xA;}&#xA;&#xA;message ItemsRequest {&#xA;  int64 page = 1;&#xA;}&#xA;&#xA;message ItemsResponse {&#xA;  repeated Item items = 1;&#xA;}&#xA;&#xA;message ItemRequest {&#xA;  int64 id = 1;&#xA;}&#xA;&#xA;message ItemResponse {&#xA;  Item item = 1;&#xA;}&#xA;&#xA;message UploadRequest {&#xA;  string image = 1;&#xA;}&#xA;&#xA;message UploadResponse {&#xA;  string result = 1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;ファイル生成&#34;&gt;ファイル生成&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ grpc_tools_ruby_protoc -I . --ruby_out=lib --grpc_out=lib ./api.proto&#xA;&#xA;$ tree lib&#xA;lib&#xA;├── api_pb.rb&#xA;├── api_services_pb.rb&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;server側&#34;&gt;Server側&lt;/h1&gt;&#xA;&lt;p&gt;grpc_api_server.rb&lt;/p&gt;</description>
    </item>
    <item>
      <title>Playを作って社内に設置してみた</title>
      <link>https://dongri.github.io/2017/12/play%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E7%A4%BE%E5%86%85%E3%81%AB%E8%A8%AD%E7%BD%AE%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Sat, 09 Dec 2017 14:05:33 +0900</pubDate>
      <guid>https://dongri.github.io/2017/12/play%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E7%A4%BE%E5%86%85%E3%81%AB%E8%A8%AD%E7%BD%AE%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>&lt;p&gt;今日はPlayというものを作って社内に設置して、はじめは良かったが、最後は失敗した話をしてみようと思います。&lt;/p&gt;&#xA;&lt;p&gt;みんなコード書く時にヘッドホンして音楽聴きながら仕事ますよね。人によって使ってるもの違うと思いますが、Apple Music, Google Music, Spotify, Youtube, SoundCloudなどなどあると思います。そこでみんなどんなジャンルの音楽を聞いてるのか気になりますよね？もしくは一緒に聞きたい時ありますよね？Youtube API使って曲再生、サーバーサイドPushで曲の同期取って、Redisで再生リスト保存するとなんかできそうな気がして作ってみました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/play&#34;&gt;https://github.com/dongri/play&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;社内ネットワークに設置してみんなに共有して、専用Slackチャンネル作って今流れてる曲を流しました。一時期は社内カフェのスクリーンにも流しましたが不適切なコンテンツがある場合があると指摘されてやめました。。。&lt;/p&gt;&#xA;&lt;p&gt;みんなが普段聞いてる曲（おそらく）をシェアしてくれて楽しくSlackでチャットしながら聞きました。社内ネットワークだったので社内からしかアクセスできなく、朝来て誰かが再生するとSlackチャンネルに流れて来るので一日の仕事が始まったを感じる時もありました。ソースコードもGitHubに公開してるので、メンバー全員が必要な機能作ってPR送ったりもしました。&lt;/p&gt;&#xA;&lt;p&gt;最初のバージョンはすごくシンプルで曲を追加、再生のみでした。スキップする機能つけたら反対派も出てきましたね。後はリスト保存する機能、リストからキュー入れる機能などなど追加しましたが、使い方よくわからない声も出始めました。Slackチャンネルも一日中静かになってユーザーを完全に失われました。&lt;/p&gt;&#xA;&lt;p&gt;今思えばシンプルが一番だなと深く反省します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OSSがお金になった話</title>
      <link>https://dongri.github.io/2017/12/oss%E3%81%8C%E3%81%8A%E9%87%91%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E8%A9%B1/</link>
      <pubDate>Mon, 04 Dec 2017 10:22:17 +0900</pubDate>
      <guid>https://dongri.github.io/2017/12/oss%E3%81%8C%E3%81%8A%E9%87%91%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E8%A9%B1/</guid>
      <description>&lt;p&gt;書いたオープンソースソフトウェアがお金になった話をしようと思います。&lt;/p&gt;&#xA;&lt;p&gt;OSS書いてGitHubに公開して有名になって、ある企業からスカウトされオファーが来て転職して年収アップ！そういう話ではなく、マジで自分の銀行口座にお金が振り込まれて来た話です。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dongri.github.io/2014/06/oauthswift/&#34;&gt;https://dongri.github.io/2014/06/oauthswift/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;こちらのブログにも書いたように、2014年Swiftが出て「みんなでSwift勉強しようぜ」と社内ハッカソンやってたらOAuthがそう簡単にできないことがわかり、OAuth関連のライブラリを書いてみようと思い始めたプロジェクトがOAuthSwiftでした。初めは自分が必要だったFlickr OAuth, Twitter OAuthだけだったが、どうせならOAuth, OAuth2両方対応しようと思いGitHubなどOAuth2もサポートするようにしました。一時期Swiftのトレンドトップになった時もあって、スターが付き始めましたね。一気に&lt;/p&gt;&#xA;&lt;p&gt;初めの頃は微妙に動きの違う各サービスのOAuthを対応（UberのOAuthで苦労した記憶が、、、）しながら真面目にメンテナンスしてたがそれがいつの間にかやる気なくなって、半放置されてたらフランスの方から「お前やる気ないんだったら俺にリポジトリのマージ権限くれ！」とメール来て、1500以上スター付いてるプロジェクトだし、これは自分個人のプロジェクトよりみんなのプロジェクトにしようと思い &lt;a href=&#34;https://github.com/oauthswift&#34;&gt;https://github.com/oauthswift&lt;/a&gt; を取ってそちらに移行してフランスの方にマージ権限を渡しました。&lt;/p&gt;&#xA;&lt;p&gt;先月に入ってフランスの方からメール来て、ある企業(Auth0)がスポンサーになりたいと言って、README.mdにその企業のロゴとリンクを入れてくれると毎月スポンサー費としてドルが入って来ると言って君は同意か反対かと聞かれました。その企業見てたらOAuth関連の企業でREADME.mdに一行追加することでエンジニアに迷惑かかることもないと思い同意しました。その後はちょっと面倒なinvoiceや国際振込などなど&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OAuthSwift/OAuthSwift/commit/bc25abe8d719e9c1eccc9446568e167259f1585d#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5&#34;&gt;https://github.com/OAuthSwift/OAuthSwift/commit/bc25abe8d719e9c1eccc9446568e167259f1585d#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;額は書きませんが、いい肉食えるぐらいです。OSSでこんないいことあるとは夢にも思ってませんでした。&lt;/p&gt;&#xA;&lt;p&gt;OSSで金儲けなど考えたこともないので、このお金をどこかに寄付しようと妻と話した結果ユニセフに寄付することにしました。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;OSS最高&lt;/li&gt;&#xA;&lt;li&gt;GitHub最高&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>みんなのYoutubeを一つのスクリーンに - Play</title>
      <link>https://dongri.github.io/2017/10/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AEyoutube%E3%82%92%E4%B8%80%E3%81%A4%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%81%AB-play/</link>
      <pubDate>Sun, 15 Oct 2017 21:21:30 +0900</pubDate>
      <guid>https://dongri.github.io/2017/10/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AEyoutube%E3%82%92%E4%B8%80%E3%81%A4%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%81%AB-play/</guid>
      <description>&lt;p&gt;数年前にGitHubの&lt;a href=&#34;https://github.com/play/play&#34;&gt;Play&lt;/a&gt;を試そうとしてましたが、挫折しました。その時は確かにRubyのバージョンで怒られた覚えがあります。&lt;/p&gt;&#xA;&lt;p&gt;GitHub社内ではPlayを使ってるらしく、Playはmac miniをサーバーにしてiTunesの曲をベースにしてるらしいです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/play&#34;&gt;https://github.com/dongri/play&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;今回作ってみたのはYoutubeのURLを貼り付けることでキューに溜めて、アクセスした全員に同じ曲が流れて来ることになります。再生が終わるとキューから消えて次の曲が流れて来ます。ビデオは再生、停止などできないので流れる曲だけ聞くことになります。もちろん次へ飛ぶこともできないし、前に戻すこともできません。うるさかったらブラウザを閉じるかMuteにチェックを入れることができます。&lt;/p&gt;&#xA;&lt;p&gt;これを明日RasPiに入れて、チームに共有してみます。RasPiの使い方間違ってると突っ込まれるかもしらないが、今のところ使い道これしかありませんｗ&lt;/p&gt;</description>
    </item>
    <item>
      <title>atomからvscodeに浮気</title>
      <link>https://dongri.github.io/2017/10/atom%E3%81%8B%E3%82%89vscode%E3%81%AB%E6%B5%AE%E6%B0%97/</link>
      <pubDate>Tue, 03 Oct 2017 21:22:21 +0900</pubDate>
      <guid>https://dongri.github.io/2017/10/atom%E3%81%8B%E3%82%89vscode%E3%81%AB%E6%B5%AE%E6%B0%97/</guid>
      <description>&lt;p&gt;atomの時はgithub中の人からInvitation Codeもらって人より早く使えてpackageも作ったり楽しかった。&lt;/p&gt;&#xA;&lt;p&gt;しかし最近はGoのビルドや、プロジェクトを開くスピードなどいろいろ遅くてなんとかしたいところだった。&#xA;が、長く使ってたのでなかなか他のエディターにするのは難しかった。でもなんとかしたいと思って今日からvscodeを使ってみることにした。&#xA;今までvscodeを使ってない理由としてはMSが好きではなかったからだ。ｗ&#xA;使ってみると、確かに人々言うようにatomより軽い、早い。そこでちょっと不便だったものを便利にしたメモを書いておこう。&lt;/p&gt;&#xA;&lt;h2 id=&#34;code-での不具合&#34;&gt;「code .」での不具合&lt;/h2&gt;&#xA;&lt;p&gt;shellでcodeコマンドをインストールしてterminalからcodeコマンドで起動するとcmd+vが効かない問題。いろいろ試してみたがどうも公式shellの問題のようだ。以前公式がサポートされる前の方法だと正しく動いてくれるようになった。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim ~/.zshrc&#xA;&#xA;e () { VSCODE_CWD=&amp;#34;$PWD&amp;#34; open -n -b &amp;#34;com.microsoft.VSCode&amp;#34; --args $* }&#xA;$ source ~/.zshrc&#xA;$ e .&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ファイルのgit-status色&#34;&gt;ファイルのgit status色&lt;/h2&gt;&#xA;&lt;p&gt;atomの時はgitで管理してるプロジェクトで新規追加されたファイルは緑色、編集されたファイルは黄色と見やすかったのが、vscodeでは探してみたけどそれらしきextensionが見当たらなかった。同僚がググってくれたのがこれを試してみたらできた。&#xA;&lt;a href=&#34;https://github.com/karabaja4/vscode-explorer-git-status&#34;&gt;https://github.com/karabaja4/vscode-explorer-git-status&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone git@github.com:karabaja4/vscode-explorer-git-status.git&#xA;$ cd vscode-explorer-git-status&#xA;$ npm install&#xA;$ gulp install&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;書かれた通り&lt;/p&gt;&#xA;&lt;h2 id=&#34;使ってみた感想&#34;&gt;使ってみた感想&lt;/h2&gt;&#xA;&lt;p&gt;atomのpackageよりvscodeのextensionの概念が優れてる気がした。特にatomのgo-plusとvscodeのGoを比べてみると。&lt;/p&gt;&#xA;&lt;p&gt;楽しいvscode生活を送ろう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Qiita:Teamのクローンを作ってみた話</title>
      <link>https://dongri.github.io/2017/09/qiitateam%E3%81%AE%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%B3%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E8%A9%B1/</link>
      <pubDate>Thu, 28 Sep 2017 06:50:55 +0900</pubDate>
      <guid>https://dongri.github.io/2017/09/qiitateam%E3%81%AE%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%B3%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E8%A9%B1/</guid>
      <description>&lt;p&gt;タイトルのクローンを作ったは嘘ｗ。似たようなものを作ったが本当。&lt;/p&gt;&#xA;&lt;p&gt;チームがちょっと大きくなったのと外国籍のエンジニアがQiita嫌いという理由でQiita:Teamやめて&#xA;他のツールをいろいろ試してみたがどれも長く続かず、文句言うばかりでした。&#xA;結果エンジニアがノウハウなどナレッジを残す場所がなくなったわけですね。&lt;/p&gt;&#xA;&lt;p&gt;結局何がダメだったのか？文化の違い？デザインがダメ？私もわかりません。&lt;/p&gt;&#xA;&lt;p&gt;ちょっと考えてみたんですが、Qiitaのデザインがだめ、機能がだめだったら俺らが作ればいいんじゃと&#xA;思って作ってみたのがteamでした。https://github.com/rusts/team&lt;/p&gt;&#xA;&lt;p&gt;業務で使ってるGo言語で作ったらずっと早く簡単に作れたと思うが、社内でRust好きなエンジニアが結構多いなと感じ、&#xA;もしRustで作ったらみんなが興味持って機能追加したりメンテして俺達が本当に欲しかったものを作れるんじゃないかと思ってRustにしました。&lt;/p&gt;&#xA;&lt;p&gt;で、今どうなったか？&lt;/p&gt;&#xA;&lt;p&gt;数人は日報書くのを再開して、数人はTips、技術ノウハウなど共有することになりました。&#xA;プロジェクトにコミットする人も現れて、今は自分を含めて二人です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoでAmazon SES送信テスト</title>
      <link>https://dongri.github.io/2017/09/go%E3%81%A7amazon-ses%E9%80%81%E4%BF%A1%E3%83%86%E3%82%B9%E3%83%88/</link>
      <pubDate>Sat, 09 Sep 2017 06:50:55 +0900</pubDate>
      <guid>https://dongri.github.io/2017/09/go%E3%81%A7amazon-ses%E9%80%81%E4%BF%A1%E3%83%86%E3%82%B9%E3%83%88/</guid>
      <description>&lt;p&gt;毎回ハマったりするのでメモ。GolangでAmazon SES送信テスト。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;  &amp;#34;errors&amp;#34;&#xA;  &amp;#34;log&amp;#34;&#xA;&#xA;  &amp;#34;github.com/aws/aws-sdk-go/aws&amp;#34;&#xA;  &amp;#34;github.com/aws/aws-sdk-go/aws/credentials&amp;#34;&#xA;  &amp;#34;github.com/aws/aws-sdk-go/aws/session&amp;#34;&#xA;  &amp;#34;github.com/aws/aws-sdk-go/service/ses&amp;#34;&#xA;)&#xA;&#xA;func main() {&#xA;  from := &amp;#34;noreply@domain.com&amp;#34;&#xA;  to := &amp;#34;dongrium@gmail.com&amp;#34;&#xA;  title := &amp;#34;amazon ses&amp;#34;&#xA;  body := &amp;#34;hello, from ses&amp;#34;&#xA;  err := sendSESEmail(from, to, title, body)&#xA;  if err != nil {&#xA;  &#x9;log.Println(&amp;#34;mail sending error&amp;#34;)&#xA;  }&#xA;}&#xA;&#xA;func sendSESEmail(from string, to string, title string, body string) error {&#xA;  awsSession := session.New(&amp;amp;aws.Config{&#xA;    Region:      aws.String(&amp;#34;us-east-1&amp;#34;),&#xA;    Credentials: credentials.NewStaticCredentials(&amp;#34;AWS_ACCESS_KEY_ID&amp;#34;, &amp;#34;AWS_SECRET_KEY&amp;#34;, &amp;#34;&amp;#34;),&#xA;  })&#xA;&#xA;  svc := ses.New(awsSession)&#xA;  input := &amp;amp;ses.SendEmailInput{&#xA;    Destination: &amp;amp;ses.Destination{&#xA;      ToAddresses: []*string{&#xA;        aws.String(to),&#xA;      },&#xA;    },&#xA;    Message: &amp;amp;ses.Message{&#xA;      Body: &amp;amp;ses.Body{&#xA;        Text: &amp;amp;ses.Content{&#xA;          Charset: aws.String(&amp;#34;UTF-8&amp;#34;),&#xA;          Data:    aws.String(body),&#xA;        },&#xA;      },&#xA;      Subject: &amp;amp;ses.Content{&#xA;        Charset: aws.String(&amp;#34;UTF-8&amp;#34;),&#xA;        Data:    aws.String(title),&#xA;      },&#xA;    },&#xA;    Source: aws.String(from),&#xA;  }&#xA;  _, err := svc.SendEmail(input)&#xA;  if err != nil {&#xA;    return errors.New(err.Error())&#xA;  }&#xA;  return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Amazon SESを有効にしただけではデフォルトsandboxモードになっていて認証済みのメールアドレス宛にしか送れない。&#xA;以下のエラーが出る。&lt;/p&gt;</description>
    </item>
    <item>
      <title>社内サイドプロジェクトについて考えてみた</title>
      <link>https://dongri.github.io/2017/09/%E7%A4%BE%E5%86%85%E3%82%B5%E3%82%A4%E3%83%89%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%80%83%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Tue, 05 Sep 2017 22:34:49 +0900</pubDate>
      <guid>https://dongri.github.io/2017/09/%E7%A4%BE%E5%86%85%E3%82%B5%E3%82%A4%E3%83%89%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%80%83%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>&lt;p&gt;そもそも社内サイドプロジェクトとは何なのか？&#xA;自分の中ではGoogleの20%ルールの20%を業務時間外と考えた言葉。&lt;/p&gt;&#xA;&lt;p&gt;自分は決まったスケジュール、決まった仕様で開発するのがつまらないと思った。&#xA;そこで非エンジニアの方々からこんなのできるといいですねを拾ってプライベートの時間で社内サイドプロジェクトをするのが本業より面白かった。&#xA;そっちのほうがもっと達成感を感じるからだ。&lt;/p&gt;&#xA;&lt;p&gt;Apple WatchやTVなど今までいろいろやってきたサイドプロジェクトの感想を書いてみよう。&lt;/p&gt;&#xA;&lt;p&gt;流れは大体以下のようだ。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;作ると宣言せず家に帰って黙々とコードを書く&lt;/li&gt;&#xA;&lt;li&gt;みんなが集まる場を借りてみせる（デモ）&lt;/li&gt;&#xA;&lt;li&gt;おー！すごい！リアクションをもらう。質問に答える&lt;/li&gt;&#xA;&lt;li&gt;解散&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;ここで抜けてるのは個別に上の人達と話をしなかったことだ。そこが問題？&#xA;デモもデモの後開発進めてリリースできるレベルまで持っていくところまでは問題ない。&#xA;それはお前のプライベートの時間で好きてやってるのでどうぞだね。&#xA;応援する人が多くなって本プロジェクト化もしくはリリース直前になると問題になる。&#xA;どんな問題になるかは各自想像してください。&lt;/p&gt;&#xA;&lt;p&gt;それで以下のようにまとめてみた。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;いろんな人と話して意見を交換して成功か失敗か早い段階ではっきりさせる&lt;/li&gt;&#xA;&lt;li&gt;自分が好きてやってるので成功か失敗か気にしない&lt;/li&gt;&#xA;&lt;li&gt;デモまでやって自己満足で終わらせる&lt;/li&gt;&#xA;&lt;li&gt;この会社はサイドプロジェクト文化がないのでさようなら&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;1からやってみよう&lt;/p&gt;</description>
    </item>
    <item>
      <title>久しぶりにアプリをリリースした</title>
      <link>https://dongri.github.io/2017/07/%E4%B9%85%E3%81%97%E3%81%B6%E3%82%8A%E3%81%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%97%E3%81%9F/</link>
      <pubDate>Fri, 28 Jul 2017 22:29:11 +0900</pubDate>
      <guid>https://dongri.github.io/2017/07/%E4%B9%85%E3%81%97%E3%81%B6%E3%82%8A%E3%81%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%97%E3%81%9F/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pingr.im&#34;&gt;https://pingr.im&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ドメインから想像できるようにメッセージアプリです。LINEなどのように本格のメッセージアプリと比べられない完成度ですが、一家三人は楽しく使ってます。&#xA;pinyinもまともにわからない息子から仕事中に絵文字だけ送って来たり、昼間になると「パパごはん食べた？」のメッセージ来たり。&lt;/p&gt;&#xA;&lt;h1 id=&#34;なんでこんなの作ったの&#34;&gt;なんでこんなの作ったの？&lt;/h1&gt;&#xA;&lt;p&gt;ある日から奥さんとの連絡手段であるLINEがPushが来なくなって、気付くのが遅くて電話までかけて来るする事故がありました。&#xA;その後WechatとKakao Talk考えてみたが、奥さんが既読機能が必須だと言ってKakao Talkにしました。それもPush notificationが若干おかしくて。。。&#xA;Kakao Talkはおそらく私のAndroidのせいかも知らないです。「これから帰る」「今日は飲み会」など奥さんとのやり取りぐらいなら自分で100% Push飛べるアプリ作れるんじゃないかと思い作り始めました。&lt;/p&gt;&#xA;&lt;h1 id=&#34;どんな機能あるの&#34;&gt;どんな機能あるの？&lt;/h1&gt;&#xA;&lt;p&gt;一回目のApple審査で、「4.2 Minimum Functionality」でリジェクトされたレベルです。クソアプリだよと言ってますね。&#xA;二回目の審査では機能をリストしてdevelopサイトのURLも記入して真面目に出した結果審査通りました。&#xA;ユーザー名、パスワードでアカウント作れる。usernameでユーザーを自分の友達に追加できて、textのみ送れるクソアプリです。&#xA;それ以外は↑で言ったように「既読」という必須機能を付けてます。ちなみに自分用にBot作れるようにしました。&#xA;後は世の中のメッセージアプリのように1電話番号1アカウントみたいなことせず、電話番号持ってない子供にもiPodさえあればできるようにしてます。&lt;/p&gt;&#xA;&lt;h1 id=&#34;なにで作ったの&#34;&gt;なにで作ったの？&lt;/h1&gt;&#xA;&lt;p&gt;nodejs, coffeescript, mongodb, swift, javaですね。&#xA;実はコード自体は3年前からあって当時一瞬Yoというアプリが流行ってた時にそれを真似してPush専用のアプリを作ってたがメンテしなくて、今回メッセージ送れる機能を付けた感じです。&lt;/p&gt;&#xA;&lt;h1 id=&#34;作ってみた感想&#34;&gt;作ってみた感想&lt;/h1&gt;&#xA;&lt;p&gt;最近のPush notification機能はいろいろ変わったなと思いました。&#xA;iOSの毎年一回サーバーのp12ファイル更新しないといけない証明書方式から永久に変更不要なkey方式に変わっていたり、&#xA;AndroidもGCMからFirebaseのFCMにかわったりとガラッと変わった感じでした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Twitterを愛してた</title>
      <link>https://dongri.github.io/2017/05/twitter%E3%82%92%E6%84%9B%E3%81%97%E3%81%A6%E3%81%9F/</link>
      <pubDate>Fri, 05 May 2017 16:17:12 +0900</pubDate>
      <guid>https://dongri.github.io/2017/05/twitter%E3%82%92%E6%84%9B%E3%81%97%E3%81%A6%E3%81%9F/</guid>
      <description>&lt;p&gt;Twitterやらなくなって二ヶ月ほど経ちますが、支障なく生きています。今はたまに開いてニュース見たり、aws障害検索したりするぐらいです。&lt;/p&gt;&#xA;&lt;p&gt;かつてはTwitterを愛してました。9年ぐらい前はTwitterのお陰で会ったこともない人と一緒にiPhoneアプリ作って出したり、&#xA;7年前はTwitterのお陰で転職できたし、テック系イベント参加するとフォロワーが増えてコミュニケーションしたり、いいことばかりでした。&lt;/p&gt;&#xA;&lt;p&gt;#腹減ったー #ラーメンうまい #githubダウンした などなどどうでもいいツイートばかりで、&#xA;偶に毒吐いたりして周りに迷惑かけたりすることもしました。酒を飲むと特に&lt;/p&gt;&#xA;&lt;p&gt;徐々に人間関係にも影響が出始めました。Twitterを愛してる人から見るとフォローから外れるということはもう絶交と同じでしたね。&#xA;Twitterにキレイな自分しか出さない人達からは嫌われ始めたし、絡まなくなると嫌われ始めたし、&#xA;正直この数年はTwitterのお陰で何が良かったことはありませんでしたね。&lt;/p&gt;&#xA;&lt;p&gt;「腹減ったー」「酒飲みたい」は呟きたい、しかしTwitterは嫌だ。結果として自分でTwitterみたいなのを作って呟くことにしました。&lt;/p&gt;&#xA;&lt;p&gt;今のところ数人のフォロワーしかいないけど、楽しく呟いてます、なぜかReplyが多いですね。&lt;/p&gt;&#xA;&lt;p&gt;昔みたいに酒飲みながら話に集中するのではなくTwitter開いて見たり、呟いたりしなくなったのと、&#xA;仕事中のTwitter割り込みもなくなって、少しDeep Workできた気がします。&lt;/p&gt;&#xA;&lt;p&gt;去年はInstagramのアカウント削除して、AndroidからFacebookアプリ消して、最近はTwitterやらなくなって、これはもう「年だね」と思いますね。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Smartisan M1</title>
      <link>https://dongri.github.io/2017/04/smartisan-m1/</link>
      <pubDate>Wed, 05 Apr 2017 23:45:40 +0900</pubDate>
      <guid>https://dongri.github.io/2017/04/smartisan-m1/</guid>
      <description>&lt;p&gt;二ヶ月待ってたSmartisan M1が今日やっと届いた。触ってみた感じめっちゃよかった。&#xA;一時期使ってたOnePlus Oneに比べると天と地の差？&lt;/p&gt;&#xA;&lt;h1 id=&#34;google-play-services&#34;&gt;Google Play Services&lt;/h1&gt;&#xA;&lt;p&gt;デフォルトではGoogle Play Servicesが入ってないので、Googleアカウントと連携できない。&#xA;「谷歌安装器」というアプリをインストールしてGoogle Play Servicesをインストール。&#xA;インストールするとGoogle Play Storeもインストールボタンがあるが、押して見るとroot権限がないよ言われる。&#xA;Google Play Storeは別途検索してインストールすればOK.インストール環境して、Googleアカウント連携すると&#xA;連絡先、写真、カレンダーなどが同期できる。&lt;/p&gt;&#xA;&lt;h3 id=&#34;追記&#34;&gt;追記&lt;/h3&gt;&#xA;&lt;p&gt;SmartisanのStoreでGoogle Play StoreインストールするとGoogle Play Servicesが先にインストール&#xA;されて再起動される、その後Play Storeがインストールさるので、その後Googleアカウント連携できる。&lt;/p&gt;&#xA;&lt;h1 id=&#34;iijモバイルネットワーク設定&#34;&gt;iijモバイルネットワーク設定&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;APN: iijmio.jp&#xA;ユーザー名: 必要なし&#xA;パスワード: 必要なし&#xA;認証タイプ: PAPまたはCHAP&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これで楽しいSmartisan生活が始まる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Onion Router</title>
      <link>https://dongri.github.io/2017/04/the-onion-router/</link>
      <pubDate>Mon, 03 Apr 2017 01:01:48 +0900</pubDate>
      <guid>https://dongri.github.io/2017/04/the-onion-router/</guid>
      <description>&lt;p&gt;弊社CTOが最近Torについて研究してるらしく、私に一度やってみたほうがいいよと言われたのでやってみた。&lt;/p&gt;&#xA;&lt;p&gt;新しいインスタンス立ち上げようかと思ったが、おそらくリソースそんなに必要ないだろうと判断し既存のサーバー入れてみた。&lt;/p&gt;&#xA;&lt;h2 id=&#34;レポジトリ追加&#34;&gt;レポジトリ追加&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim /etc/yum.repos.d/torproject.repo&#xA;&#xA;[tor]&#xA;name=Tor repo&#xA;enabled=1&#xA;baseurl=https://deb.torproject.org/torproject.org/rpm/el/7/$basearch/&#xA;gpgcheck=1&#xA;gpgkey=https://deb.torproject.org/torproject.org/rpm/RPM-GPG-KEY-torproject.org.asc&#xA;&#xA;[tor-source]&#xA;name=Tor source repo&#xA;enabled=1&#xA;autorefresh=0&#xA;baseurl=https://deb.torproject.org/torproject.org/rpm/el/7/SRPMS&#xA;gpgcheck=1&#xA;gpgkey=https://deb.torproject.org/torproject.org/rpm/RPM-GPG-KEY-torproject.org.asc&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo yum -y install tor&#xA;&#xA;$ sudo /etc/init.d/tor status&#xA;tor apparently not running (no pid file)&#xA;&#xA;$ ls -l /etc/tor/&#xA;total 28&#xA;-rw-r--r-- 1 root _tor 9543 Dec 11  2015 torrc&#xA;-rw-r--r-- 1 root _tor 9543 Dec 11  2015 torrc.sample&#xA;-rw-r--r-- 1 root _tor  419 Dec 11  2015 tor-rpm-defaults-torrc&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;設定&#34;&gt;設定&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo vim /etc/tor/torrc&#xA;&#xA;HiddenServiceDir /var/lib/tor/hidden_service/&#xA;HiddenServicePort 80 127.0.0.1:80&#xA;&#xA;$ sudo /etc/init.d/tor start&#xA;Starting tor...done.&#xA;$ sudo /etc/init.d/tor status&#xA;tor (pid 8199) running&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;onionドメイン確認&#34;&gt;onionドメイン確認&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo less /var/lib/tor/hidden_service/hostname&#xA;xxxxxxxxxxxxxxxx.onion&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://www.torproject.org/download/download-easy.html.en&#34;&gt;Tor Browser&lt;/a&gt;インストールしてアクセスしてみる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>エンジニアの10大ウソ</title>
      <link>https://dongri.github.io/2017/02/%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE10%E5%A4%A7%E3%82%A6%E3%82%BD/</link>
      <pubDate>Sat, 04 Feb 2017 01:01:48 +0900</pubDate>
      <guid>https://dongri.github.io/2017/02/%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE10%E5%A4%A7%E3%82%A6%E3%82%BD/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;後でコメント付けるから&lt;/li&gt;&#xA;&lt;li&gt;これは暫定的な方法、本番リリース時はこの方法で書かない&lt;/li&gt;&#xA;&lt;li&gt;大体終わった。後小さい問題何個か残ってるだけ&lt;/li&gt;&#xA;&lt;li&gt;エンジニア：”十日は必要”。Boss：”五日でできる？”。エンジニア：”できる！”&lt;/li&gt;&#xA;&lt;li&gt;TODO&lt;/li&gt;&#xA;&lt;li&gt;私の端末ではちゃんと動くのに&lt;/li&gt;&#xA;&lt;li&gt;これはテストする必要ない、絶対問題ないから&lt;/li&gt;&#xA;&lt;li&gt;そう、もうテストした&lt;/li&gt;&#xA;&lt;li&gt;一行の修正だけ、他の処理に影響しない&lt;/li&gt;&#xA;&lt;li&gt;これは前からあった問題&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;追加10ウソ&#34;&gt;追加10ウソ&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;次コード修正する時ユニットテスト書くよ&lt;/li&gt;&#xA;&lt;li&gt;９０％は終わった&lt;/li&gt;&#xA;&lt;li&gt;これは二分で解決できる&lt;/li&gt;&#xA;&lt;li&gt;そう、これは既知のBugだ&lt;/li&gt;&#xA;&lt;li&gt;昨日はちゃんと動いてたのに&lt;/li&gt;&#xA;&lt;li&gt;そんなのありえない&lt;/li&gt;&#xA;&lt;li&gt;これはハードウェア/ネットワークの問題、私のコードと関係ない&lt;/li&gt;&#xA;&lt;li&gt;これはBugではなく、特性だ&lt;/li&gt;&#xA;&lt;li&gt;私は今ドキュメント読んでる&lt;/li&gt;&#xA;&lt;li&gt;私はサボってない、今ビルド中&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>開発環境をLinuxにした</title>
      <link>https://dongri.github.io/2017/01/%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%82%92linux%E3%81%AB%E3%81%97%E3%81%9F/</link>
      <pubDate>Sat, 14 Jan 2017 23:25:44 +0900</pubDate>
      <guid>https://dongri.github.io/2017/01/%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%82%92linux%E3%81%AB%E3%81%97%E3%81%9F/</guid>
      <description>&lt;p&gt;開発者のMac離れ?(去年からそういう噂があるけど)の流れで年末帰国時に買って来た&#xA;Mi Notebook Air (&lt;a href=&#34;http://www.mi.com/mibookair/&#34;&gt;http://www.mi.com/mibookair/&lt;/a&gt;) にLinuxを入れて開発環境を構築してみた。&#xA;Mi Notebook Airは1.07kgでMacBook Air1.35kgより軽くてリュックが非常に軽くなった。&lt;/p&gt;&#xA;&lt;h2 id=&#34;macが嫌いになった理由&#34;&gt;Macが嫌いになった理由&lt;/h2&gt;&#xA;&lt;p&gt;自分は強烈なApple, Macファンでもないが、常に新しいMacBookを買って開発環境にしてた。しかし、&#xA;今回のMacBook TouchBarにはがっかりした。なかなか慣れないキーボードのパチパチ感、仕様にはバッテリーで&#xA;最大10時間使えると書いてあるのに実はフル充電から４時間ほどしか使えないし、macOSのバージョンアップで&#xA;バッテリ残量の残り時間も消したりしてappleに対しての不信感が増してきた。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ubuntuにした理由&#34;&gt;Ubuntuにした理由&lt;/h2&gt;&#xA;&lt;p&gt;別にLinux OSとvimさえあればいいというエンジニアもいるかも知らないが、自分の場合は業務開発端末としては&#xA;ある程度GUIツールを使わないといけないのでLinux Desktopでシェアが一番高いUbuntuにした。&#xA;実はUbuntu Desktopにもいろんなディストリビューションがあって選択が非常に多くて、&#xA;3日かけて以下の順に試してみたが、最終的にはUbuntuにした。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ubuntu -&amp;gt; kubuntu -&amp;gt; xubuntu -&amp;gt; budgie -&amp;gt; gnome -&amp;gt; mate -&amp;gt; elementary os -&amp;gt; ubuntu&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;xubuntuは非常に軽い、budgieは非常に格好いい、elementary osはインタフェースがmacと似ていて操作しやすい。&#xA;それぞれメリットもあればデメリットもあった。dropboxのアイコンが表示されなかったり同期できなかったり、&#xA;OS Update後起動できなくなかったり、Chromeがクラッシュしたりと不安定なものもあった。&#xA;サードパーティ製のアプリ見ても標準ubuntuでは絶対正しく動くように開発されてるので、GUIツールをある程度使う&#xA;ためにはubuntuを使う必要があった。以上の理由からUbuntuにした。&lt;/p&gt;&#xA;&lt;h2 id=&#34;引越して困ったこと&#34;&gt;引越して困ったこと&lt;/h2&gt;&#xA;&lt;p&gt;言わなくてもわかるようにiOSの開発ができなくなった。覚悟した上で引っ越ししたので家にも会社にもMacを用意した。&lt;/p&gt;&#xA;&lt;p&gt;引越しで一番頑張って設定してみようとして失敗したのがVPNだった。VPN PPTPはデフォルトでサポートしてるが&#xA;l2tp ipsecは入ってなくて自前でなんとかしないといけなくて以下のツール使って頑張ったけどダメだった。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/nm-l2tp/network-manager-l2tp&#34;&gt;https://github.com/nm-l2tp/network-manager-l2tp&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/hwdsl2/setup-ipsec-vpn&#34;&gt;https://github.com/hwdsl2/setup-ipsec-vpn&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;あとは1password。こいつは最初どうしようと思ったが、1pass CUIが何個かあってなんとかなった。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/georgebrock/1pass&#34;&gt;https://github.com/georgebrock/1pass&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/oggy/1pass&#34;&gt;https://github.com/oggy/1pass&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/dlokesh/1pass&#34;&gt;https://github.com/dlokesh/1pass&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;引越して良かったこと&#34;&gt;引越して良かったこと&lt;/h2&gt;&#xA;&lt;p&gt;プライベートも会社も開発環境がすべてDockerだったので、Docker for Macとさようならできたのがよかった。&#xA;そいつが使いにくいわけではないが、本来のDockerを使う感じがよかった。 &lt;code&gt;brew&lt;/code&gt; より &lt;code&gt;apt-get&lt;/code&gt; が好きだった。&#xA;LINE, Wechatなど余計なアプリ入れてなくて、terminal, chrome, atom しか入れてないんでコード書くのにもっと集中できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Suica PASMO リーダー</title>
      <link>https://dongri.github.io/2016/12/suica-pasmo-%E3%83%AA%E3%83%BC%E3%83%80%E3%83%BC/</link>
      <pubDate>Sun, 18 Dec 2016 15:58:44 +0900</pubDate>
      <guid>https://dongri.github.io/2016/12/suica-pasmo-%E3%83%AA%E3%83%BC%E3%83%80%E3%83%BC/</guid>
      <description>&lt;p&gt;最近良く自分のPASMO残高を把握できず、改札口で引っかかって「ファック」と小さい声出した時がよくあって、&#xA;AndroidでPASMOの残高を確認できるアプリを探してみたが、どれも必要ない機能ががたくさんあるのとデザインがイマイチ、&#xA;且つうざい広告が出るので逆にイラッとしたり、自分のAndroidのせいか分からないが、クラッシュしまくったり、、、&lt;/p&gt;&#xA;&lt;p&gt;今週Android Payも出たし、FeliCaとかNFCの勉強も含めてアプリを開発してみようと思ってSuica, PASMOリーダーを作ってみることにした。&lt;/p&gt;&#xA;&lt;p&gt;一日でやっつけたもので処理は単純。かざすとアプリが起動して読み取ったデータを表示するだけ。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.guncy.android.cardreader&#34;&gt;Play Store - Suica PASMO リーダー&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;参考になったページ&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://osdn.net/projects/felicalib/wiki/suica&#34;&gt;FeliCa Library&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.denno.net/SFCardFan/&#34;&gt;路線、駅コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://qiita.com/pear510/items/38f94d61c020a17314b6&#34;&gt;AndroidでFelica(NFC)のブロックデータの取得&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;ダウンロード数がどれぐらいになるかわからないが、広告入れる予定もないし、機能追加しても課金する予定もないので、&#xA;オープンソースにしてメンテナンスして行こうと思います。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/CardReader&#34;&gt;Github - CardReader&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;TODO&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;読み取れる件数は決まってるので、過去のデータを保存する機能&lt;/li&gt;&#xA;&lt;li&gt;CSVフォーマットでUSBストレージに保存する機能&lt;/li&gt;&#xA;&lt;li&gt;バグ修正&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>LINE Translate BOT</title>
      <link>https://dongri.github.io/2016/12/line-translate-bot/</link>
      <pubDate>Sat, 03 Dec 2016 16:42:42 +0900</pubDate>
      <guid>https://dongri.github.io/2016/12/line-translate-bot/</guid>
      <description>&lt;p&gt;LINE BOTがMessaging apiを正式にリリースしたので翻訳BOTを作りました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://wise.nilth.com&#34;&gt;https://wise.nilth.com&lt;/a&gt;&lt;!-- raw HTML omitted --&gt; (shutdown)&lt;/p&gt;&#xA;&lt;p&gt;公式の通訳BOTも何個かあるのに何で今更翻訳BOT? と思う人もいるかも知らないですが、理由は2つあります。&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-汎用性の問題&#34;&gt;1. 汎用性の問題&lt;/h3&gt;&#xA;&lt;p&gt;LINE公式通訳BOTをディスってるわけではないが、正直言って不便でした。日英、日中、日韓と一つ一つが単体のBOTになっていて、一つのグループに複数BOTを招待できないのと、あくまで日本語をベースにしてるので、例えば韓国語を英語に翻訳することはできません。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-進化した翻訳技術&#34;&gt;2. 進化した翻訳技術&lt;/h3&gt;&#xA;&lt;p&gt;ちょっと前に話題になっていた翻訳技術の進化です。ニューラルネットワーク機械学習の応用により翻訳の精度が今までと比較できないレベルまで進化してきました。&lt;/p&gt;&#xA;&lt;p&gt;上の理由から今更なんですが翻訳BOTを作りました。英語がダメな私はまず普段辞書の代わりによく使うと思います。&lt;/p&gt;&#xA;&lt;h3 id=&#34;エンジニア的な話をちょっと&#34;&gt;エンジニア的な話をちょっと&lt;/h3&gt;&#xA;&lt;p&gt;今はdocker container一つで動かしていて正直言ってどれくらいのリクエストで死ぬかわからないです。&#xA;このBOTの利用者が増えてリクエストをさばけない時にはサーバー増やしたりスペック上げたりなど考えることにしました。&#xA;エンジニア達はすぐ分かったと思いますが、この俺が翻訳エンジンなんか作れるわけではないので、Google Translate APIを使ってます。&#xA;こいつにも金取られるので、これ以上無理だと判断した時にはまた考えようかと思います。&#xA;BOTサーバーはGo言語で書いていて、LINE BOT API Trialの時から自前で作ったGo言語用SDKを使ってます。&#xA;&lt;a href=&#34;https://github.com/dongri/line-bot-sdk-go&#34;&gt;line-bot-sdk-go&lt;/a&gt; 。&#xA;Landing PageはF7さんのLp使いました。 &lt;a href=&#34;https://github.com/F7/Lp&#34;&gt;https://github.com/F7/Lp&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;line-bot-awards&#34;&gt;LINE BOT AWARDS&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://botawards.line.me&#34;&gt;https://botawards.line.me&lt;/a&gt; これなんですが、この翻訳BOTはある意味今のLINE公式通訳BOTと競合？してるので、どうかなと思いますｗ。&#xA;それと元中の人だったので応募するとなんか気まずいところもあって、悩んてるところですｗ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Code review</title>
      <link>https://dongri.github.io/2016/10/code-review/</link>
      <pubDate>Thu, 13 Oct 2016 21:08:26 +0900</pubDate>
      <guid>https://dongri.github.io/2016/10/code-review/</guid>
      <description>&lt;p&gt;こういうコードレビュー系の記事はたくさんありますが、今まで悩んてたところと気を付けてたところをリストしてみようと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;レビューが終わってるかどうかわからない問題&#34;&gt;レビューが終わってるかどうかわからない問題&lt;/h2&gt;&#xA;&lt;p&gt;PR出して半日経ったけど、コメントがない。やっとコメントが入り半日経過。よっし、レビューの修正とコメントに返信しようと思い修正なり、コメントに返事する。しかし、レビュー終わってなかった。また残りのレビューでコメントが入る。この繰り返しが数日続く時もある。こういうレビューの反映はほかのタスクやってうちに割り込みで対応するのでおそらくコードのクオリティよくないでしょう。割り込みで本来のタスクにも影響がでますよね。なのでレビュアーは時間をかけてもいいから一気にレビューして最後にレビュー終わりましたの合図を出すべきです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;言葉使いの問題&#34;&gt;言葉使いの問題&lt;/h2&gt;&#xA;&lt;p&gt;「こうしてください。」「こうしたほうがいい。」「これ意味分からないｗｗｗ」などなど、理由もなしにこういう言い方されるとイラッとしますよね？こうしてくださいの代わりにこういう理由があってこうした方がいいと思います。この部分の意図が理解できないので説明してくれると助かります。などなど、代わりの言葉はいくらでもあると思います。敬語はもちろんで、です、ますだけではなく言い方にも気を付けましょう。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アサインされても気付かない問題&#34;&gt;アサインされても気付かない問題&lt;/h2&gt;&#xA;&lt;p&gt;PR出したけど、なかなか見てくれない。しょうがなくダイレクトメールかチャットでURL送ってお願いする場合もありますね。この問題はツールで解決できる問題だと思います。一日2,3回自分にアサインされて見てないPRをメールか、チャットで催促など、方法はいくらでもあるので、問題ないはずです。しかし、気付いたけどわざと見ないのはその人達間の人間関係の問題で解決方法は別途探しましょう。&lt;/p&gt;&#xA;&lt;h2 id=&#34;対象ではないことろに触れる問題&#34;&gt;対象ではないことろに触れる問題&lt;/h2&gt;&#xA;&lt;p&gt;プロジェクト全体のコードが理想の形になってない状態で1つの小さなPRでプロジェクト全体に対してのツッコミが入る時があります。それは今回のPRと関係ないです！と返す人もプロジェクト全体のコードを綺麗にしたいレビュアーもどっちも悪くはない思います。やる気あって且つデキる人はわかった全部直してやる！黙々と今回のPRと関係ないところも修正してPRを出し直す人もいれば、この機能のリリースが先だ、そんなの知らないよ！と返す人もいると思います。この辺は優先順位を決めれる人を捕まえて話し合いが必要ですね。&lt;/p&gt;&#xA;&lt;h2 id=&#34;土日レビューしてくれる人がいない問題&#34;&gt;土日レビューしてくれる人がいない問題&lt;/h2&gt;&#xA;&lt;p&gt;若者が（若者に限らないが）土日やる気出して1つの機能追加してリリースしたいのにレビュー出してもレビューしてくれそうな人がいない時があると思います。月曜日まで待ちたくない、今すぐリリースしたい、こういう時どうすればいいのか？自分でPR作って自分でマージする。コードレビューの意味がなくなってる。そもそもそういう若者をフォロー出来ないのは組織の問題なので、ここではその辺の話には触れたくないです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust on Heroku with Docker</title>
      <link>https://dongri.github.io/2016/08/rust-on-heroku-with-docker/</link>
      <pubDate>Tue, 16 Aug 2016 00:42:53 +0900</pubDate>
      <guid>https://dongri.github.io/2016/08/rust-on-heroku-with-docker/</guid>
      <description>&lt;p&gt;Rustで書いたhello rustをherokuに載せてみた。&#xA;普通ならrust用のBuildpack使うのだが、今回はdockerを使うようにした。&#xA;Dockerfile、ソースコードなどはこちら&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/hello-rust&#34;&gt;https://github.com/dongri/hello-rust&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;はじめはalpineで頑張ってみようかと思ったがrustのインストールがうまく行かなくて、ubuntuに変更。&#xA;Dockerfileは以下のようになっている。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM ubuntu:latest&#xA;&#xA;# rust, cargo buildに必要なソフトウェアインストール&#xA;RUN apt-get -y update&#xA;RUN apt-get -y install curl file sudo gcc&#xA;&#xA;# rustのインストール&#xA;RUN curl -sSf https://static.rust-lang.org/rustup.sh | sh&#xA;&#xA;RUN mkdir -p /app&#xA;WORKDIR /app&#xA;COPY . /app&#xA;&#xA;# ビルドして ./target/release/helloバイナリを作る&#xA;RUN cargo build --release&#xA;&#xA;EXPOSE 8080&#xA;&#xA;# 実行&#xA;CMD /app/target/release/hello&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;readmeにも書いてあるがherokuはdockerをサポートしていて、pushするだけでローカルのdockerと&#xA;同じように動かせる。必要なのは、heroku-container-toolsというheroku plugin。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ heroku plugins:install heroku-container-tools&#xA;$ heroku container:push web&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これでだけでherokuにアップされて動く。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hello-rust.herokuapp.com/&#34;&gt;https://hello-rust.herokuapp.com/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goodbye Instagram</title>
      <link>https://dongri.github.io/2016/08/goodbye-instagram/</link>
      <pubDate>Mon, 15 Aug 2016 00:32:35 +0900</pubDate>
      <guid>https://dongri.github.io/2016/08/goodbye-instagram/</guid>
      <description>&lt;p&gt;ついにInstagramの写真まで全部消した。API仕様が変わってからずっと投稿してなくて、写真残しても意味ないと思って全部消してしまった。&lt;/p&gt;&#xA;&lt;p&gt;Instagramは他のSNSと違って見てると気分がよくなる。&#xA;Twitterみたいに他人の悪口も無ければ毒もない。&#xA;あるのは綺麗な景色と美味しそうな食べ物と可愛いペット、見ててこの世の中は幸せだなと思うぐらいだ。&lt;/p&gt;&#xA;&lt;p&gt;しかし、それがFacebookに買われた後からかどうかは分からないが、タイムラインがFacebookのように&#xA;時系列ではなく勝手にユーザーの好みに合わせて表示されるようになったみたい。&#xA;猫にいいねたくさんすると猫の写真が優先されたり、美人の写真によくいいねをすると美人の写真が上に表示されたり、とにかく「おまら勝手に！」。&lt;/p&gt;&#xA;&lt;p&gt;実はInstagramがWeb版がない時代からAPIを使って「Stagram」という名前でブラウザでInstagramの写真見れるサービス？作って、&#xA;趣味でInstagramのiOS、Androidアプリまで作るぐらいInstagramが好きだった。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://flic.kr/s/aHskEFaE1Y&#34;&gt;https://flic.kr/s/aHskEFaE1Y&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;タイムラインが気持ち悪くパソナライズされたのと別に私がやめた理由はAPI制限だった。&#xA;前までは楽しいAPIで自分の写真はもちろん、他人の写真まで自分が好きなようにいじれた。&#xA;しかしそのAPIが6月1日から変わった、ずっとまえから変わるとブログには書いてあったがついに変わって、&#xA;ちゃんとした理由でAPIクライアントを申請して審査通らないとほとんどのAPIが使えない。&#xA;APIの制限にはそれなりの理由があると思うが、これ以上付き合いたくなくなった。&lt;/p&gt;&#xA;&lt;p&gt;有用性、透明性、正当性、、、俺みたいなやつがプライベートでそんな意識高いのサービス、アプリを作れるのか？！バカヤロー w&lt;/p&gt;</description>
    </item>
    <item>
      <title>認めるエンジニア</title>
      <link>https://dongri.github.io/2016/08/%E8%AA%8D%E3%82%81%E3%82%8B%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2/</link>
      <pubDate>Sat, 13 Aug 2016 20:11:11 +0900</pubDate>
      <guid>https://dongri.github.io/2016/08/%E8%AA%8D%E3%82%81%E3%82%8B%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2/</guid>
      <description>&lt;p&gt;自分の弱点から言うと人を簡単に認めないこと。例えその人があることですごい成功したとしても気軽く認めないこと。&lt;/p&gt;&#xA;&lt;p&gt;でも、今まで認めたエンジニアは二人いる。一人は元L社のチームマネージャー、もう一人のはやめたAndroidエンジニア。&lt;/p&gt;&#xA;&lt;p&gt;一人目の元L社のチームマネージャーは検索エンジンや、ゲームプログラミングの出身でiOSの開発には知識はゼロと言っても過言ではない。&#xA;しかし途中で自分のコードにメモリリークじゃないの？こうやったほうがいいじゃないの？のアドバイスをしてくれた。&#xA;自分も確かにと思いながらやって、プロジェクトの終わりの飲み会でその真実を知った。&#xA;&amp;ldquo;大変だったよ、俺はiOSの知識が全く無くてお前らが書いたObjcコードを深夜3,4時まで本読みながら解読して勉強した。まあ過去の話だし、今日は飲もう！&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;もう一人はやめたやつだけど、厳しいやつだった。自分が作ったAPIのバグを探すのが趣味みたい。いろんな例外ケースを試してここがだめだ、そこがダメだ、と言ってくる。&#xA;言ってることが正しいので、反論することなく修正してあげる。というかあいつはなんでそんな例外ケースを思い出すんだろうと思うぐらいだ。&#xA;普段は無口で余計なことはしゃべらず、ただただ論理的にシステムを正しく設計しようとしてた。&lt;/p&gt;&#xA;&lt;p&gt;よく考えてみると二人は共通点がある。なにことも終わってから話すことだ。&#xA;先にここがもしかしてダメじゃない？とかなくて、自分まず試してから話す、要は手を動かす人達だった。&#xA;それにわざわざ仕事のアピールする人ではなかった。どっちも普段無口でコレをやるの宣言してからやるのではなく、コレをやった派だった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>新卒SI</title>
      <link>https://dongri.github.io/2016/07/%E6%96%B0%E5%8D%92si/</link>
      <pubDate>Fri, 22 Jul 2016 02:10:36 +0900</pubDate>
      <guid>https://dongri.github.io/2016/07/%E6%96%B0%E5%8D%92si/</guid>
      <description>&lt;p&gt;新卒でSIの会社に入った。小さい会社で社員研修もくそもない。&lt;/p&gt;&#xA;&lt;p&gt;初日から社長に取引先(現場)に連れて行って面接。面接で初めて気付いた、履歴書に俺の年が2つ上がってる！しかも入社三年目。いろんなシステム開発経験あり、いろんな言語でコード書ける、いろんなデータベース触ったことあることになってる。まあ、しょうがない、知ってるふりして質問に答えた。幸いに面接パスして現場で働けるようになった。&lt;/p&gt;&#xA;&lt;p&gt;面接がそんなもんだから、同然現場では新卒扱いされない、いきなりJavaでフレームワーク作りに入る。業務関連の質問はできるけど、技術的な質問はできない雰囲気になってる。Javaもデータベースも知ってるふりしながら家に帰って必死にググる。それが数ヶ月続いたら本当にJavaもデータベースも知るようになった。&lt;/p&gt;&#xA;&lt;p&gt;今も偶にその時の社長と飲みに行くんだけど、その時の履歴書改竄の話出ると笑いながら「しょうがないじゃ、現場のマネージャーは新卒はいらないと言ってるから、、、」&lt;/p&gt;&#xA;&lt;p&gt;多分その時のよくない経験が影響してるか、その後現場が変わっても転職して別の会社に行っても業務関連の質問はよくするけど、技術的な質問はあんまりしないでググるか、本を買うことになってる。&lt;/p&gt;&#xA;&lt;p&gt;幸いに途中で師匠に出会えていろいろ勉強ができた。技術だけではなく、社会人としての常識的なものも勉強できた。&lt;/p&gt;&#xA;&lt;p&gt;偶に思うのは、もしちゃんとした社員研修もあって、何でも聞ける先輩がいる会社に新卒で入ったら俺はどれだけできる人間になったかなとwww。その逆もありうるけどね。&lt;/p&gt;&#xA;&lt;p&gt;(今日ツイッターで「新卒SI」についてブログ書くと宣言したので、ここまで書くか)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hello Rust</title>
      <link>https://dongri.github.io/2016/07/hello-rust/</link>
      <pubDate>Wed, 13 Jul 2016 23:35:22 +0900</pubDate>
      <guid>https://dongri.github.io/2016/07/hello-rust/</guid>
      <description>&lt;h1 id=&#34;install&#34;&gt;Install&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ brew search rust&#xA;multirust    rust    uncrustify&#xA;$ brew install rust&#xA;&#xA;$ rustc --version&#xA;rustc 1.10.0&#xA;$&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;hello-world&#34;&gt;hello world&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim hello.rs&#xA;fn main() {&#xA;    println!(&amp;#34;Hello Rust!&amp;#34;);&#xA;}&#xA;&#xA;$ rustc hello.rs&#xA;$ ./hello&#xA;Hello Rust!&#xA;$&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Wireless adb</title>
      <link>https://dongri.github.io/2016/05/wireless-adb/</link>
      <pubDate>Tue, 10 May 2016 22:21:05 +0900</pubDate>
      <guid>https://dongri.github.io/2016/05/wireless-adb/</guid>
      <description>&lt;p&gt;毎回USB繋げるのが面倒。&lt;/p&gt;&#xA;&lt;p&gt;wifi環境でandroid adb shellできるようにした。&lt;/p&gt;&#xA;&lt;h3 id=&#34;adb-tcpip-listen_port&#34;&gt;adb tcpip listen_port&lt;/h3&gt;&#xA;&lt;p&gt;USBで繋げて&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ adb tcpip 5555&#xA;restarting in TCP mode port: 5555&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;adb-connect-ip_addresslesten_port&#34;&gt;adb connect ip_address:lesten_port&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ adb connect 192.168.10.5:5555&#xA;connected to 192.168.10.5:5555&#xA;&#xA;$ adb devices&#xA;List of devices attached&#xA;192.168.10.5:5555       device&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;adb-shell&#34;&gt;adb shell&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ adb shell&#xA;shell@bullhead:/ $ su&#xA;root@bullhead:/ # ls -la&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これでUSBケーブルなくてもadb shellで繋げるようになった。&lt;/p&gt;&#xA;&lt;h3 id=&#34;warning&#34;&gt;Warning&lt;/h3&gt;&#xA;&lt;p&gt;このまま放置しておくとIPアドレスバレると誰からもadbで入れるので、終わったら adb usbでusbモードに戻しておきましょう。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ adb usb&#xA;restarting in USB mode&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;追記&#34;&gt;追記&lt;/h3&gt;&#xA;&lt;p&gt;wifi環境が変わったりすると不安定になるので、app使ったほうが簡単だし、安全&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.ttxapps.wifiadb&#34;&gt;https://play.google.com/store/apps/details?id=com.ttxapps.wifiadb&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nexus 5X クリーンインストール &amp; Root化</title>
      <link>https://dongri.github.io/2016/05/nexus-5x-%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB-root%E5%8C%96/</link>
      <pubDate>Tue, 03 May 2016 01:36:00 +0900</pubDate>
      <guid>https://dongri.github.io/2016/05/nexus-5x-%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB-root%E5%8C%96/</guid>
      <description>&lt;h2 id=&#34;factory-image&#34;&gt;Factory Image&lt;/h2&gt;&#xA;&lt;p&gt;Googleが公開しているNexus端末向けの初期ROMデータのことを言います。&#xA;Factory Imageには、「system・boot（Kernel）・recovery・bootloader・radio・userdata・cache」などの各領域のイメージが含まれており、&#xA;それらを端末に書き込むことで領域を完全に初期化することが出来ます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developers.google.com/android/nexus/images&#34;&gt;https://developers.google.com/android/nexus/images&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;nexus5xのところの最新のものをダウンロードして解凍する&lt;/p&gt;&#xA;&lt;h2 id=&#34;oemロック解除&#34;&gt;OEMロック解除&lt;/h2&gt;&#xA;&lt;p&gt;開発者向けオプションで「OEMロック解除を有効にする」にチェックを入れる&lt;/p&gt;&#xA;&lt;h2 id=&#34;ブートローダーをアンロック&#34;&gt;ブートローダーをアンロック&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ adb reboot bootloader // もしくは、電源ボタンとボリュームダウンボタンを同時に長押し&#xA;$ fastboot oem unlock&#xA;...&#xA;OKAY [ 20.966s]&#xA;finished. total time: 20.966s&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これでbootloaderがunlockの状態になる&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;DEVICE STATE - locked&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;↓&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;DEVICE STATE - unlocked&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;flash-all&#34;&gt;flash-all&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd bullhead-mhc19q&#xA;$ ./flash-all.sh&#xA;...&#xA;OKAY [  0.214s]&#xA;writing &amp;#39;cache&amp;#39;...&#xA;OKAY [  0.061s]&#xA;rebooting...&#xA;&#xA;finished. total time: 86.174s&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;カスタムリカバリの導入&#34;&gt;カスタムリカバリの導入&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://twrp.me/devices/lgnexus5x.html&#34;&gt;https://twrp.me/devices/lgnexus5x.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Download Links で 最新のimgファイルダウンロードする。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ fastboot flash recovery twrp-3.0.2-0-bullhead.img&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ブートローダー画面から「Recovery mode」を選択すると導入したTWRPを起動できるようなりました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;root化&#34;&gt;Root化&lt;/h2&gt;&#xA;&lt;p&gt;SuperSUの最新版を見つけて入れる。バージョンが違うとAndroid自体が起動できなかったりするのでご注意を&lt;/p&gt;</description>
    </item>
    <item>
      <title>エンジニア軽蔑チェーン</title>
      <link>https://dongri.github.io/2016/02/%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E8%BB%BD%E8%94%91%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3/</link>
      <pubDate>Tue, 23 Feb 2016 00:05:42 +0900</pubDate>
      <guid>https://dongri.github.io/2016/02/%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E8%BB%BD%E8%94%91%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3/</guid>
      <description>&lt;h2 id=&#34;言語編&#34;&gt;言語編&lt;/h2&gt;&#xA;&lt;p&gt;Functional Programmingをわかるエンジニアはよくデザインパターンを口にするエンジニアを軽蔑する。&#xA;よくデザインパターンを口にするエンジニアは「そのように書くとオブジェクト指向ではない」と言うエンジニアを軽蔑する。&#xA;「そのように書くとオブジェクト指向ではない」と言うエンジニアは「重複するコードをfunctionにまとめばいいじゃ」と言ってるエンジニアを軽蔑する。&#xA;コードをコピしてあっちこっちに貼り付けるエンジニアはPMを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;アセンブラ書くエンジニアはC言語書くエンジニアを軽蔑する。&#xA;C言語書くエンジニアはC++書くを軽蔑する。&#xA;C++書くエンジニアはC#書くエンジニアを軽蔑する。&#xA;C#書くエンジニアはHTMLを一種のプログラミング言語と思ってるデザイナーを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;Python3エンジニアはPython2エンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;iOSエンジニアはAndroidエンジニアを軽蔑する。&#xA;AndroidエンジニアはWindows Phoneエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;一年のSwift経験あるエンジニアは5年のObjective-C経験持つエンジニアを軽蔑する。&#xA;Objective-C書くエンジニアはPhoneGap書くエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;React.js書くエンジニアはAngularJS書くエンジニアを軽蔑する。&#xA;AngularJS書くエンジニアはjQuery書くエンジニアを軽蔑する。&#xA;jQuery書くエンジニアはVanilla JSを書くエンジニアを軽蔑する。&#xA;Vanilla JS書くエンジニアはIE使用者を軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;debuggerを使えるエンジニアはassertを使ってるエンジニアを軽蔑する。&#xA;assertを使えるエンジニアはprint()しか書けないエンジニアを軽蔑する。&#xA;console.logでdebugするエンジニアはalertでdebugするエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;Ruby on Railsエンジニアはその他すべての言語のエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;すべてのエンジニアはPHPエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ツール編&#34;&gt;ツール編&lt;/h2&gt;&#xA;&lt;p&gt;text editorを使ってるエンジニアはIDEを使ってるエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;Vim使ってるエンジニアはEmacs使ってるエンジニアを軽蔑する、Emacs使ってるエンジニアはVimを使ってるエンジニアを軽蔑する。&#xA;VimとEmacs使ってるエンジニアはほかすべてのtext editorを使ってるエンジニアを軽蔑する。例えば：atom, sublime, windows editor&lt;/p&gt;&#xA;&lt;p&gt;Android Studioを使ってるか、IntelliJ IDEAを使ってるエンジニアはEclipse使ってるエンジニアを軽蔑する。&#xA;Eclipse使ってるエンジニアはNetBeans使ってるエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;GitかMercurialを使ってるエンジニアはSubversionを使ってるエンジニアを軽蔑する。&#xA;Subversionを使ってるエンジニアはDropboxでバージョン管理してるエンジニアを軽蔑する。&#xA;Dropboxでバージョン管理してるエンジニアはバージョン管理しないエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;Githubを知ってるエンジニアはGithubを知らないエンジニアを軽蔑する。&#xA;Githubでprivate repoを持ってるエンジニアは無料repoのためBitBucketに行っちゃうエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;Zsh使ってるエンジニアはBashを使ってるエンジニアを軽蔑する。&#xA;Bashを使ってるエンジニアはCygwinを使ってるエンジニアを軽蔑する。&#xA;Cygwinを使ってるエンジニアはGUIツール使ってるエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;IRCを使ってるエンジニアはHipChatを使ってるエンジニアを軽蔑する。&#xA;HipChatを使ってるエンジニアはSlackを使ってるデザイナーを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;reStructuredTextで文章作成するエンジニアはMarkdownで文章作成するエンジニアを軽蔑する。&#xA;Markdownで文章作成するエンジニアはHTMLで文章作成するエンジニアを軽蔑する。&#xA;HTMLで文章作成するエンジニアは文章書かないエンジニアを軽蔑する。&#xA;LaTeX使って文章作成するエンジニアはすべてのエンジニアを軽蔑する&lt;/p&gt;&#xA;&lt;p&gt;Nginxを使ってるエンジニアはApacheを使ってるエンジニアを軽蔑する。&#xA;Apacheを使ってるエンジニアはIISを使ってるエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;Dockerでサーバー構築するエンジニアはAnsible、Puppetでサーバー構築するエンジニアを軽蔑する。&#xA;Ansible、Puppetでサーバー構築するエンジニアはFabricでサーバー構築するエンジニアを軽蔑する。&#xA;Fabricでサーバー構築するエンジニアは手動SSHするエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;h2 id=&#34;os編&#34;&gt;OS編&lt;/h2&gt;&#xA;&lt;p&gt;Mac OS X使ってるエンジニアはLinux使ってるエンジニアを軽蔑する。&#xA;Linux使ってるエンジニアはWindows使ってるエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;Debian使ってるエンジニアはUbuntu使ってるエンジニアを軽蔑する。&#xA;Ubuntu使ってるエンジニアは非LTS版Ubuntuを使ってるエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ハードウエア編&#34;&gt;ハードウエア編&lt;/h2&gt;&#xA;&lt;p&gt;MacBook Pro Retina使ってるエンジニアはMacBook Air使ってるエンジニアを軽蔑する。&#xA;MacBook Air使ってるエンジニアはThinkPad使ってるエンジニアを軽蔑する。&#xA;そして、Raspberry Piを使ってるエンジニアはMacBook Pro Retinaを使ってるエンジニアを軽蔑する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo</title>
      <link>https://dongri.github.io/2016/01/hugo/</link>
      <pubDate>Sun, 17 Jan 2016 15:20:15 +0900</pubDate>
      <guid>https://dongri.github.io/2016/01/hugo/</guid>
      <description>&lt;p&gt;macクリーンインストールした後、middlemanのインストールでgemにバージョンとかでいろいろ引っかかったので、hugoに引っ越しするようにした。&#xA;もともとビルドが遅いmiddlemanそんなに好きではなかったし、いいきっかけたと思って引越しした。いい感じ。&lt;/p&gt;&#xA;&lt;h3 id=&#34;hgが必要なのでhgをインストールする&#34;&gt;hgが必要なのでhgをインストールする&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ brew install hg&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;hugoインストール&#34;&gt;hugoインストール&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ go get -v github.com/spf13/hugo&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;site作成&#34;&gt;site作成&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ hugo new site dongri.github.io&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;テーマを取得&#34;&gt;テーマを取得&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd dongri.github.io&#xA;$ git clone --recursive https://github.com/spf13/hugoThemes themes&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;テーマ設定&#34;&gt;テーマ設定&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim config.toml&#xA;...&#xA;theme = &amp;#34;boro&amp;#34;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;post作成&#34;&gt;post作成&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ hugo new post/2016-01-17-hugo.md&#xA;$ vim post/2016-01-17-hugo.md&#xA;+++&#xA;date = &amp;#34;2016-01-17T15:20:15+09:00&amp;#34;&#xA;title = &amp;#34;Hugo&amp;#34;&#xA;tags = [&amp;#34;blog&amp;#34;]&#xA;+++&#xA;&#xA;hogehoge&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;サーバー起動して確認&#34;&gt;サーバー起動して確認&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ hugo server -w&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;github-pagesにデプロイ&#34;&gt;github pagesにデプロイ&lt;/h3&gt;&#xA;&lt;p&gt;hugo siteをrepoAにして、publicをsubtreeで username.github.io にして毎回pushする。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;deploy.sh&lt;/code&gt; を作成&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash&#xA;&#xA;echo -e &amp;#34;Deploying updates to GitHub...&amp;#34;&#xA;&#xA;# Build the project.&#xA;hugo&#xA;&#xA;# Add changes to git.&#xA;git add -A&#xA;&#xA;# Commit changes.&#xA;msg=&amp;#34;rebuilding site `date`&amp;#34;&#xA;if [ $# -eq 1 ]&#xA;  then msg=&amp;#34;$1&amp;#34;&#xA;fi&#xA;git commit -m &amp;#34;$msg&amp;#34;&#xA;&#xA;# Push source and build repos.&#xA;git push origin master&#xA;git subtree push --prefix=public git@github.com:dongri/dongri.github.io.git master&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Android Stagefright</title>
      <link>https://dongri.github.io/2015/07/android-stagefright/</link>
      <pubDate>Tue, 28 Jul 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/07/android-stagefright/</guid>
      <description>&lt;p&gt;詳しいことはこちら。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://jp.techcrunch.com/2015/07/28/20150727nasty-bug-lets-hackers-into-nearly-any-android-phone-using-nothing-but-a-message/&#34;&gt;Androidに最悪の脆弱性発見―ビデオメッセージを受信するだけでデバイスが乗っ取られる&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ということで、まずSIMを抜いてOSのバージョンアップするようにした。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://plus.google.com/+CyanogenMod/posts/7iuX21Tz7n8&#34;&gt;CyanogenMod: Recent Stagefright issues&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;zip-fileダウンロードしてインストール&#34;&gt;Zip Fileダウンロードしてインストール&lt;/h3&gt;&#xA;&lt;p&gt;こちらから最新版cm-12.1をダウンロード。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://download.cyanogenmod.org/?device=bacon&#34;&gt;https://download.cyanogenmod.org/?device=bacon&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ adb push cm-12.1-20150728-NIGHTLY-bacon.zip /sdcard/&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;TWRPでinstallを選択して、cm-12.1-20150728-NIGHTLY-bacon.zipを選択してインストール&lt;/p&gt;&#xA;&lt;h3 id=&#34;google-appsインストール&#34;&gt;Google Appsインストール&lt;/h3&gt;&#xA;&lt;p&gt;CMではデフォルトでGoogle Apps入ってないので、追加でインストールする。&#xA;こちらからarmバージョンをダウンロードする。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cgapps/vendor_google&#34;&gt;https://github.com/cgapps/vendor_google&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ adb push gapps-5.1-arm-2015-07-17-13-29.zip /sdcard/&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;TWRPでinstallを選択して、gapps-5.1-arm-2015-07-17-13-29.zipを選択してインストール&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goodbye Heroku</title>
      <link>https://dongri.github.io/2015/05/goodbye-heroku/</link>
      <pubDate>Mon, 11 May 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/05/goodbye-heroku/</guid>
      <description>&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;これが2007年同時のherokuでした。エディタ使わずブラウザでコード書いてSaveするとRailsが動く！素晴らしい！&lt;/p&gt;&#xA;&lt;p&gt;その後gitが流行り始めgit pushでデプロイできるようになりましたね。heroku buttonも出てOne Clickでデプロイできるようになったり。&lt;/p&gt;&#xA;&lt;p&gt;2007年から今まで使ってて、Privateのプロジェクトも一時には会社のプロジェクトにも使いました。&lt;/p&gt;&#xA;&lt;p&gt;初めはRubyだけだったのが、今はjava, scala, php, python, nodejs, goまでサポートしてます。最近はdockerもサポートするので、言語問わなくデプロイできちゃいますね。&lt;/p&gt;&#xA;&lt;p&gt;herokuの特徴と言えばとりあえず動かせるを場を提供する。そのかわりファイルアップロードできない、一定時間でスリープ、などいろいろ制限されるけど、sandboxとしては十分で便利なプラットフォームです。&lt;/p&gt;&#xA;&lt;p&gt;自分のリポジトリ数えてみたらびっくりしました。50個近くのアプリがデプロイされてました。(ほとんどがゴミ w w w)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.heroku.com/archives/2015/5/7/new-dyno-types-public-beta&#34;&gt;https://blog.heroku.com/archives/2015/5/7/new-dyno-types-public-beta&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;こんなので自分の遊びがなくなりました。$7 払えないわけではない。しかし昔みたいにとりあえずherokuみたいな感じにはなれない。&lt;/p&gt;&#xA;&lt;p&gt;herokuの代わりのものを Google Cloud, AWS も検討してみましたが、結局は DigitalOceanでサーバー立てて、&lt;a href=&#34;https://github.com/progrium/dokku&#34;&gt;dokku&lt;/a&gt; 入れて自分専用の遊び場を作ることにしました。&lt;/p&gt;&#xA;&lt;p&gt;今のところ4GBでnode, rails, goなど10個のcontainer立ち上げても問題なさそうです。&lt;/p&gt;&#xA;&lt;p&gt;heroku長い間お世話になりました！&lt;/p&gt;&#xA;&lt;p&gt;Goodbye! Heroku!&lt;/p&gt;</description>
    </item>
    <item>
      <title>OnePlus One</title>
      <link>https://dongri.github.io/2015/04/oneplus-one/</link>
      <pubDate>Tue, 14 Apr 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/04/oneplus-one/</guid>
      <description>&lt;h3 id=&#34;1-bootloader-unlock&#34;&gt;1. Bootloader Unlock&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ adb reboot bootloader&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CyanogenMod Logoが出る&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ fastboot oem unlock&#xA;...&#xA;OKAY [  0.005s]&#xA;finished. total time: 0.005s&#xA;$  &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2-install-twrp&#34;&gt;2. Install TWRP&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://dl.twrp.me/bacon/&#34;&gt;http://dl.twrp.me/bacon/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;twrp-2.8.6.0-bacon.img ダウンロード&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ adb reboot bootloader&#xA;&#xA;$ fastboot flash recovery twrp-2.8.6.0-bacon.img&#xA;target reported max download size of 536870912 bytes&#xA;sending &amp;#39;recovery&amp;#39; (10180 KB)...&#xA;OKAY [  0.323s]&#xA;writing &amp;#39;recovery&amp;#39;...&#xA;OKAY [  0.132s]&#xA;finished. total time: 0.455s&#xA;&#xA;$ fastboot reboot&#xA;rebooting...&#xA;&#xA;finished. total time: 0.005s&#xA;$&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;強制的にtwrp起動する&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ fastboot boot twrp-2.8.6.0-bacon.img&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-wipe&#34;&gt;3. Wipe&lt;/h3&gt;&#xA;&lt;p&gt;電源ボタンとボリュームダウンボタンを同時に押してTWRPを起動する。&#xA;TWRP起動したらwipeを選択して全ての削除する！&lt;/p&gt;</description>
    </item>
    <item>
      <title>OxygenOS</title>
      <link>https://dongri.github.io/2015/04/oxygenos/</link>
      <pubDate>Sun, 05 Apr 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/04/oxygenos/</guid>
      <description>&lt;p&gt;(下に追記あり)&lt;/p&gt;&#xA;&lt;p&gt;昨日出たOxygenOS 1.0.0について簡単にメモでも残そうかと思って書いた。&lt;/p&gt;&#xA;&lt;p&gt;結論から言うと、OxygenOSはやめてCyanogenmod 12Sにした。&lt;/p&gt;&#xA;&lt;p&gt;April 3 2015&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.oneplus.net/2015/04/oxygenos-is-here-2/&#34;&gt;OxygenOS is Here&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://oneplus.net/oxygenos&#34;&gt;https://oneplus.net/oxygenos&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://forums.oneplus.net/threads/oxygenos-is-here-installation-guide.289398/&#34;&gt;Installation Guide&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;インストールの流れは&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Bootloader Unlock&lt;/li&gt;&#xA;&lt;li&gt;TWRPをインストール&lt;/li&gt;&#xA;&lt;li&gt;oxygenos_1.0.0.flashable.zipを実機に転送&lt;/li&gt;&#xA;&lt;li&gt;TWRPでzip指定してインストール&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;コマンドは以下のようになる&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ adb reboot bootloader&#xA;$ fastboot oem unlock&#xA;$ fastboot flash recovery ***.img&#xA;$ fastboot reboot&#xA;or&#xA;$ fastboot boot ***.img&#xA;&#xA;$ adb push oxygenos_1.0.0.flashable.zip /sdcard/&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上の手順で既存OnePlus OneのCyanogenmod 11SからOxygenOSにはアップグレードしたことは成功したが、&#xA;人によって、まっさらな状態で綺麗にインストールしたいですよね（私だけ？）&lt;/p&gt;&#xA;&lt;p&gt;で、TWRPで全てのデータ削除して、0からOxygenOSをインストールしてみた。結果やばいことになった。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;そもそもステータスバー出て来ない。&lt;/li&gt;&#xA;&lt;li&gt;画面が真っ黒で壁紙設定できない。&lt;/li&gt;&#xA;&lt;li&gt;戻るボタン以外他のボタン効かない。&lt;/li&gt;&#xA;&lt;li&gt;ソフトボタンの表示設定しても出て来ない。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;２，３回インストールし直しても結果は同じだった。推測だが、既存OSからOxygenOSにアップグレードはサポートするけど、&#xA;クリーンインストールはサポートしてないかという疑惑。&lt;/p&gt;&#xA;&lt;p&gt;上で使い物にならなかったので、Cyanogenmodに頼るしかない。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://download.cyanogenmod.org/?device=bacon&amp;amp;type=nightly&#34;&gt;http://download.cyanogenmod.org/?device=bacon&amp;amp;type=nightly&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;2015-04-04 04:19:52の最新版があったので、ダウンロードしてインストール。&lt;/p&gt;&#xA;&lt;p&gt;これで、綺麗な状態で綺麗にインストール出来たわけだが、CyanogenMod IncとGoogleの関係上CyanogenModにGoogle系appsを入れちゃだめなので、別途インストールするしかない。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://wiki.cyanogenmod.org/w/Google_Apps&#34;&gt;Google Apps&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ここでもよいだが、若干古い感じがする。ググって最新版をダウンロードしてインストール。&lt;/p&gt;&#xA;&lt;p&gt;その後Cyanogenmod 12Sの上にOxygenOSをインストールしてみてもダメだった。&lt;/p&gt;&#xA;&lt;p&gt;ということで、しばらくはOxygenOSは使わないことにした。&lt;/p&gt;&#xA;&lt;p&gt;以上、私の端末で起きたことでした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ghost On Heroku</title>
      <link>https://dongri.github.io/2015/02/ghost-on-heroku/</link>
      <pubDate>Tue, 17 Feb 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/02/ghost-on-heroku/</guid>
      <description>&lt;p&gt;Ghostをherokuにデプロイしてみた。&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;以下はあくまでの自分の環境で、nodeとpostgresなど一通りの開発環境は整った環境です。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;ghostをローカルで動かしてみる&#34;&gt;Ghostをローカルで動かしてみる&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd /path/to/ghost/folder/&#xA;$ npm install --production&#xA;&#xA;$ npm start&#xA;$ open http://localhost:2368&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;herokuにpg-addon追加&#34;&gt;herokuにpg addon追加&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ heroku addons:add heroku-postgresql:dev&#xA;&#xA;$ heroku config&#xA;DATABASE_URL:                 postgres://{username}:{password}@ec2-***.compute-1.amazonaws.com:5432/{database}&#xA;HEROKU_POSTGRESQL_PURPLE_URL: postgres://{username}:{password}@ec2-***.compute-1.amazonaws.com:5432/{database}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;packagejson-修正&#34;&gt;package.json 修正&lt;/h2&gt;&#xA;&lt;p&gt;package.jsonのdependenciesにpg追加。バージョンは固定にしたほうがいいかも。。。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;dependencies&amp;#34;: {&#xA;  ....,&#xA;  &amp;#34;pg&amp;#34;: &amp;#34;4.2.0&amp;#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;configjs-修正&#34;&gt;config.js 修正&lt;/h2&gt;&#xA;&lt;p&gt;以下の部分をproductionのところに設定する。databaseの部分は上のDATABASE_URLのところ参照&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;database: {&#xA;  client: &amp;#39;postgres&amp;#39;,&#xA;  connection: {&#xA;        host: &amp;#39;ec2-***.compute-1.amazonaws.com&amp;#39;,&#xA;        user: &amp;#39;{username}&amp;#39;,&#xA;        password: &amp;#39;{password}&amp;#39;,&#xA;        database: &amp;#39;{database}&amp;#39;,&#xA;        port: &amp;#39;5432&amp;#39;&#xA;  }&#xA;},&#xA;&#xA;server: {&#xA;    host: &amp;#39;0.0.0.0&amp;#39;,&#xA;    port: process.env.PORT&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;procfileファイル追加&#34;&gt;Procfileファイル追加&lt;/h2&gt;&#xA;&lt;p&gt;herokuにnodejsアプリをデプロイした人にはわかると思うがProfileを作成&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim Procfile&#xA;web: node index.js --production&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;git-remote-push&#34;&gt;git remote, push&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git init&#xA;$ git remote add origin git@heroku.com:{app}.git&#xA;$ git add .&#xA;$ git commit -m &amp;#34;Ghost&amp;#34;&#xA;$ git push origin master&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;debug&#34;&gt;Debug&lt;/h2&gt;&#xA;&lt;p&gt;heroku上でApplication Error!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Google OAuth2</title>
      <link>https://dongri.github.io/2015/02/google-oauth2/</link>
      <pubDate>Mon, 16 Feb 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/02/google-oauth2/</guid>
      <description>&lt;p&gt;Google OAuth2のトークンを手動で取得メモ。通常はWebアプリはブラウザで取得してトークンとか保存すればいいのだが、&#xA;hubot scriptでcalendar情報とか取得したい場合は、そうはいかない。&lt;/p&gt;&#xA;&lt;h2 id=&#34;クライアントid作成&#34;&gt;クライアントID作成&lt;/h2&gt;&#xA;&lt;p&gt;予めGoogle Developer Console画面で、クライアントIDを作成&#xA;&lt;a href=&#34;https://console.developers.google.com/project&#34;&gt;https://console.developers.google.com/project&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;code-取得&#34;&gt;code 取得&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://accounts.google.com/o/oauth2/auth&#xA;?client_id={client_id}&#xA;&amp;amp;redirect_uri={callback_url}&#xA;&amp;amp;scope={scope}&#xA;&amp;amp;response_type=code&#xA;&amp;amp;approval_prompt=force&#xA;&amp;amp;access_type=offline&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;scopeは &lt;a href=&#34;https://www.googleapis.com/auth/calendar.readonly&#34;&gt;https://www.googleapis.com/auth/calendar.readonly&lt;/a&gt; など&lt;/p&gt;&#xA;&lt;p&gt;GETで上のURLを叩く。認証画面が開き、承認すると、指定したcallback_urlにcodeが返ってくる。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{callback_url}?code=4/W30HqfsDKmamqdW*****************&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;access_token-refresh_token-取得&#34;&gt;access_token, refresh_token 取得&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl&#xA;-d client_id={client_id}&#xA;-d client_secret={client_secret}&#xA;-d redirect_uri={callback_url}&#xA;-d grant_type=authorization_code&#xA;-d code={code} https://accounts.google.com/o/oauth2/token&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以下のJSON結果が返ってくる&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{&#xA;  &amp;#34;access_token&amp;#34; : &amp;#34;{access_token}&amp;#34;,&#xA;  &amp;#34;token_type&amp;#34; : &amp;#34;Bearer&amp;#34;,&#xA;  &amp;#34;expires_in&amp;#34; : 3600,&#xA;  &amp;#34;refresh_token&amp;#34; : &amp;#34;{refresh_token}&amp;#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;access_tokenの情報を確認してみる。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://www.googleapis.com/oauth2/v1/tokeninfo?access_token={access_token}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;アクセスする度にexpires_inが減って行くのがわかる。0になると、access_tokenは失効されるので、使えない。&lt;/p&gt;&#xA;&lt;h2 id=&#34;新しいaccess_tokenを取得&#34;&gt;新しいaccess_tokenを取得&lt;/h2&gt;&#xA;&lt;p&gt;expires_inで有効期限切れるまえに以下のPOSTで新しいaccess_tokenを取得&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl&#xA;-d client_id={client_id}&#xA;-d client_secret={client_secret}&#xA;-d refresh_token={refresh_token}&#xA;-d grant_type=refresh_token https://accounts.google.com/o/oauth2/token&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上の結果、新しいexpires_inが3600の新しいaccess_tokenが返ってくる。&lt;/p&gt;&#xA;&lt;p&gt;3600秒以内にaccess_tokenを更新して使えばOK!&lt;/p&gt;</description>
    </item>
    <item>
      <title>new vs make</title>
      <link>https://dongri.github.io/2015/02/new-vs-make/</link>
      <pubDate>Mon, 09 Feb 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/02/new-vs-make/</guid>
      <description>&lt;h2 id=&#34;new&#34;&gt;new&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://golang.org/pkg/builtin/#new&#34;&gt;http://golang.org/pkg/builtin/#new&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func new(Type) *Type&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;組み込み関数 new はメモリの割り当て、第一引数は型であり、値ではない。戻り値はポインタである。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;make&#34;&gt;make&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://golang.org/pkg/builtin/#make&#34;&gt;http://golang.org/pkg/builtin/#make&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func make(Type, size IntegerType) Type&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;組み込み関数 make は slice, map, chan型のメモリ割り当てとオブジェクトを初期化する。&lt;/li&gt;&#xA;&lt;li&gt;new と似ている、第一に引数は型であり、値ではない。new との違いは、make の戻り値はポインタではなく、値である。第一引数の型による。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;まとめ&#34;&gt;まとめ&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;new の役割はポインタの処理機か(*T)。make の役割は slice, map, chan 初期化かつ引用を戻す(T)。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main&#xA;&#xA;import &amp;#34;fmt&amp;#34;&#xA;&#xA;func main() {&#xA;  i := new(int)&#xA;  fmt.Println(&amp;amp;i)&#xA;  fmt.Println(*i)&#xA;  *i = 1&#xA;  fmt.Println(*i)&#xA;&#xA;  mySlice := make([]int, 10, 100)&#xA;  fmt.Println(mySlice)&#xA;  mySlice[2] = 2&#xA;  fmt.Println(mySlice)&#xA;&#xA;  myMap := make(map[string]string)&#xA;  fmt.Println(myMap)&#xA;  myMap[&amp;#34;Android&amp;#34;] = &amp;#34;OnePlus&amp;#34;&#xA;  myMap[&amp;#34;iOS&amp;#34;] = &amp;#34;iPhone&amp;#34;&#xA;  fmt.Println(myMap)&#xA;&#xA;  myChan := make(chan int, 2)&#xA;  myChan &amp;lt;- 1&#xA;  myChan &amp;lt;- 2&#xA;  fmt.Println(myChan)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Birthday</title>
      <link>https://dongri.github.io/2015/02/birthday/</link>
      <pubDate>Tue, 03 Feb 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/02/birthday/</guid>
      <description>&lt;p&gt;先月にFacebookの誕生日をOnly Meに設定して、誰も知らないように設定したのが始まり。&lt;/p&gt;&#xA;&lt;p&gt;今までは誕生日になると一日中、Facebookの友達から「誕生日おめでとう！」「Happy Birthday!」「생일축하해요」などのメッセージでnotificationが止まらない。&#xA;そして、キリの良い時に、全てのメッセージにLikeと「ありがとうございます！」とコメントを残す。で終わり。なんの感情も入ってない。。。&lt;/p&gt;&#xA;&lt;p&gt;今年はあえて見えないようにしてみた結果どうなったか？&lt;/p&gt;&#xA;&lt;p&gt;朝からWechatで祝いメッセージが来たり、&#xA;mixi経由でスタバックスのギフトカード送ってもらって一緒にスタバに行ったり、&#xA;Twitterで「今日誕生日って本当？Google Nowがそう言ってるけど」、&#xA;Facebookメッセンジャーで「誕生日おめでとうございます！」「どうやって知った？」「Skypeからreminderが来てね w」、&#xA;Google+から「생일이에요? 축하해요」だったり、とにかく意外なところから。&lt;/p&gt;&#xA;&lt;p&gt;一つ一つのメッセージが嬉しかった。一人一人が親しい友人だから！&lt;/p&gt;&#xA;&lt;p&gt;Facebookは隠せたけど、社内カレンダーの誕生日は消せなかったので、会社から素敵な誕生日ケーキで祝ってもらった。&#xA;同僚のみなさん、ありがとうございました！&lt;/p&gt;</description>
    </item>
    <item>
      <title>GHOST (CVE-2015-0235)</title>
      <link>https://dongri.github.io/2015/01/ghost-cve-2015-0235/</link>
      <pubDate>Wed, 28 Jan 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/01/ghost-cve-2015-0235/</guid>
      <description>&lt;p&gt;クラウドセキュリティ企業Qualysの研究者が、Linux GNU Cライブラリ（glibc）に深刻なセキュリティホールである「GHOST」（CVE-2015-0235）を発見したらしい。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.openwall.com/lists/oss-security/2015/01/27/9&#34;&gt;http://www.openwall.com/lists/oss-security/2015/01/27/9&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;このセキュリティホールは、glibc-2.2（2000年11月10日にリリース）を使用してビルドされたすべてのLinuxシステムに存在する。Qualysによれば、このバグは実際には、2013年5月21日にリリースされた、glibc-2.17とglibc-2.18の間のバグフィックスで修正されている。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;ポイントはglibcのバージョンで判断するのではなく、パッチを当てたかどうか。&lt;/p&gt;&#xA;&lt;h3 id=&#34;対応前&#34;&gt;対応前&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;/lib/libc.so.6&lt;/li&gt;&#xA;&lt;li&gt;/lib64/libc.so.6&lt;/li&gt;&#xA;&lt;li&gt;/lib/i386-linux-gnu/libc.so.6&lt;/li&gt;&#xA;&lt;li&gt;/lib/x86_64-linux-gnu/libc.so.6&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ /lib64/libc.so.6&#xA;GNU C Library stable release version 2.12, by Roland McGrath et al.&#xA;Copyright (C) 2010 Free Software Foundation, Inc.&#xA;This is free software; see the source for copying conditions.&#xA;There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A&#xA;PARTICULAR PURPOSE.&#xA;Compiled by GNU CC version 4.4.7 20120313 (Red Hat 4.4.7-4).&#xA;Compiled on a Linux 2.6.32 system on 2014-08-29.&#xA;Available extensions:&#xA;The C stubs add-on version 2.1.2.&#xA;crypt add-on version 2.1 by Michael Glad and others&#xA;GNU Libidn by Simon Josefsson&#xA;Native POSIX Threads Library by Ulrich Drepper et al&#xA;BIND-8.2.3-T5B&#xA;RT using linux kernel aio&#xA;libc ABIs: UNIQUE IFUNC&#xA;For bug reporting instructions, please see:&#xA;&amp;lt;http://www.gnu.org/software/libc/bugs.html&amp;gt;.&#xA;&#xA;$&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;対応&#34;&gt;対応&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo yum clean all&#xA;&#xA;$ sudo yum update glibc&#xA;or&#xA;$ sudo yum update&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;対応後&#34;&gt;対応後&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ /lib64/libc.so.6&#xA;GNU C Library stable release version 2.12, by Roland McGrath et al.&#xA;Copyright (C) 2010 Free Software Foundation, Inc.&#xA;This is free software; see the source for copying conditions.&#xA;There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A&#xA;PARTICULAR PURPOSE.&#xA;Compiled by GNU CC version 4.4.7 20120313 (Red Hat 4.4.7-11).&#xA;Compiled on a Linux 2.6.32 system on 2015-01-27.&#xA;Available extensions:&#xA;The C stubs add-on version 2.1.2.&#xA;crypt add-on version 2.1 by Michael Glad and others&#xA;GNU Libidn by Simon Josefsson&#xA;Native POSIX Threads Library by Ulrich Drepper et al&#xA;BIND-8.2.3-T5B&#xA;RT using linux kernel aio&#xA;libc ABIs: UNIQUE IFUNC&#xA;For bug reporting instructions, please see:&#xA;&amp;lt;http://www.gnu.org/software/libc/bugs.html&amp;gt;.&#xA;&#xA;$&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;何が変わった&#34;&gt;何が変わった？&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Compiled on a Linux 2.6.32 system on 2015-01-27.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;サーバー再起動&#34;&gt;サーバー再起動&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo reboot&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CentOS 6.5 x64 (digitalocean) での作業でした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Carthage</title>
      <link>https://dongri.github.io/2015/01/carthage/</link>
      <pubDate>Thu, 15 Jan 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/01/carthage/</guid>
      <description>&lt;p&gt;OAuthSwiftをCarthageに対応したので、メモとして残します。&lt;/p&gt;&#xA;&lt;h3 id=&#34;carthageってなんなの&#34;&gt;Carthageってなんなの？&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;https://github.com/Carthage/Carthage&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;「カルタゴ」と読んで、Swift対応したライブラリ管理ツールです。&lt;/p&gt;&#xA;&lt;p&gt;インストール、使い方はgithubページ見ればわかると思います。&lt;/p&gt;&#xA;&lt;p&gt;基本的な使い方は Cartfile 作成して使いたいgithubのライブラリをリストで書いてから&#xA;「carthage update」するとCarthage/Buildの下に ******.framework ファイルが出来上がるので&#xA;それをプロジェクトにドラッグアンドドロップして入れる。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim Cartfile&#xA;github &amp;#34;dongri/OAuthSwift&amp;#34; ~&amp;gt; 0.1.7&#xA;&#xA;$ carthage update&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;既存のライブラリcarthage対応&#34;&gt;既存のライブラリCarthage対応&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Targets に 新しい Cocoa Touch Framework Schemeを作る。Shared になってること確認。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://farm8.staticflickr.com/7583/15666092073_76b41b17b1.jpg&#34; alt=&#34;Scheme Shared&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;既存ライブラリを新しいTargetに移す&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Swift Compiler設定&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8598/16098635750_0c10d33669.jpg&#34; alt=&#34;Swift Compiler&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Compile Sourcesに必要なSwiftファイル追加&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8561/16100158557_400084b6c6.jpg&#34; alt=&#34;Swift Compiler&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Schemeを新しいtargetにしてビルドする。（iOS Deviceにして）&#xA;エラーになったら自己解決&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;carthage buildしてみる。githubに上げる前に、ローカルでビルとして、正常に ******.framework が出来上がるのを確認。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ carthage build --no-skip-current&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;githubに上げる。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git tag v0.1.0&#xA;$ git push origin v0.1.0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上でcarthage対応完了。&lt;/p&gt;&#xA;&lt;p&gt;対応したプロジェクトがこれ。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/OAuthSwift&#34;&gt;https://github.com/dongri/OAuthSwift&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Migrating to Cedar-14 Stack</title>
      <link>https://dongri.github.io/2015/01/migrating-to-cedar-14-stack/</link>
      <pubDate>Sat, 10 Jan 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/01/migrating-to-cedar-14-stack/</guid>
      <description>&lt;p&gt;bamboo-mri-1.9.2 stack 下岗了。&lt;/p&gt;&#xA;&lt;p&gt;Migrating to the Celadon Cedar-14 Stack&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ heroku stack:set cedar-14&#xA;stack set, next release on production-app will use cedar-14&#xA;Run `git push heroku master` to create a new release on cedar-14&#xA;&#xA;$ git commit --allow-empty -m &amp;#34;Upgrading to Cedar-14&amp;#34;&#xA;[master 973c3f7] Upgrading to Cedar-14&#xA;&#xA;$ git push heroku master&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Revel on Heroku</title>
      <link>https://dongri.github.io/2014/12/revel-on-heroku/</link>
      <pubDate>Thu, 11 Dec 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/12/revel-on-heroku/</guid>
      <description>&lt;p&gt;RevelをHerokuにデプロイしてみる。&lt;/p&gt;&#xA;&lt;h3 id=&#34;事前確認&#34;&gt;事前確認&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ echo $GOPATH&#xA;/Users/dongri/go&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;revelプロジェクト作成&#34;&gt;Revelプロジェクト作成&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ revel new team&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;↑で $GOPATH/src/にteamフォルダが出来上がる&lt;/p&gt;&#xA;&lt;h3 id=&#34;ローカルで実行してみる&#34;&gt;ローカルで実行してみる&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ revel run team&#xA;&#xA;$ open http://localhost:9000&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;herokuにbuildpackでデプロイ&#34;&gt;herokuにbuildpackでデプロイ&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ heroku create -b https://github.com/robfig/heroku-buildpack-go-revel.git&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;heroku画面でアプリの名前を変更する&#34;&gt;heroku画面でアプリの名前を変更する。&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git remote -v&#xA;$ git retemo rm origin&#xA;$ git remote add origin git@heroku.com:[app].git&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;godirファイル作成&#34;&gt;.godirファイル作成&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ pwd&#xA;/Users/dongri/go/src/team&#xA;$ echo &amp;#34;team&amp;#34; &amp;gt; .godir&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;デプロイ&#34;&gt;デプロイ&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git add .&#xA;$ git commit -m &amp;#34;hoge&amp;#34;&#xA;$ git push origin master&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上で完了&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker Commands</title>
      <link>https://dongri.github.io/2014/11/docker-commands/</link>
      <pubDate>Sat, 29 Nov 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/11/docker-commands/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Installing Docker on Mac OS X&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/installation/mac/&#34;&gt;https://docs.docker.com/installation/mac/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;boot2ocker start&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ boot2docker start&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;attach&lt;/strong&gt; ( Attach to a running container )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker ps&#xA;CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES&#xA;adead7a08f15        ubuntu:14.04        /bin/bash           About an hour ago   Up 27 minutes                           myubuntu            &#xA;&#xA;$ docker attach myubuntu&#xA;root@adead7a08f15:/#&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;build&lt;/strong&gt; ( Build an image from a Dockerfile )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim Dockerfile&#xA;FROM centos:centos6&#xA;MAINTAINER Dongri Jin&#xA;&#xA;RUN yum update -y &amp;amp;&amp;amp; \&#xA;    rpm --import http://nginx.org/keys/nginx_signing.key &amp;amp;&amp;amp; \&#xA;    yum install -y http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm &amp;amp;&amp;amp; \&#xA;    yum install -y nginx&#xA;&#xA;EXPOSE 80&#xA;ENTRYPOINT [&amp;#34;/usr/sbin/nginx&amp;#34;, &amp;#34;-g&amp;#34;, &amp;#34;daemon off;&amp;#34;]&#xA;&#xA;$ docker build -t ngix .&#xA;&#xA;$ docker images&#xA;&#xA;$ docker run -d -p 80:80 nginx&#xA;&#xA;$ VBoxManage controlvm &amp;#34;boot2docker-vm&amp;#34; natpf1 &amp;#34;nginx,tcp,127.0.0.1,8080,,80&amp;#34;&#xA;&#xA;$ open http://localhost:8080&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;commit&lt;/strong&gt; ( Create a new image from a container&amp;rsquo;s changes )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker run -i -t -d nginx                       &#xA;ea21748dddd379d8959373cd366b1eb10f4193a68c530c3539fe110b0531bd22&#xA;&#xA;$ docker  docker ps&#xA;CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES&#xA;ea21748dddd3        nginx:latest        /usr/sbin/nginx -g &amp;#39;   About an hour ago   Up 3 seconds        80/tcp              tender_fermi        &#xA;&#xA;$ docker commit ea21748dddd3 my-nginx&#xA;69f023fe647655f984afd0617dd1e65d8b9a2e5e551bac32af5e6436bfe3ac70&#xA;&#xA;$ docker images&#xA;REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE&#xA;my-nginx            latest              69f023fe6476        About an hour ago   267.8 MB&#xA;nginx               latest              9bc094d3c806        About an hour ago   267.8 MB&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;cp&lt;/strong&gt; ( Copy files/folders from a container&amp;rsquo;s filesystem to the host path )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker run -d nginx&#xA;69e4211b565349631845e984a5914688a250671764c98c959236fb53d059a709&#xA;&#xA;$ docker ps&#xA;CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES&#xA;69e4211b5653        nginx:latest        /usr/sbin/nginx -g &amp;#39;   About an hour ago   Up 1 seconds        80/tcp              distracted_curie    &#xA;&#xA;$ docker cp 69e4211b5653:/usr/share/nginx/html/index.html ./&#xA;&#xA;$ ls -l&#xA;total 16&#xA;-rw-r--r--  1 dongri  staff  332 Nov 29 17:41 Dockerfile&#xA;-rw-r--r--  1 dongri  staff  612 Sep 16 22:57 index.html&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;diff&lt;/strong&gt; ( Inspect changes on a container&amp;rsquo;s filesystem )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker ps&#xA;CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES&#xA;69e4211b5653        nginx:latest        /usr/sbin/nginx -g &amp;#39;   About an hour ago   Up 3 minutes        80/tcp              distracted_curie    &#xA;&#xA;$ docker diff 69e4211b5653&#xA;C /var&#xA;C /var/cache&#xA;C /var/cache/nginx&#xA;A /var/cache/nginx/client_temp&#xA;A /var/cache/nginx/fastcgi_temp&#xA;A /var/cache/nginx/proxy_temp&#xA;A /var/cache/nginx/scgi_temp&#xA;A /var/cache/nginx/uwsgi_temp&#xA;C /var/run&#xA;A /var/run/nginx.pid&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;events&lt;/strong&gt; ( Get real time events from the server )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker events&#xA;[2014-11-29 17:09:17 +0900 JST] d9860be76a657a: (from my-nginx:latest) create&#xA;[2014-11-29 17:09:17 +0900 JST] d9860be76a657a: (from my-nginx:latest) start&#xA;[2014-11-29 17:09:17 +0900 JST] d9860be76a657a: (from my-nginx:latest) die&#xA;[2014-11-29 17:09:42 +0900 JST] 94d8ff9c9b006b: (from nginx:latest) create&#xA;[2014-11-29 17:09:42 +0900 JST] 94d8ff9c9b006b: (from nginx:latest) start&#xA;[2014-11-29 17:10:19 +0900 JST] 94d8ff9c9b006b: (from nginx:latest) die&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;export&lt;/strong&gt; ( Stream the contents of a container as a tar archive)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker ps&#xA;CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES&#xA;69e4211b5653        nginx:latest        /usr/sbin/nginx -g &amp;#39;   About an hour ago   Up 9 minutes        80/tcp              distracted_curie    &#xA;&#xA;$ docker export 69e4211b5653 &amp;gt; nginx.tar&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;history&lt;/strong&gt; ( Show the history of an image )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker history nginx&#xA;IMAGE               CREATED             CREATED BY                                      SIZE&#xA;9bc094d3c806        About an hour ago   /bin/sh -c #(nop) ENTRYPOINT [/usr/sbin/nginx   0 B&#xA;bc8b862f52f2        About an hour ago   /bin/sh -c #(nop) EXPOSE map[80/tcp:{}]         0 B&#xA;6a7c1a5d6e92        About an hour ago   /bin/sh -c yum update -y &amp;amp;&amp;amp;     rpm --import    52.02 MB&#xA;7becd8731a8d        About an hour ago   /bin/sh -c #(nop) MAINTAINER Dongri Jin         0 B&#xA;70441cac1ed5        3 weeks ago         /bin/sh -c #(nop) ADD file:87e3d5074ec1720805   215.8 MB&#xA;5b12ef8fd570        8 weeks ago         /bin/sh -c #(nop) MAINTAINER The CentOS Proje   0 B&#xA;511136ea3c5a        17 months ago                                                       0 B&#xA;&#xA;$  &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;images&lt;/strong&gt; ( List images )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker images&#xA;REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE&#xA;my-nginx            latest              69f023fe6476        About an hour ago   267.8 MB&#xA;nginx               latest              9bc094d3c806        About an hour ago   267.8 MB&#xA;centos              centos6             70441cac1ed5        3 weeks ago         215.8 MB&#xA;ubuntu              14.04               c4ff7513909d        3 months ago        225.4 MB&#xA;ubuntu              latest              c4ff7513909d        3 months ago        225.4 MB&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;import&lt;/strong&gt; ( Create a new filesystem image from the contents of a tarball )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat nginx.tar | docker import - nginx:import                                                                                                                                                    254714ba37221092c47f22a886c7f7497ed65da53d42cf24a4f44e0054305af4&#xA;&#xA;$ docker images&#xA;REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE&#xA;nginx               import              254714ba3722        About an hour ago   242.8 MB&#xA;my-nginx            latest              69f023fe6476        About an hour ago   267.8 MB&#xA;nginx               latest              9bc094d3c806        About an hour ago   267.8 MB&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;info&lt;/strong&gt; ( Display system-wide information )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker info&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;inspect&lt;/strong&gt; ( Return low-level information on a container )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker inspect 69e4211b5653&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;kill&lt;/strong&gt; ( Kill a running container )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker ps                        &#xA;CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES&#xA;69e4211b5653        nginx:latest        /usr/sbin/nginx -g &amp;#39;   About an hour ago   Up 23 minutes       80/tcp              distracted_curie    &#xA;&#xA;$ docker kill 69e4211b5653&#xA;69e4211b5653&#xA;&#xA;$ docker ps&#xA;CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;load&lt;/strong&gt; ( Load an image from a tar archive )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker load &amp;lt; nginx.tar&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;login&lt;/strong&gt; ( Register or log in to the Docker registry server )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker login&#xA;Username: dongri&#xA;Password: ***&#xA;Email: ***@gmail.com&#xA;Login Succeeded&#xA;&#xA;$ docker pull ubuntu&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;logs&lt;/strong&gt; ( Fetch the logs of a container )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker logs 108233ba9a1d&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;port&lt;/strong&gt; ( Lookup the public-facing port that is NAT-ed to PRIVATE_PORT )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker run -d -p 80:80 nginx&#xA;108233ba9a1df0aa199a8392d052f3c0cd8e7929bdeff6d5fa52ac47a75aa603&#xA;&#xA;$ docker port 108233ba9a1d 80&#xA;0.0.0.0:80&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;pause&lt;/strong&gt; ( Pause all processes within a container )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker pause 108233ba9a1d&#xA;108233ba9a1d&#xA;&#xA;$ open http://localhost:8080&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;ps&lt;/strong&gt; ( List containers )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker ps&#xA;&#xA;$ docker ps -a&#xA;&#xA;$ docker ps -a -q&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;pull&lt;/strong&gt; ( Pull an image or a repository from a Docker registry server )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker pull golang:1.4rc1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;push&lt;/strong&gt; ( Push an image or a repository to a Docker registry server )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker run -i -t -d golang&#xA;921dc8b1555af7507f8669883724047b4cc114be0681a07f86def&#xA;&#xA;$ docker ps&#xA;CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS                   PORTS                NAMES&#xA;16f79ec35b99        golang:latest       /bin/bash              About an hour ago   Up 4 seconds                                  focused_newton      &#xA;108233ba9a1d        nginx:latest        /usr/sbin/nginx -g &amp;#39;   About an hour ago   Up 15 minutes (Paused)   0.0.0.0:80-&amp;gt;80/tcp   nostalgic_almeida   &#xA;&#xA;$ docker commit 16f79ec35b99 dongri/golang&#xA;da5a0042ad9ac478c38fc743c8f981f292a9aefd41ac54276a6617c319719ad1&#xA;&#xA;$ docker images&#xA;REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE&#xA;dongri/golang       latest              da5a0042ad9a        About an hour ago   448 MB&#xA;nginx               import              254714ba3722        About an hour ago   242.8 MB&#xA;my-nginx            latest              69f023fe6476        2 hours ago         267.8 MB&#xA;nginx               latest              9bc094d3c806        2 hours ago         267.8 MB&#xA;golang              1.4rc1              a9e27473d0f8        2 days ago          467.7 MB&#xA;golang              latest              ebd3fd90ae2e        2 days ago          448 MB&#xA;&#xA;$ docker push dongri/golang&#xA;The push refers to a repository [dongri/golang] (len: 1)&#xA;Sending image list&#xA;Pushing repository dongri/golang (1 tags)&#xA;511136ea3c5a: Image already pushed, skipping&#xA;36fd425d7d8a: Image already pushed, skipping&#xA;aaabd2b41e22: Image already pushed, skipping&#xA;cd9d7733886c: Image already pushed, skipp&#xA;da5a0042ad9a: Image successfully pushed&#xA;Pushing tag for rev [da5a0042ad9a] on {https://cdn-registry-1.docker.io/v1/repositories/dongri/golang/tags/latest}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;restart&lt;/strong&gt; ( Restart a running container )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker ps&#xA;CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS                   PORTS                NAMES&#xA;16f79ec35b99        golang:latest       /bin/bash              About an hour ago   Up 3 minutes                                  focused_newton      &#xA;108233ba9a1d        nginx:latest        /usr/sbin/nginx -g &amp;#39;   About an hour ago   Up 18 minutes (Paused)   0.0.0.0:80-&amp;gt;80/tcp   nostalgic_almeida   &#xA;&#xA;$ docker restart 16f79ec35b99&#xA;16f79ec35b99&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;rm&lt;/strong&gt; ( Remove one or more containers )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker ps -a&#xA;CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS&#xA;16f79ec35b99        golang:latest       /bin/bash              About an hour ago   Up 55 seconds&#xA;714a086c9e4d        golang:latest       /bin/bash              About an hour ago   Exited (1) 4 minutes ago&#xA;&#xA;$ docker rm 714a086c9e4d&#xA;714a086c9e4d&#xA;&#xA;$ docker ps -a          &#xA;CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS&#xA;16f79ec35b99        golang:latest       /bin/bash              About an hour ago   Up About a minute&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;rmi&lt;/strong&gt; ( Remove one or more images )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker images&#xA;REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE&#xA;dongri/golang       latest              da5a0042ad9a        About an hour ago   448 MB&#xA;nginx               import              254714ba3722        About an hour ago   242.8 MB&#xA;my-nginx            latest              69f023fe6476        2 hours ago         267.8 MB&#xA;&#xA;$ docker rmi 69f023fe6476&#xA;&#xA;$ docker images&#xA;REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE&#xA;dongri/golang       latest              da5a0042ad9a        About an hour ago   448 MB&#xA;nginx               import              254714ba3722        About an hour ago   242.8 MB&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;run&lt;/strong&gt; ( Run a command in a new container )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker run -d nginx&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;save&lt;/strong&gt; ( Save an image to a tar archive )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker images&#xA;REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE&#xA;dongri/golang       latest              da5a0042ad9a        About an hour ago   448 MB&#xA;nginx               import              254714ba3722        About an hour ago   242.8 MB&#xA;&#xA;$ docker save nginx &amp;gt; mynginx.tar&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;search&lt;/strong&gt; ( Search for an image on the Docker Hub )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker search dongri&#xA;NAME            DESCRIPTION   STARS     OFFICIAL   AUTOMATED&#xA;dongri/coreos                 2                    &#xA;dongri/node                   1                    &#xA;dongri/nginx                  0                    &#xA;dongri/redis                  0                    &#xA;dongri/golang                 0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;start&lt;/strong&gt; ( Start a stopped container )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker ps -a&#xA;CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS                           PORTS&#xA;108233ba9a1d        nginx:latest        /usr/sbin/nginx -g &amp;#39;   About an hour ago   Up 27 minutes (Paused)           0.0.0.0:80-&amp;gt;80/tcp&#xA;269367b4bd87        nginx:latest        /usr/sbin/nginx -g &amp;#39;   About an hour ago   Exited (-1) 28 minutes ago&#xA;&#xA;$ docker start 269367b4bd87&#xA;269367b4bd87&#xA;&#xA;$ docker ps&#xA;CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS                   PORTS                NAMES&#xA;108233ba9a1d        nginx:latest        /usr/sbin/nginx -g &amp;#39;   About an hour ago   Up 27 minutes (Paused)   0.0.0.0:80-&amp;gt;80/tcp   nostalgic_almeida   &#xA;269367b4bd87        nginx:latest        /usr/sbin/nginx -g &amp;#39;   About an hour ago   Up 2 seconds             80/tcp               kickass_perlman     &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;stop&lt;/strong&gt; ( Stop a running container )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker ps&#xA;CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS                   PORTS                NAMES&#xA;108233ba9a1d        nginx:latest        /usr/sbin/nginx -g &amp;#39;   About an hour ago   Up 27 minutes (Paused)   0.0.0.0:80-&amp;gt;80/tcp   nostalgic_almeida   &#xA;269367b4bd87        nginx:latest        /usr/sbin/nginx -g &amp;#39;   About an hour ago   Up 2 seconds             80/tcp               kickass_perlman     &#xA;&#xA;$ docker stop 269367b4bd87&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;tag&lt;/strong&gt; ( Tag an image into a repository )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker images&#xA;REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE&#xA;dongri/golang       latest              da5a0042ad9a        About an hour ago   448 MB&#xA;nginx               import              254714ba3722        About an hour ago   242.8 MB&#xA;&#xA;$ docker tag 254714ba3722 nginx:export&#xA;$ docker images&#xA;REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE&#xA;dongri/golang       latest              da5a0042ad9a        About an hour ago   448 MB&#xA;nginx               import              254714ba3722        About an hour ago   242.8 MB&#xA;nginx               export              254714ba3722        About an hour ago   242.8 MB&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;top&lt;/strong&gt; ( Lookup the running processes of a container )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker ps&#xA;CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS                   PORTS                NAMES&#xA;108233ba9a1d        9bc094d3c806        /usr/sbin/nginx -g &amp;#39;   About an hour ago   Up 38 minutes (Paused)   0.0.0.0:80-&amp;gt;80/tcp   nostalgic_almeida   &#xA;&#xA;$ docker top 108233ba9a1d&#xA;PID                 USER                COMMAND&#xA;1658                root                nginx: master process /usr/sbin/nginx -g daemon off;&#xA;1668                499                 nginx: worker process&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;unpause&lt;/strong&gt; ( Unpause a paused container )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker ps&#xA;CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS                   PORTS                NAMES&#xA;108233ba9a1d        9bc094d3c806        /usr/sbin/nginx -g &amp;#39;   About an hour ago   Up 38 minutes (Paused)   0.0.0.0:80-&amp;gt;80/tcp   nostalgic_almeida   &#xA;&#xA;$ docker unpause 108233ba9a1d&#xA;108233ba9a1d&#xA;&#xA;$ open http://localhost:8080&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;version&lt;/strong&gt; ( Show the Docker version information )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker version&#xA;Client version: 1.1.1&#xA;Client API version: 1.13&#xA;Go version (client): go1.2.1&#xA;Git commit (client): bd609d2&#xA;Server version: 1.1.2&#xA;Server API version: 1.13&#xA;Go version (server): go1.2.1&#xA;Git commit (server): d84a070&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;wait&lt;/strong&gt; ( Block until a container stops, then print its exit code )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker wait 108233ba9a1d&#xA;&#xA;$ docker stop 108233ba9a1d&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>github multiple accounts</title>
      <link>https://dongri.github.io/2014/11/github-multiple-accounts/</link>
      <pubDate>Tue, 18 Nov 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/11/github-multiple-accounts/</guid>
      <description>&lt;p&gt;ある事情により、githubに公開アカウントと秘密アカウントが必要になって、複数のアカウントを扱うようになりました。&lt;/p&gt;&#xA;&lt;h3 id=&#34;まず新しいsshキーの生成&#34;&gt;まず、新しいSSHキーの生成&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ssh-keygen -t rsa -C &amp;#34;yoda@gmail.com&amp;#34; -f id_rsa_secret&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;sshconfig-設定&#34;&gt;~/.ssh/config 設定&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim ~/.ssh/config&#xA;&#xA;############ Github ###############&#xA;Host github-secret&#xA;  User git&#xA;  Port 22&#xA;  HostName github.com&#xA;  IdentityFile ~/.ssh/id_rsa_secret&#xA;  TCPKeepAlive yes&#xA;  IdentitiesOnly yes&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;git-clone&#34;&gt;git clone&lt;/h3&gt;&#xA;&lt;p&gt;SSH clone URL: &lt;a href=&#34;mailto:git@github.com&#34;&gt;git@github.com&lt;/a&gt;:user/project.git の場合&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone git@github-secret:user/project.git&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;git-config&#34;&gt;git config&lt;/h3&gt;&#xA;&lt;p&gt;確認してみる。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git config --global user.name&#xA;$ git config --global user.email&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SSHキー違ってもこのままだと複数プロジェクトのauthor, committerがglobal設定になるので、変更する。&lt;/p&gt;&#xA;&lt;p&gt;git clone したあとのプロジェクトに入って&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git config --local user.name &amp;#34;Yoda&amp;#34;&#xA;$ git config --local user.email &amp;#34;yoda@gmail.com&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上です、複数のgithubを扱えるようになりました。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;user.name設定忘れるとご迷惑掛けする場合がございますので、忘れずに。。。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>tmux on yosemite</title>
      <link>https://dongri.github.io/2014/11/tmux-on-yosemite/</link>
      <pubDate>Fri, 14 Nov 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/11/tmux-on-yosemite/</guid>
      <description>&lt;p&gt;やっとYosemiteにした。&lt;/p&gt;&#xA;&lt;p&gt;自分の環境でちょっと動かなかった、ぶつかった問題をまとめてみた。&lt;/p&gt;&#xA;&lt;h3 id=&#34;homebrew&#34;&gt;homebrew&lt;/h3&gt;&#xA;&lt;p&gt;まずはこのエラー&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/opt/boxen/homebrew/bin/brew: line 26: /opt/boxen/homebrew/Library/brew.rb: Undefined error: 0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;brew.rbを修正&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;--- #!/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby -W0&#xA;+++ #!/System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby -W0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;brew-update&#34;&gt;brew update&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git add /opt/boxen/homebrew/Library/brew.rb&#xA;$ git commit -am &amp;#34;Fix ruby version&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;mysqlのバージョン固定する必要あるので&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ brew pin mysql&#xA;$ brew update&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;tmux&#34;&gt;tmux&lt;/h3&gt;&#xA;&lt;p&gt;tmuxからatom, gitx起動できない。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;LSOpenURLsWithRole() failed for the application /Applications/Atom.app with error -10810.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;reattach-to-user-namespace インストール&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ brew install reattach-to-user-namespace&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;tumx.conf に追加&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Fix LSOpenURLsWithRole() error on OS X. Requires reattach-to-user-namespace&#xA;# to be installed.&#xA;set-option -g default-command &amp;#34;which reattach-to-user-namespace &amp;gt; /dev/null &amp;amp;&amp;amp; reattach-to-user-namespace -l $SHELL || $SHELL&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(今さらだけど、Yosemiteキレイね！)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nexus5 Lollipop</title>
      <link>https://dongri.github.io/2014/11/nexus5-lollipop/</link>
      <pubDate>Thu, 13 Nov 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/11/nexus5-lollipop/</guid>
      <description>&lt;p&gt;数ヶ月間ずっとAndroid L Preview版入れて使ってたけど、今日やっとGoogleのデベロッパーサイトにNexus5のLollipop Factory Imageが現れたので、手動で入れてみた。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developers.google.com/android/nexus/images&#34;&gt;Factory Images for Nexus Devices&lt;/a&gt;&#xA;アクセスして、Nexus5用のimageファイルダウンロード。&lt;a href=&#34;https://dl.google.com/dl/android/aosp/hammerhead-lrx21o-factory-01315e08.tgz&#34;&gt;5.0 (LRX21O)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ tar -zxvf hammerhead-lrx21o-factory-01315e08.tgz&#xA;$ cd hammerhead-lrx21o&#xA;$ adb reboot bootloader&#xA;$ fastboot oem unlock&#xA;$ ./flash-all.sh&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上！&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pull APK</title>
      <link>https://dongri.github.io/2014/11/pull-apk/</link>
      <pubDate>Thu, 13 Nov 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/11/pull-apk/</guid>
      <description>&lt;p&gt;Androidにあるapkファイルを取り出す方法紹介。&lt;/p&gt;&#xA;&lt;p&gt;PlayStoreに「apk 抽出」アプリたくさんあるけど、あえてadb shellで取り出す。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ adb shell pm list packages -f | grep&#xA;package:/data/app/jp.naver.line.android-1/base.apk=jp.naver.line.android&#xA;package:/data/app/jp.linecorp.LINEMAPS-1/base.apk=jp.linecorp.LINEMAPS&#xA;&#xA;$ adb pull /data/app/jp.naver.line.android-1/base.apk ~/Desktop&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;取り出したapkファイルをインストールしてみる。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ adb install base.apk&#xA;7522 KB/s (22969465 bytes in 2.981s)&#xA;        pkg: /data/local/tmp/base.apk&#xA;Success&#xA;$ adb shell pm list packages -f | grep line&#xA;package:/data/app/jp.naver.line.android-1/base.apk=jp.naver.line.android&#xA;package:/data/app/jp.linecorp.LINEMAPS-1/base.apk=jp.linecorp.LINEMAPS&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;※ Lollipopからはroot化が困難になった模様&lt;/p&gt;</description>
    </item>
    <item>
      <title>cron debug</title>
      <link>https://dongri.github.io/2014/11/cron-debug/</link>
      <pubDate>Mon, 10 Nov 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/11/cron-debug/</guid>
      <description>&lt;p&gt;毎回ハマるのでメモしとく。&lt;/p&gt;&#xA;&lt;p&gt;コンソールでは正しく動くけど、crontabに記述すると動かない。&lt;/p&gt;&#xA;&lt;p&gt;調べてみる順番&lt;/p&gt;&#xA;&lt;p&gt;1.crondが動くか確認&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ps aux | grep crond&#xA;root     25500  0.0  0.0 119380  1256 ?        Ss   Sep10   2:29 crond&#xA;&#xA;$ /etc/init.d/crond status&#xA;crond (pid  25500) is running...&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.実行権限あるか確認してみる&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ls -l /var/cron/hoge.sh&#xA;-rwxr-xr-x  1 root   root     90 Nov 10 08:54 hoge.sh&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.ログを仕込んでみる&lt;/p&gt;&#xA;&lt;p&gt;標準出力は 1&lt;br&gt;&#xA;標準エラー出力は 2&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;0 5 * * * echo  &amp;#34;cron test&amp;#34; &amp;gt;&amp;gt; /home/dongri/cron-success.log 2&amp;gt;&amp;gt; /home/dongri/cron-error.log | mail -s &amp;#34;Cron Result&amp;#34; dongri@gmail.com&#xA;&#xA;0 5 * * * /var/cron/hoge.sh &amp;gt;&amp;gt; /home/dongri/cron-success.log 2&amp;gt;&amp;gt; /home/dongri/cron-error.log | mail -s &amp;#34;Cron Result&amp;#34; dongri@gmail.com&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;※ 「2&amp;gt;&amp;amp;1」の意味は2の出力先を、1の出力先と同じようにする&lt;/p&gt;</description>
    </item>
    <item>
      <title>Startup Recruiting</title>
      <link>https://dongri.github.io/2014/11/startup-recruiting/</link>
      <pubDate>Sun, 02 Nov 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/11/startup-recruiting/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://itokenv.com/archives/1147&#34;&gt;成長するスタートアップに必要なこと&lt;/a&gt; から抜粋。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;自分たちのカルチャーとの整合性が大事で、つまりカルチャーに合わない人というのは他の社員とも合わない。&lt;br&gt;&#xA;先日gitHubの創業者と話す機会があり、驚いたのが彼らは創業以来採用した人が1人も辞めていないということ。&lt;br&gt;&#xA;自分で辞めた人もいなければ、クビにした人もいないということで、どうやってそれを実現しているか？というと、とにかく優秀な人であることが大前提として、ビアテストというものをやっていて一緒に飲みに行ってまた次も飲みたくなるかどうか？というのを基準にしていると。&lt;br&gt;&#xA;一緒に飲みに行くのが嫌な人とは長く続けられないということだ。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;参考になるわ。飲むこと。あー、楽しかった。その人ともっと喋りたい、もっと飲もたい。延長線で一緒に働きたい。なるほど！&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang on heroku</title>
      <link>https://dongri.github.io/2014/10/golang-on-heroku/</link>
      <pubDate>Sat, 11 Oct 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/10/golang-on-heroku/</guid>
      <description>&lt;p&gt;今までGolangプロジェクトはGoogle App Engineにデプロイしたが、管理画面がいまだに&#xA;使い慣れてないのとAppEngine特有の癖があるので、やめてherokuにデプロイしてみた。&#xA;herokuも公式にはGolang対応してなくて、buildpackを使わないとダメ。&lt;/p&gt;&#xA;&lt;p&gt;herokuサポート言語&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://devcenter.heroku.com/categories/language-support&#34;&gt;https://devcenter.heroku.com/categories/language-support&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;buildpackはこちら&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kr/heroku-buildpack-go&#34;&gt;https://github.com/kr/heroku-buildpack-go&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;まずローカルでgoプロジェクトを作成して確認みる&#34;&gt;まずローカルでGoプロジェクトを作成して確認みる。&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd $GOPATH/src&#xA;&#xA;$ mkdir osakago&#xA;$ cd osakago&#xA;$ vim server.go&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;&#x9;&amp;#34;fmt&amp;#34;&#xA;&#x9;&amp;#34;net/http&amp;#34;&#xA;&#x9;&amp;#34;os&amp;#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;http.HandleFunc(&amp;#34;/&amp;#34;, hello)&#xA;&#x9;fmt.Printf(&amp;#34;Server listening on port %v ...\n&amp;#34;, os.Getenv(&amp;#34;PORT&amp;#34;))&#xA;&#x9;err := http.ListenAndServe(&amp;#34;:&amp;#34;+os.Getenv(&amp;#34;PORT&amp;#34;), nil)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;}&#xA;&#xA;func hello(res http.ResponseWriter, req *http.Request) {&#xA;&#x9;fmt.Fprintln(res, &amp;#34;hello, world&amp;#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ PORT=8080 go run server.go&#xA;Server listening on port 8080 ...&#xA;&#xA;$ curl -i localhost:8080&#xA;HTTP/1.1 200 OK&#xA;Date: Sat, 11 Oct 2014 05:04:01 GMT&#xA;Content-Length: 13&#xA;Content-Type: text/plain; charset=utf-8&#xA;&#xA;hello, world&#xA;$&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;バイナリ作成サーバー起動して確認&#34;&gt;バイナリ作成、サーバー起動して確認&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ go get&#xA;$ which osakago&#xA;/Users/you/go/bin/osakago&#xA;$ PORT=8080 osakago&#xA;$ curl -i localhost:8080&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;heroku側設定&#34;&gt;Heroku側設定&lt;/h3&gt;&#xA;&lt;p&gt;メールアドレスとか変わった場合とか認証がうまくいかない場合があるので、念の為loginしておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ShellShock</title>
      <link>https://dongri.github.io/2014/09/shellshock/</link>
      <pubDate>Sun, 28 Sep 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/09/shellshock/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;3日ほど経ちましたが、あのshellshockについて見かけた記事ををまとめてみた。&lt;/p&gt;&#xA;&lt;p&gt;当日は社内で二人で「楽しく」対応したが、ある意味面白かった。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;BASHの脆弱性でCGIスクリプトにアレさせてみました&lt;br&gt;&#xA;&lt;a href=&#34;http://www.walbrix.com/jp/blog/2014-09-bash-code-injection.html&#34;&gt;http://www.walbrix.com/jp/blog/2014-09-bash-code-injection.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;先程から騒ぎになっているbashの脆弱性について&lt;br&gt;&#xA;&lt;a href=&#34;http://blog.ueda.asia/?p=3967&#34;&gt;http://blog.ueda.asia/?p=3967&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;bashの脆弱性(CVE-2014-6271) #ShellShock の関連リンクをまとめてみた&lt;br&gt;&#xA;&lt;a href=&#34;http://d.hatena.ne.jp/Kango/20140925/1411612246&#34;&gt;http://d.hatena.ne.jp/Kango/20140925/1411612246&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;bashの脆弱性がヤバすぎる件&lt;br&gt;&#xA;&lt;a href=&#34;https://x86-64.jp/blog/CVE-2014-6271&#34;&gt;https://x86-64.jp/blog/CVE-2014-6271&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;bash脆弱性への対応&lt;br&gt;&#xA;&lt;a href=&#34;http://qiita.com/tomohisaota/items/8a8049eea11ece3781b3&#34;&gt;http://qiita.com/tomohisaota/items/8a8049eea11ece3781b3&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;2014/09/24に発表されたBash脆弱性と解決法(RedHat系)&lt;br&gt;&#xA;&lt;a href=&#34;http://qiita.com/richmikan@github/items/5f54114a46e64178133d%EF%BB%BF&#34;&gt;http://qiita.com/richmikan@github/items/5f54114a46e64178133d﻿&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;AWS Elastic Beanstalk bash脆弱性への対応&lt;br&gt;&#xA;&lt;a href=&#34;http://qiita.com/dongri/items/5a1fd49e091438ef37d7&#34;&gt;http://qiita.com/dongri/items/5a1fd49e091438ef37d7&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;この後もいろんな記事出たが、省略&lt;/p&gt;&#xA;&lt;h3 id=&#34;対応内容&#34;&gt;対応内容&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ env x=&amp;#39;() { :;}; echo vulnerable&amp;#39; bash -c &amp;#39;echo bash test&amp;#39;&#xA;vulnerable&#xA;bash test&#xA;&#xA;$ sudo yum clean all&#xA;&#xA;$ sudo yum update bash&#xA;&#xA;$ env x=&amp;#39;() { :;}; echo vulnerable&amp;#39; bash -c &amp;#39;echo bash test&amp;#39;&#xA;bash test&#xA;$&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>OAuthSwift</title>
      <link>https://dongri.github.io/2014/06/oauthswift/</link>
      <pubDate>Sun, 29 Jun 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/06/oauthswift/</guid>
      <description>&lt;p&gt;先日社内SwiftハッカソンでFlickrのPrivate写真を見せるアプリを作ろうとしたところ、&#xA;FlickrのOAuth認証で半日ハマって結局Private写真はだめで、キーワード検索アプリを作った。&#xA;その後Githubで検索しても、ちょっと汎用的なiOSのOAuthライブラリがなくて、&#xA;Swiftの勉強も含めてOAuthライブラリを書いてみた。(OAuth1.0, OAuth2.0両方対応したつもりであるが)&lt;/p&gt;&#xA;&lt;p&gt;Github : &lt;a href=&#34;https://github.com/dongri/OAuthSwift&#34; title=&#34;OAuthSwift&#34;&gt;https://github.com/dongri/OAuthSwift&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用例：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// OAuth1.0&#xA;let oauthswift = OAuth1Swift(&#xA;    consumerKey:    &amp;#34;********&amp;#34;,&#xA;    consumerSecret: &amp;#34;********&amp;#34;,&#xA;    requestTokenUrl: &amp;#34;https://api.twitter.com/oauth/request_token&amp;#34;,&#xA;    authorizeUrl:    &amp;#34;https://api.twitter.com/oauth/authorize&amp;#34;,&#xA;    accessTokenUrl:  &amp;#34;https://api.twitter.com/oauth/access_token&amp;#34;&#xA;)&#xA;oauthswift.authorizeWithCallbackURL( NSURL(string: &amp;#34;oauth-swift://oauth-callback/twitter&amp;#34;), success: {&#xA;    credential, response in&#xA;    println(credential.oauth_token)&#xA;    println(credential.oauth_token_secret)&#xA;}, failure: failureHandler)&#xA;&#xA;// OAuth2.0&#xA;let oauthswift = OAuth2Swift(&#xA;    consumerKey:    &amp;#34;********&amp;#34;,&#xA;    consumerSecret: &amp;#34;********&amp;#34;,&#xA;    authorizeUrl:   &amp;#34;https://api.instagram.com/oauth/authorize&amp;#34;,&#xA;    responseType:   &amp;#34;token&amp;#34;&#xA;)&#xA;oauthswift.authorizeWithCallbackURL( NSURL(string: &amp;#34;oauth-swift://oauth-callback/instagram&amp;#34;), scope: &amp;#34;likes+comments&amp;#34;, state:&amp;#34;INSTAGRAM&amp;#34;, success: {&#xA;    credential, response in&#xA;    println(credential.oauth_token)&#xA;}, failure: failureHandler)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;各サービスoauth関連ページ&#34;&gt;各サービスOAuth関連ページ&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Twitter:&lt;br&gt;&#xA;&lt;a href=&#34;%22oauth%22&#34;&gt;https://dev.twitter.com/docs/auth/oauth&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Flickr:&lt;br&gt;&#xA;&lt;a href=&#34;%22oauth%22&#34;&gt;https://www.flickr.com/services/api/auth.oauth.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker Install</title>
      <link>https://dongri.github.io/2014/06/docker-install/</link>
      <pubDate>Tue, 17 Jun 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/06/docker-install/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/installation/mac/&#34; title=&#34;docker install&#34;&gt;https://docs.docker.com/installation/mac/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;youtube動画通りにダウンロードしてインストールする。&lt;/p&gt;&#xA;&lt;p&gt;applicationsに入ったappアイコンをクリックするとboot2dockerがinit, start, DOCKER_HOSTまで設定してくれるので、作業はそのまま進められる。&lt;/p&gt;&#xA;&lt;p&gt;もしくはboot2dockerコマンドで一から作りなおしてもいい。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;➜  ~  boot2docker init&#xA;➜  ~  boot2docker start&#xA;➜  ~  export DOCKER_HOST=tcp://:2375&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;exportの部分は.zshrcとかに入れとけば毎回設定する必要なくなる。&#xA;DOCKER_HOST正しく設定されないと以下のエラーが出る。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;2014/06/17 22:07:38 Cannot connect to the Docker daemon. Is &amp;#39;docker -d&amp;#39; running on this host?&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;dockerコマンドを確認してみる&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;➜  ~  docker version&#xA;Client version: 1.0.0&#xA;Client API version: 1.12&#xA;Go version (client): go1.2.1&#xA;Git commit (client): 63fe64c&#xA;Server version: 1.0.0&#xA;Server API version: 1.12&#xA;Go version (server): go1.2.1&#xA;Git commit (server): 63fe64c&#xA;➜  ~  docker images&#xA;REPOSITORY           TAG                 IMAGE ID            CREATED             VIRTUAL SIZE&#xA;centos               centos6             0c752394b855        7 days ago          124.1 MB&#xA;centos               latest              0c752394b855        7 days ago          124.1 MB&#xA;➜  ~  &#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Docker Nginx</title>
      <link>https://dongri.github.io/2014/06/docker-nginx/</link>
      <pubDate>Tue, 17 Jun 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/06/docker-nginx/</guid>
      <description>&lt;p&gt;インストール終わったので、nginxを構築してみる。&lt;/p&gt;&#xA;&lt;h3 id=&#34;dockerfileを作成する&#34;&gt;Dockerfileを作成する。&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim Dockerfile&#xA;FROM centos&#xA;MAINTAINER Dongri Jin&#xA;&#xA;RUN yum update -y &amp;amp;&amp;amp; \&#xA;    rpm --import http://nginx.org/keys/nginx_signing.key &amp;amp;&amp;amp; \&#xA;    yum install -y http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm &amp;amp;&amp;amp; \&#xA;    yum install -y nginx&#xA;&#xA;ADD conf.d/default.conf /etc/nginx/conf.d/default.conf&#xA;&#xA;ADD html /var/app/nginx/html&#xA;&#xA;EXPOSE 80&#xA;ENTRYPOINT [&amp;#34;/usr/sbin/nginx&amp;#34;, &amp;#34;-g&amp;#34;, &amp;#34;daemon off;&amp;#34;]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Dockerfileは以下の流れになる。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;centos imageをダウンロード&lt;/li&gt;&#xA;&lt;li&gt;yumでnginxをインストール&lt;/li&gt;&#xA;&lt;li&gt;host(osx)のconfファイルをnginx containerのconfに置き換え&lt;/li&gt;&#xA;&lt;li&gt;host(osx)のhtmlフィルダをnginx containerのhtmlソースフォルダにコピー&lt;/li&gt;&#xA;&lt;li&gt;80番portを開放&lt;/li&gt;&#xA;&lt;li&gt;作成されたコンテナ起動(nginx)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;ビルド&#34;&gt;ビルド&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker build -t dongri/nginx .&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;container名を[username]/[imagename]にしたのはdocker hubに公開するため。&lt;/p&gt;&#xA;&lt;h3 id=&#34;起動&#34;&gt;起動&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker run -p 80:80 -d dongri/nginx&#xA;6358e578f3072e4e32d057647b5dbe63b34d0dfc07e46a497241498f27cf3e88&#xA;$ curl 192.168.59.103&#xA;hello World!&amp;lt;br/&amp;gt;&#xA;path: /var/app/nginx/html/index.html&#xA;$&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;-p は host port : container port&lt;/li&gt;&#xA;&lt;li&gt;-d バックグラウンドで起動&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;ここでdockerのipを指定したが、localhostも可能。ただし、port forwardingが必要。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker node</title>
      <link>https://dongri.github.io/2014/06/docker-node/</link>
      <pubDate>Tue, 17 Jun 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/06/docker-node/</guid>
      <description>&lt;p&gt;続いてnodejsをやってみる。&lt;/p&gt;&#xA;&lt;h3 id=&#34;dockerfileを作成する&#34;&gt;Dockerfileを作成する。&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim Dockerfile&#xA;FROM centos:6.4                                                                                                                                                                                                                               &#xA;MAINTAINER Dongri Jin&#xA;&#xA;RUN yum update -y&#xA;RUN rpm -Uvh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm&#xA;RUN yum install -y npm&#xA;&#xA;ADD nodejs /var/app/nodejs&#xA;&#xA;RUN npm install -g nodemon&#xA;RUN cd /var/app/nodejs; npm install&#xA;&#xA;EXPOSE 3000&#xA;CMD [&amp;#34;node&amp;#34;, &amp;#34;/var/app/nodejs/index.js&amp;#34;]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;node環境構築する&#34;&gt;node環境構築する。&lt;/h3&gt;&#xA;&lt;p&gt;nodejsディレクトリの下に、package.jsonとindex.jsを作成&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim nodejs/package.json&#xA;{&#xA;  &amp;#34;name&amp;#34;: &amp;#34;docker-node&amp;#34;,&#xA;  &amp;#34;private&amp;#34;: true,&#xA;  &amp;#34;version&amp;#34;: &amp;#34;0.0.1&amp;#34;,&#xA;  &amp;#34;description&amp;#34;: &amp;#34;Node.js on Docker&amp;#34;,&#xA;  &amp;#34;author&amp;#34;: &amp;#34;Dongri Jin &amp;lt;dongriab@gmail.com&amp;gt;&amp;#34;,&#xA;  &amp;#34;dependencies&amp;#34;: {&#xA;    &amp;#34;express&amp;#34;: &amp;#34;4.4.3&amp;#34;&#xA;  }&#xA;}&#xA;&#xA;$ vim nodejs/index.js&#xA;var express = require(&amp;#39;express&amp;#39;);&#xA;&#xA;var PORT = 3000;&#xA;&#xA;var app = express();&#xA;app.get(&amp;#39;/&amp;#39;, function (req, res) {&#xA;  res.send(&amp;#39;Hello Node.js\n&amp;#39;);&#xA;});&#xA;&#xA;app.listen(PORT);&#xA;console.log(&amp;#39;Express server listening on port &amp;#39; + PORT);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ビルド--サーバー起動&#34;&gt;ビルド &amp;amp; サーバー起動&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker build -t dongri/node .&#xA;$ docker run -p 3000:3000 -i -t dongri/node&#xA;Express server listening on port 3000&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ブラウザから http://192.168.59.103:3000 アクセスしてみる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker Sharing</title>
      <link>https://dongri.github.io/2014/06/docker-sharing/</link>
      <pubDate>Tue, 17 Jun 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/06/docker-sharing/</guid>
      <description>&lt;p&gt;dockerインストールしてみた、docker触ってみたい、dockerでnginx立ててみた、&#xA;dockerでwordpressやってみた、とかとか。結局、日常開発でどう使えばいいんだっけ？の質問の答えに&#xA;なってない。&lt;/p&gt;&#xA;&lt;p&gt;開発環境がLinux、Ubuntuでvim派だと docker run 時に -v オプション付けてhostとcontainerの&#xA;リソースを共有できるが、開発環境がMacだと間にVMが挟んでるのでややこしくなる。&lt;/p&gt;&#xA;&lt;p&gt;Vagrant使ったことある方は、vm.synced_folder 一発で解決できるんじゃないと思うかも知りませんが、&#xA;boot2dockerではカスタムvagrant boxを使わないとできないみたい。&lt;/p&gt;&#xA;&lt;p&gt;boot2dockerが推奨してるのは、sambaサーバー経由でフォルダ共有ということなので、設定してみた。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker run -v /var/app/ --name app busybox&#xA;$ docker run --name app-samba --rm -v /usr/local/bin/docker:/docker -v /var/run/docker.sock:/docker.sock svendowideit/samba app&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ここまでやると、finderから cifs://192.168.59.103, smb://192.168.59.103 にアクセスして、Guestユーザーで/var/appに入れる。&lt;/p&gt;&#xA;&lt;p&gt;docker-nginx, docker-nodeで、ソースフォルダを /var/app/nginx/html, /var/app/nodejs にした理由もここにある。&lt;/p&gt;&#xA;&lt;p&gt;nginx、nodeをsambaサーバーのVolumesを使って起動する&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;### nodeの例：&#xA;$ docker run -p 3000:3000 --volumes-from samba-server -i -t dongri/node bash&#xA;bash-4.1# cd /var/app/nodejs/&#xA;bash-4.1# npm install&#xA;bash-4.1# nodemon index.js&#xA;17 Jun 08:12:18 - [nodemon] v1.2.0&#xA;17 Jun 08:12:18 - [nodemon] to restart at any time, enter `rs`&#xA;17 Jun 08:12:18 - [nodemon] watching: *.*&#xA;17 Jun 08:12:18 - [nodemon] starting `node index.js`&#xA;Express server listening on port 3000&#xA;&#xA;### nginxの例：&#xA;$ docker run -p 80:80 --volumes-from samba-server -i -t dongri/nginx&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ここまでやったら、macから/var/appにソースを入れて好きなように開発できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>oh-my-zsh</title>
      <link>https://dongri.github.io/2014/05/oh-my-zsh/</link>
      <pubDate>Tue, 27 May 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/05/oh-my-zsh/</guid>
      <description>&lt;h3 id=&#34;oh-my-zshとは&#34;&gt;oh-my-zshとは&lt;/h3&gt;&#xA;&lt;p&gt;zsh の設定を管理するフレームワーク&lt;/p&gt;&#xA;&lt;h3 id=&#34;oh-my-zshをインストール&#34;&gt;oh-my-zshをインストール&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;% wget http://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh&#xA;&#xA;Found ~/.zshrc. Backing up to ~/.zshrc.pre-oh-my-zsh&#xA;Using the Oh My Zsh template file and adding it to ~/.zshrc&#xA;Copying your current PATH and adding it to the end of ~/.zshrc for you.&#xA;Time to change your default shell to zsh!&#xA;Changing shell for dongri.&#xA;Password for dongri:&#xA;chsh: no changes made&#xA;&#xA;  ____  / /_     ____ ___  __  __   ____  _____/ /_&#xA; / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \&#xA;/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / /&#xA;\____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/&#xA;                        /____/                       ....is now installed!&#xA;&#xA;&#xA; Please look over the ~/.zshrc file to select plugins, themes, and options.&#xA;&#xA; p.s. Follow us at http://twitter.com/ohmyzsh.  &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;既存の .zschrc は .zshrc.pre-oh-py-zsh にバックアップされる&lt;/p&gt;</description>
    </item>
    <item>
      <title>Powerline</title>
      <link>https://dongri.github.io/2014/05/powerline/</link>
      <pubDate>Mon, 26 May 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/05/powerline/</guid>
      <description>&lt;p&gt;Powerline化！&lt;/p&gt;&#xA;&lt;p&gt;歴史的には vim powerline, zsh powerline, tmux powerline がそれぞれあったみたいだったが、最近はそれがひとつに統合されました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Lokaltog/powerline&#34;&gt;https://github.com/Lokaltog/powerline&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;まず-vim-から&#34;&gt;まず vim から&lt;/h3&gt;&#xA;&lt;p&gt;vim プラグイン管理ツールNeoBundle.vimをインストール&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mkdir -p ~/.vim/bundle&#xA;$ git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;~/.vimrc 編集&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if has(&amp;#39;vim_starting&amp;#39;)&#xA;  set runtimepath+=~/.vim/bundle/neobundle.vim/&#xA;  call neobundle#rc(expand(&amp;#39;~/.vim/bundle/&amp;#39;))&#xA;endif&#xA;&#xA;&amp;#34;&amp;#34; NeoBundle&#xA;NeoBundle &amp;#39;Shougo/neobundle.vim&amp;#39;&#xA;&#xA;filetype plugin indent on&#xA;filetype indent on&#xA;syntax on&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;powerlineのインストール&#34;&gt;Powerlineのインストール&lt;/h3&gt;&#xA;&lt;p&gt;~/.vimrcに追加&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NeoBundle &amp;#39;alpaca-tc/alpaca_powertabline&amp;#39;&#xA;NeoBundle &amp;#39;https://github.com/Lokaltog/powerline.git&amp;#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;保存して、もう一度開いてインストール&#xA;:NeoBundleInstall&lt;/p&gt;&#xA;&lt;p&gt;ちなみにアンインストールは NeoBundleをvimrcから消してから&#xA;:NeoBundleClean&lt;/p&gt;&#xA;&lt;h3 id=&#34;powerlineのためfontにパッチをあてる&#34;&gt;powerlineのためfontにパッチをあてる&lt;/h3&gt;&#xA;&lt;p&gt;Powerlineのステータスバーには特殊文字列を使うために既存fontにパッチを当てる必要ある。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;% git clone https://github.com/Lokaltog/vim-powerline.git&#xA;&#xA;% brew update&#xA;% brew install fontforge&#xA;% fontforge -script vim-powerline/fontpatcher/fontpatcher  ~/Library/Fonts/&amp;lt;font&amp;gt;&#xA;% cp *-Powerline.ttf  ~/Library/Fonts/&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;もしくは &lt;a href=&#34;https://github.com/Lokaltog/powerline-fonts&#34;&gt;https://github.com/Lokaltog/powerline-fonts&lt;/a&gt; 直接ダウンロードする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>tmuxinator</title>
      <link>https://dongri.github.io/2014/05/tmuxinator/</link>
      <pubDate>Sun, 25 May 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/05/tmuxinator/</guid>
      <description>&lt;p&gt;tmux使ってて一番困ったことがMac再起動した時にtmux sessionがクリアされて、windowを最初から&#xA;起動しないとだめだった。&lt;/p&gt;&#xA;&lt;p&gt;そこでtmuxinatorが登場！&lt;/p&gt;&#xA;&lt;p&gt;tmuxinator は、tmuxで起動するウィンドウやレイアウトを事前に設定しておき、&#xA;tmuxinatorコマンドを実行することにより設定通りのウィンドウ配置にするツールです。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;% tmux -V&#xA;tmux 1.9a&#xA;% gem -v&#xA;2.0.14&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;tmuxinator-インストール--設定&#34;&gt;tmuxinator インストール &amp;amp; 設定&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;% gem install tmuxinator&#xA;% echo $SHELL&#xA;/bin/zsh&#xA;$ echo $EDITOR&#xA;vim&#xA;% echo &amp;#39;source ~/.tmuxinator/tmuxinator.zsh&amp;#39; &amp;gt;&amp;gt; ${HOME}/.zshrc&#xA;% soruce ~/.zshrc&#xA;% mux doctor&#xA;Checking if tmux is installed ==&amp;gt; Yes&#xA;Checking if $EDITOR is set ==&amp;gt; Yes&#xA;Checking if $SHELL is set ==&amp;gt; Yes&#xA;%&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;project-作成--設定&#34;&gt;project 作成 &amp;amp; 設定&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;% mux new dongri&#xA;&#xA;# ~/.tmuxinator/dongri.yml&#xA;&#xA;name: dongri&#xA;root: ~/&#xA;&#xA;# Optional tmux socket&#xA;# socket_name: foo&#xA;&#xA;# Runs before everything. Use it to start daemons etc.&#xA;# pre: sudo /etc/rc.d/mysqld start&#xA;&#xA;# Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.&#xA;# pre_window: rbenv shell 2.0.0-p247&#xA;&#xA;# Pass command line options to tmux. Useful for specifying a different tmux.conf.&#xA;# tmux_options: -f ~/.tmux.mac.conf&#xA;&#xA;# Change the command to call tmux.  This can be used by derivatives/wrappers like byobu.&#xA;# tmux_command: byobu&#xA;&#xA;windows:&#xA;  - local:&#xA;      layout: 16ba,238x62,0,0{119x62,0,0[119x31,0,0,34,119x30,0,32,37],118x62,120,0[118x31,120,0,35,118x30,120,32,36]}&#xA;      panes:&#xA;        -&#xA;        -&#xA;        -&#xA;        -&#xA;  - vagrant:&#xA;      layout: 16ba,238x62,0,0{119x62,0,0[119x31,0,0,34,119x30,0,32,37],118x62,120,0[118x31,120,0,35,118x30,120,32,36]}&#xA;      panes:&#xA;        - cd project/project-backend&#xA;        - cd project/project-web&#xA;        - cd project/inside-project&#xA;  - git-server:&#xA;      layout: 16ba,238x62,0,0{119x62,0,0[119x31,0,0,34,119x30,0,32,37],118x62,120,0[118x31,120,0,35,118x30,120,32,36]}&#xA;      panes:&#xA;        - cd project/project-backend&#xA;        - cd project/project-api&#xA;        - cd project/project-api&#xA;        - cd project/server-config&#xA;  - git-others:&#xA;      layout: 16ba,238x62,0,0{119x62,0,0[119x31,0,0,34,119x30,0,32,37],118x62,120,0[118x31,120,0,35,118x30,120,32,36]}&#xA;      panes:&#xA;        - cd project/project-ios&#xA;        - cd project/project-android&#xA;        - cd project/project-web&#xA;        - cd project/inside-project&#xA;  - project-local:&#xA;      layout: 16ba,238x62,0,0{119x62,0,0[119x31,0,0,34,119x30,0,32,37],118x62,120,0[118x31,120,0,35,118x30,120,32,36]}&#xA;      panes:&#xA;        - cd project/project-backend&#xA;        - cd project/project-web&#xA;        - cd project/project-api&#xA;        - cd project/inside-project&#xA;  - project-dev:&#xA;      layout: a916,237x59,0,0{118x59,0,0,74,118x59,119,0,90}&#xA;      panes:&#xA;        - ssh project-dev&#xA;        - ssh project-dev&#xA;  - project-script:&#xA;      layout: a916,237x59,0,0{118x59,0,0,74,118x59,119,0,90}&#xA;      panes:&#xA;        - ssh project-script&#xA;        - ssh project-script&#xA;  - project-bastion:&#xA;      layout: a916,237x59,0,0{118x59,0,0,74,118x59,119,0,90}&#xA;      panes:&#xA;        - ssh aws-project-bastion&#xA;        - ssh aws-project-bastion&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;layoutはところわけわらない数字は list-windows で表示された数字です。自分の設定したtmuxの環境で以下のコマンドで確認&lt;/p&gt;</description>
    </item>
    <item>
      <title>mongri</title>
      <link>https://dongri.github.io/2014/05/mongri/</link>
      <pubDate>Sun, 18 May 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/05/mongri/</guid>
      <description>&lt;p&gt;mongohqのweb consoleに慣れてから、自前でmongodb構築した場合に一番困ったのがadmin toolでした。&lt;br&gt;&#xA;一応公式ページ &lt;a href=&#34;http://docs.mongodb.org/ecosystem/tools/administration-interfaces/&#34; title=&#34;Admin UIs&#34;&gt;Admin UIs&lt;/a&gt; にいろいろ載ってるけど、&#xA;どれも使い物にならない。Mac AppはRetina対応してないし、PHPで作れてるし、正規表現で検索でないし、開発止まってるし。。。&lt;br&gt;&#xA;ということで自分で作ることにしました。言語、フレームワークとか考えたらmongodbならnodeと相性がいいので、nodejs + express + mongooseで作りました。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Github : &lt;a href=&#34;https://github.com/dongri/mongri&#34; title=&#34;mongri&#34;&gt;mongri&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Demo   : &lt;a href=&#34;http://mongri.heroku.com&#34; title=&#34;mongri on heroku&#34;&gt;mongri on heroku&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone git@github.com:dongri/mongri.git&#xA;$ cd mongri&#xA;$ npm install&#xA;$ node app.js&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;TODO: collection作成、collection削除、db status監視&lt;/p&gt;</description>
    </item>
    <item>
      <title>middleman blog</title>
      <link>https://dongri.github.io/2014/04/middleman-blog/</link>
      <pubDate>Mon, 21 Apr 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/04/middleman-blog/</guid>
      <description>&lt;p&gt;Octopress, Jekyll, Cabin いろいろあるみたいけど、Middlemanを使ってみようかと思って設置してみた。&lt;/p&gt;&#xA;&lt;h2 id=&#34;middleman-middleman-blogインストール&#34;&gt;middleman, middleman-blogインストール&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gem install middleman&#xA;$ gem install middleman-blog&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;middleman-プロジェクト作成&#34;&gt;middleman プロジェクト作成&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ middleman init dongri.github.io --template=blog&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;レポジトリ設定&#34;&gt;レポジトリ設定&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd dongri.github.io&#xA;$ git init&#xA;$ git remote add origin git@github.com:dongri/dongri.github.io.git&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;gemfile-を修正&#34;&gt;Gemfile を修正&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gem &amp;#34;middleman-deploy&amp;#34;&#xA;gem &amp;#34;middleman-livereload&amp;#34;&#xA;gem &amp;#34;middleman-syntax&amp;#34;&#xA;gem &amp;#34;redcarpet&amp;#34;&#xA;gem &amp;#34;nokogiri&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt; する。&lt;/p&gt;&#xA;&lt;h2 id=&#34;configrb-を設定&#34;&gt;config.rb を設定&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Time.zone = &amp;#34;Tokyo&amp;#34;&#xA;&#xA;page &amp;#34;archives/*&amp;#34;, layout: :post&#xA;page &amp;#34;archives/index.html&amp;#34;, layout: :layout&#xA;&#xA;configure :build do&#xA;  activate :minify_css&#xA;  activate :minify_javascript&#xA;  activate :asset_hash&#xA;end&#xA;&#xA;set :markdown_engine, :redcarpet&#xA;set :markdown, :fenced_code_blocks =&amp;gt; true, :smartypants =&amp;gt; true&#xA;&#xA;activate :livereload&#xA;activate :directory_indexes&#xA;activate :syntax, line_numbers: true&#xA;&#xA;# デプロイの設定&#xA;activate :deploy do |deploy|&#xA;  deploy.build_before = true&#xA;  deploy.method = :git&#xA;  deploy.branch = &amp;#39;main&amp;#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;server起動&#34;&gt;server起動&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ middleman server&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;new-post&#34;&gt;New Post&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ middleman article new-post&#xA;      create  source/2014-04-21-new-post.html.markdown&#xA;$&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;source2014-04-21-new-posthtmlmarkdown-編集&#34;&gt;source/2014-04-21-new-post.html.markdown 編集&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---&#xA;layout: post&#xA;title: middleman blog&#xA;date: 2014-04-21&#xA;tags: middleman, blog&#xA;---&#xA;&#xA;# ほげほげ&#xA;&#xA;## Code&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;build--deploy&#34;&gt;build &amp;amp; deploy&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ middleman build&#xA;$ middleman deploy&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;template--css&#34;&gt;template &amp;amp; css&lt;/h2&gt;&#xA;&lt;p&gt;theme, templateなどググっても出てこない。&lt;br&gt;&#xA;しょうがなく自分デザイン?してcss組んでこんなページが生まれた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Example Article</title>
      <link>https://dongri.github.io/2012/01/example-article/</link>
      <pubDate>Sun, 01 Jan 2012 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2012/01/example-article/</guid>
      <description>&lt;p&gt;This is an example article. You probably want to delete it and write your own articles!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
