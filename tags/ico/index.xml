<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ico on dongri</title>
    <link>https://dongri.github.io/tags/ico/</link>
    <description>Recent content in Ico on dongri</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Mar 2018 06:39:14 +0900</lastBuildDate>
    <atom:link href="https://dongri.github.io/tags/ico/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>どんぐりコインを作ってみた</title>
      <link>https://dongri.github.io/2018/03/%E3%81%A9%E3%82%93%E3%81%90%E3%82%8A%E3%82%B3%E3%82%A4%E3%83%B3%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Tue, 06 Mar 2018 06:39:14 +0900</pubDate>
      <guid>https://dongri.github.io/2018/03/%E3%81%A9%E3%82%93%E3%81%90%E3%82%8A%E3%82%B3%E3%82%A4%E3%83%B3%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>&lt;p&gt;ICOで必要な新しい通貨の開発で、自分の中でずっともやもやしてたいくつかの疑問がちょっとはっきりしたので、&#xA;メモしながらみんなと共有できればと思います。&lt;/p&gt;&#xA;&lt;p&gt;ICOしてる企業は自分独自のブロックチェーンを作ってその上に新しい仮想通貨を発行してる、ずっとそう思って来たが、&#xA;それがちょっと違ったみたいでした。そういう企業もあれば、既存のプラットフォーム（Ethereum）でコインを発行するのが普通だったみたいです。&lt;/p&gt;&#xA;&lt;p&gt;以下、実際新しいトークンをEthereum上に作ってみた記事になります。&lt;/p&gt;&#xA;&lt;p&gt;GitHub: &lt;a href=&#34;https://github.com/dongri/DongriCoin&#34;&gt;https://github.com/dongri/DongriCoin&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;まず、今回の記事で使う用語、ソフトウェア、ツールをまとめます。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ethereum-イーサリアム&#34;&gt;Ethereum (イーサリアム)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;スマートコントラクトを実行するためのプラットフォーム。&lt;/li&gt;&#xA;&lt;li&gt;Ethereum Virtual Machine (EVM)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ethereum.org/&#34;&gt;https://www.ethereum.org/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;token-トークン&#34;&gt;Token (トークン)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;独自コインのこと&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;erc20トークン&#34;&gt;ERC20トークン&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ERC20 は、Ethereum ブロックチェーン上でトークンを発行する際の標準規格。&lt;/li&gt;&#xA;&lt;li&gt;ERC20 に準拠したトークンであれば、無数に存在する種類のトークンを同じ枠組みで価値移転することができます。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;truffle-トリュフ&#34;&gt;Truffle (トリュフ)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ethereum開発用フレームワーク。&lt;/li&gt;&#xA;&lt;li&gt;トークン作成、コンパイル、デプロイなど&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://truffleframework.com/&#34;&gt;http://truffleframework.com/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;solidity-ソリディティ&#34;&gt;Solidity (ソリディティ)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;スマートコントラクトを記述するための言語。&lt;/li&gt;&#xA;&lt;li&gt;デファクトスタンダードになりつつある。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ethereum.github.io/browser-solidity/&#34;&gt;https://ethereum.github.io/browser-solidity/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;infuraio&#34;&gt;infura.io&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ethereumホスティングサービス&lt;/li&gt;&#xA;&lt;li&gt;geth(go-ethereum)でノードの同期などしなくて済む&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://infura.io/&#34;&gt;https://infura.io/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;metamaskio&#34;&gt;metamask.io&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;イーサリアムウォレット&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://metamask.io/&#34;&gt;https://metamask.io/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;必要なソフトウェアはnodejsのみです。その後はnpmで必要なモジュールをインストールします。&lt;/p&gt;&#xA;&lt;h2 id=&#34;nodejsインストール&#34;&gt;nodejsインストール&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash&#xA;$ nvm ls-remote&#xA;$ nvm instal 8.9.4&#xA;$ nvm alias default 8.9.4&#xA;$ node -v&#xA;v8.9.4&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;truffleインストール&#34;&gt;truffleインストール&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ npm instal -g truffle&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;プロジェクト作成&#34;&gt;プロジェクト作成&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mkdir DongriCoin&#xA;$ cd DongriCoin&#xA;&#xA;$ truffle init&#xA;$ ls -l&#xA;&#xA;$ npm -f init&#xA;$ npm install zeppelin-solidity --save&#xA;$ npm install truffle-hdwallet-provider --save&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;contract作成&#34;&gt;contract作成&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim contracts/DongriCoin.sol&#xA;&#xA;pragma solidity ^0.4.18;&#xA;import &amp;#39;zeppelin-solidity/contracts/token/ERC20/MintableToken.sol&amp;#39;;&#xA;&#xA;contract DongriCoin is StandardToken {&#xA;  string public name = &amp;#34;DongriCoin&amp;#34;;&#xA;  string public symbol = &amp;#34;DON&amp;#34;;&#xA;  uint public decimals = 18;&#xA;&#xA;  function DongriCoin(uint initialSupply) public {&#xA;    totalSupply_ = initialSupply;&#xA;    balances[msg.sender] = initialSupply;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;migrate作成&#34;&gt;migrate作成&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim migrations/2_deploy_dongri_token.js&#xA;&#xA;const DongriCoin = artifacts.require(&amp;#39;./DongriCoin.sol&amp;#39;)&#xA;&#xA;module.exports = (deployer) =&amp;gt; {&#xA;  let initialSupply = 1000000e18 // 100万(初期発行量)&#xA;  deployer.deploy(DongriCoin, initialSupply)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;develop環境にデプロイ送金確認&#34;&gt;develop環境にデプロイ、送金確認&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ truffle compile&#xA;$ truffle develop&#xA;&#xA;truffle(develop)&amp;gt; migrate&#xA;&#xA;truffle(develop)&amp;gt; token = DongriCoin.at(DongriCoin.address)&#xA;&#xA;truffle(develop)&amp;gt; token.name()&#xA;&amp;#39;DongriCoin&amp;#39;&#xA;truffle(develop)&amp;gt; token.symbol()&#xA;&amp;#39;DON&amp;#39;&#xA;truffle(develop)&amp;gt; token.totalSupply()&#xA;BigNumber { s: 1, e: 24, c: [ 10000000000 ] }&#xA;&#xA;truffle(develop)&amp;gt; token.balanceOf(web3.eth.coinbase)&#xA;BigNumber { s: 1, e: 24, c: [ 10000000000 ] }&#xA;truffle(develop)&amp;gt; token.balanceOf(web3.eth.accounts[0])&#xA;BigNumber { s: 1, e: 24, c: [ 10000000000 ] }&#xA;truffle(develop)&amp;gt; token.balanceOf(web3.eth.accounts[1])&#xA;BigNumber { s: 1, e: 0, c: [ 0 ] }&#xA;truffle(develop)&amp;gt; token.transfer(web3.eth.accounts[1], 20000e18)&#xA;&#xA;truffle(develop)&amp;gt; token.balanceOf(web3.eth.accounts[1])&#xA;BigNumber { s: 1, e: 22, c: [ 200000000 ] }&#xA;truffle(develop)&amp;gt; token.balanceOf(web3.eth.accounts[0])&#xA;BigNumber { s: 1, e: 23, c: [ 9800000000 ] }&#xA;&#xA;truffle(develop)&amp;gt; token.totalSupply()&#xA;BigNumber { s: 1, e: 24, c: [ 10000000000 ] }&#xA;truffle(develop)&amp;gt;&#xA;&#xA;$ truffle compile&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;live環境にデプロイ&#34;&gt;live環境にデプロイ&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim truffle.js&#xA;const Web3 = require(&amp;#34;web3&amp;#34;);&#xA;const web3 = new Web3();&#xA;const HDWalletProvider = require(&amp;#34;truffle-hdwallet-provider&amp;#34;);&#xA;&#xA;// process.env.MNEMONIC: metamask.io 登録時の12 wordsを記載。&#xA;// process.env.INFURA_ACCESS_TOKEN: infura.io 登録で取得したaccess tokenを記載。&#xA;// process.env.FROM_ADDRESS: metamask.io でのアカウントアドレス。&#xA;&#xA;var mnemonic = process.env.MNEMONIC;&#xA;var accessToken = process.env.INFURA_ACCESS_TOKEN;&#xA;var fromAddress = process.env.FROM_ADDRESS&#xA;&#xA;module.exports = {&#xA;  networks: {&#xA;    live: {&#xA;      provider: function() {&#xA;        return new HDWalletProvider(&#xA;          mnemonic,&#xA;          &amp;#34;https://mainnet.infura.io/&amp;#34; + accessToken&#xA;        );&#xA;      },&#xA;      network_id: &amp;#34;1&amp;#34;,&#xA;      from: fromAddress,&#xA;      gas: 3000000,&#xA;      gasPrice: web3.toWei(&amp;#34;10&amp;#34;, &amp;#34;gwei&amp;#34;)&#xA;    }&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下のコマンド実行する前に、fromに書いてるアドレスに0.1ETHぐらい入れたほうがいいです。gasが足りないと失敗します。&#xA;2018/03/04 時点で2800円ぐらいでできました。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
