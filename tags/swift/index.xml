<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on dongri</title>
    <link>https://dongri.github.io/tags/swift/</link>
    <description>Recent content in Swift on dongri</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Dec 2017 23:36:27 +0900</lastBuildDate>
    <atom:link href="https://dongri.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SwiftでgRPC対応する</title>
      <link>https://dongri.github.io/2017/12/swift%E3%81%A7grpc%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B/</link>
      <pubDate>Thu, 14 Dec 2017 23:36:27 +0900</pubDate>
      <guid>https://dongri.github.io/2017/12/swift%E3%81%A7grpc%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B/</guid>
      <description>&lt;p&gt;サーバー側gRPC対応終わったので、クライアントもgRPC対応してみました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;サーバー側api&#34;&gt;サーバー側API&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://lgtm.lol/api&#34;&gt;https://lgtm.lol/api&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;protoファイル準備&#34;&gt;protoファイル準備&lt;/h2&gt;&#xA;&lt;p&gt;protosディレクトリを作成して、↑のドキュメントから &lt;code&gt;api.proto&lt;/code&gt; を作成します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;specファイル作成&#34;&gt;specファイル作成&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;api.podspec&lt;/code&gt; ファイルを作成&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Pod::Spec.new do |s|&#xA;  s.name     = &amp;#34;api&amp;#34;&#xA;  s.version  = &amp;#34;0.0.1&amp;#34;&#xA;  s.license  = &amp;#34;MIT&amp;#34;&#xA;  s.authors  = { &amp;#39;Dongri Jin&amp;#39; =&amp;gt; &amp;#39;dongrify@gmail.com&amp;#39; }&#xA;  s.homepage = &amp;#34;https://github.com/dongri&amp;#34;&#xA;  s.summary = &amp;#34;gRPC API&amp;#34;&#xA;  s.source = { :git =&amp;gt; &amp;#39;https://github.com/dongri/grpc.git&amp;#39; }&#xA;&#xA;  s.ios.deployment_target = &amp;#34;10.1&amp;#34;&#xA;&#xA;  src = &amp;#34;./protos&amp;#34;&#xA;&#xA;  # gRPC Plugin&#xA;  s.dependency &amp;#34;!ProtoCompiler-gRPCPlugin&amp;#34;, &amp;#34;~&amp;gt; 1.0&amp;#34;&#xA;&#xA;  pods_root = &amp;#39;Pods&amp;#39;&#xA;&#xA;  protoc_dir = &amp;#34;#{pods_root}/!ProtoCompiler&amp;#34;&#xA;  protoc = &amp;#34;#{protoc_dir}/protoc&amp;#34;&#xA;  plugin = &amp;#34;#{pods_root}/!ProtoCompiler-gRPCPlugin/grpc_objective_c_plugin&amp;#34;&#xA;&#xA;  dir = &amp;#34;#{pods_root}/#{s.name}&amp;#34;&#xA;&#xA;  # source files&#xA;  s.prepare_command = &amp;lt;&amp;lt;-CMD&#xA;    mkdir -p #{dir}&#xA;    #{protoc} \&#xA;        --plugin=protoc-gen-grpc=#{plugin} \&#xA;        --objc_out=#{dir} \&#xA;        --grpc_out=#{dir} \&#xA;        -I #{src} \&#xA;        -I #{protoc_dir} \&#xA;        #{src}/api.proto&#xA;  CMD&#xA;&#xA;  # subspec&#xA;  s.subspec &amp;#34;Messages&amp;#34; do |ms|&#xA;    ms.source_files = &amp;#34;#{dir}/*.pbobjc.{h,m}&amp;#34;, &amp;#34;#{dir}/**/*.pbobjc.{h,m}&amp;#34;&#xA;    ms.header_mappings_dir = dir&#xA;    ms.requires_arc = false&#xA;    ms.dependency &amp;#34;Protobuf&amp;#34;&#xA;  end&#xA;&#xA;  # subspec&#xA;  s.subspec &amp;#34;Services&amp;#34; do |ss|&#xA;    ss.source_files = &amp;#34;#{dir}/*.pbrpc.{h,m}&amp;#34;, &amp;#34;#{dir}/**/*.pbrpc.{h,m}&amp;#34;&#xA;    ss.header_mappings_dir = dir&#xA;    ss.requires_arc = true&#xA;    ss.dependency &amp;#34;gRPC-ProtoRPC&amp;#34;&#xA;    ss.dependency &amp;#34;#{s.name}/Messages&amp;#34;&#xA;  end&#xA;&#xA;  s.pod_target_xcconfig = {&#xA;    &amp;#39;GCC_PREPROCESSOR_DEFINITIONS&amp;#39; =&amp;gt; &amp;#39;$(inherited) GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS=1&amp;#39;,&#xA;    &amp;#39;CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES&amp;#39; =&amp;gt; &amp;#39;YES&amp;#39;,&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.&#xA;├── LGTM&#xA;├── Podfile&#xA;├── Podfile.lock&#xA;├── api.podspec&#xA;└── protos&#xA;    └── api.proto&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;install&#34;&gt;install&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ pod init&#xA;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これで &lt;code&gt;Pods -&amp;gt; Development Pods -&amp;gt; api&lt;/code&gt; ができるので &lt;code&gt;Bridging-Header.h&lt;/code&gt; ファイルを作成してimpoorします。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Carthage</title>
      <link>https://dongri.github.io/2015/01/carthage/</link>
      <pubDate>Thu, 15 Jan 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/01/carthage/</guid>
      <description>&lt;p&gt;OAuthSwiftをCarthageに対応したので、メモとして残します。&lt;/p&gt;&#xA;&lt;h3 id=&#34;carthageってなんなの&#34;&gt;Carthageってなんなの？&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;https://github.com/Carthage/Carthage&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;「カルタゴ」と読んで、Swift対応したライブラリ管理ツールです。&lt;/p&gt;&#xA;&lt;p&gt;インストール、使い方はgithubページ見ればわかると思います。&lt;/p&gt;&#xA;&lt;p&gt;基本的な使い方は Cartfile 作成して使いたいgithubのライブラリをリストで書いてから&#xA;「carthage update」するとCarthage/Buildの下に ******.framework ファイルが出来上がるので&#xA;それをプロジェクトにドラッグアンドドロップして入れる。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim Cartfile&#xA;github &amp;#34;dongri/OAuthSwift&amp;#34; ~&amp;gt; 0.1.7&#xA;&#xA;$ carthage update&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;既存のライブラリcarthage対応&#34;&gt;既存のライブラリCarthage対応&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Targets に 新しい Cocoa Touch Framework Schemeを作る。Shared になってること確認。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://farm8.staticflickr.com/7583/15666092073_76b41b17b1.jpg&#34; alt=&#34;Scheme Shared&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;既存ライブラリを新しいTargetに移す&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Swift Compiler設定&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8598/16098635750_0c10d33669.jpg&#34; alt=&#34;Swift Compiler&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Compile Sourcesに必要なSwiftファイル追加&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8561/16100158557_400084b6c6.jpg&#34; alt=&#34;Swift Compiler&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Schemeを新しいtargetにしてビルドする。（iOS Deviceにして）&#xA;エラーになったら自己解決&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;carthage buildしてみる。githubに上げる前に、ローカルでビルとして、正常に ******.framework が出来上がるのを確認。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ carthage build --no-skip-current&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;githubに上げる。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git tag v0.1.0&#xA;$ git push origin v0.1.0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上でcarthage対応完了。&lt;/p&gt;&#xA;&lt;p&gt;対応したプロジェクトがこれ。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/OAuthSwift&#34;&gt;https://github.com/dongri/OAuthSwift&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>OAuthSwift</title>
      <link>https://dongri.github.io/2014/06/oauthswift/</link>
      <pubDate>Sun, 29 Jun 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/06/oauthswift/</guid>
      <description>&lt;p&gt;先日社内SwiftハッカソンでFlickrのPrivate写真を見せるアプリを作ろうとしたところ、&#xA;FlickrのOAuth認証で半日ハマって結局Private写真はだめで、キーワード検索アプリを作った。&#xA;その後Githubで検索しても、ちょっと汎用的なiOSのOAuthライブラリがなくて、&#xA;Swiftの勉強も含めてOAuthライブラリを書いてみた。(OAuth1.0, OAuth2.0両方対応したつもりであるが)&lt;/p&gt;&#xA;&lt;p&gt;Github : &lt;a href=&#34;https://github.com/dongri/OAuthSwift&#34; title=&#34;OAuthSwift&#34;&gt;https://github.com/dongri/OAuthSwift&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用例：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// OAuth1.0&#xA;let oauthswift = OAuth1Swift(&#xA;    consumerKey:    &amp;#34;********&amp;#34;,&#xA;    consumerSecret: &amp;#34;********&amp;#34;,&#xA;    requestTokenUrl: &amp;#34;https://api.twitter.com/oauth/request_token&amp;#34;,&#xA;    authorizeUrl:    &amp;#34;https://api.twitter.com/oauth/authorize&amp;#34;,&#xA;    accessTokenUrl:  &amp;#34;https://api.twitter.com/oauth/access_token&amp;#34;&#xA;)&#xA;oauthswift.authorizeWithCallbackURL( NSURL(string: &amp;#34;oauth-swift://oauth-callback/twitter&amp;#34;), success: {&#xA;    credential, response in&#xA;    println(credential.oauth_token)&#xA;    println(credential.oauth_token_secret)&#xA;}, failure: failureHandler)&#xA;&#xA;// OAuth2.0&#xA;let oauthswift = OAuth2Swift(&#xA;    consumerKey:    &amp;#34;********&amp;#34;,&#xA;    consumerSecret: &amp;#34;********&amp;#34;,&#xA;    authorizeUrl:   &amp;#34;https://api.instagram.com/oauth/authorize&amp;#34;,&#xA;    responseType:   &amp;#34;token&amp;#34;&#xA;)&#xA;oauthswift.authorizeWithCallbackURL( NSURL(string: &amp;#34;oauth-swift://oauth-callback/instagram&amp;#34;), scope: &amp;#34;likes+comments&amp;#34;, state:&amp;#34;INSTAGRAM&amp;#34;, success: {&#xA;    credential, response in&#xA;    println(credential.oauth_token)&#xA;}, failure: failureHandler)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;各サービスoauth関連ページ&#34;&gt;各サービスOAuth関連ページ&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Twitter:&lt;br&gt;&#xA;&lt;a href=&#34;%22oauth%22&#34;&gt;https://dev.twitter.com/docs/auth/oauth&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Flickr:&lt;br&gt;&#xA;&lt;a href=&#34;%22oauth%22&#34;&gt;https://www.flickr.com/services/api/auth.oauth.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
