<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oss on dongri</title>
    <link>https://dongri.github.io/tags/oss/</link>
    <description>Recent content in Oss on dongri</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Dec 2017 10:22:17 +0900</lastBuildDate>
    <atom:link href="https://dongri.github.io/tags/oss/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OSSがお金になった話</title>
      <link>https://dongri.github.io/2017/12/oss%E3%81%8C%E3%81%8A%E9%87%91%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E8%A9%B1/</link>
      <pubDate>Mon, 04 Dec 2017 10:22:17 +0900</pubDate>
      <guid>https://dongri.github.io/2017/12/oss%E3%81%8C%E3%81%8A%E9%87%91%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E8%A9%B1/</guid>
      <description>&lt;p&gt;書いたオープンソースソフトウェアがお金になった話をしようと思います。&lt;/p&gt;&#xA;&lt;p&gt;OSS書いてGitHubに公開して有名になって、ある企業からスカウトされオファーが来て転職して年収アップ！そういう話ではなく、マジで自分の銀行口座にお金が振り込まれて来た話です。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dongri.github.io/2014/06/oauthswift/&#34;&gt;https://dongri.github.io/2014/06/oauthswift/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;こちらのブログにも書いたように、2014年Swiftが出て「みんなでSwift勉強しようぜ」と社内ハッカソンやってたらOAuthがそう簡単にできないことがわかり、OAuth関連のライブラリを書いてみようと思い始めたプロジェクトがOAuthSwiftでした。初めは自分が必要だったFlickr OAuth, Twitter OAuthだけだったが、どうせならOAuth, OAuth2両方対応しようと思いGitHubなどOAuth2もサポートするようにしました。一時期Swiftのトレンドトップになった時もあって、スターが付き始めましたね。一気に&lt;/p&gt;&#xA;&lt;p&gt;初めの頃は微妙に動きの違う各サービスのOAuthを対応（UberのOAuthで苦労した記憶が、、、）しながら真面目にメンテナンスしてたがそれがいつの間にかやる気なくなって、半放置されてたらフランスの方から「お前やる気ないんだったら俺にリポジトリのマージ権限くれ！」とメール来て、1500以上スター付いてるプロジェクトだし、これは自分個人のプロジェクトよりみんなのプロジェクトにしようと思い &lt;a href=&#34;https://github.com/oauthswift&#34;&gt;https://github.com/oauthswift&lt;/a&gt; を取ってそちらに移行してフランスの方にマージ権限を渡しました。&lt;/p&gt;&#xA;&lt;p&gt;先月に入ってフランスの方からメール来て、ある企業(Auth0)がスポンサーになりたいと言って、README.mdにその企業のロゴとリンクを入れてくれると毎月スポンサー費としてドルが入って来ると言って君は同意か反対かと聞かれました。その企業見てたらOAuth関連の企業でREADME.mdに一行追加することでエンジニアに迷惑かかることもないと思い同意しました。その後はちょっと面倒なinvoiceや国際振込などなど&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OAuthSwift/OAuthSwift/commit/bc25abe8d719e9c1eccc9446568e167259f1585d#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5&#34;&gt;https://github.com/OAuthSwift/OAuthSwift/commit/bc25abe8d719e9c1eccc9446568e167259f1585d#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;額は書きませんが、いい肉食えるぐらいです。OSSでこんないいことあるとは夢にも思ってませんでした。&lt;/p&gt;&#xA;&lt;p&gt;OSSで金儲けなど考えたこともないので、このお金をどこかに寄付しようと妻と話した結果ユニセフに寄付することにしました。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;OSS最高&lt;/li&gt;&#xA;&lt;li&gt;GitHub最高&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Carthage</title>
      <link>https://dongri.github.io/2015/01/carthage/</link>
      <pubDate>Thu, 15 Jan 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/01/carthage/</guid>
      <description>&lt;p&gt;OAuthSwiftをCarthageに対応したので、メモとして残します。&lt;/p&gt;&#xA;&lt;h3 id=&#34;carthageってなんなの&#34;&gt;Carthageってなんなの？&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;https://github.com/Carthage/Carthage&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;「カルタゴ」と読んで、Swift対応したライブラリ管理ツールです。&lt;/p&gt;&#xA;&lt;p&gt;インストール、使い方はgithubページ見ればわかると思います。&lt;/p&gt;&#xA;&lt;p&gt;基本的な使い方は Cartfile 作成して使いたいgithubのライブラリをリストで書いてから&#xA;「carthage update」するとCarthage/Buildの下に ******.framework ファイルが出来上がるので&#xA;それをプロジェクトにドラッグアンドドロップして入れる。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim Cartfile&#xA;github &amp;#34;dongri/OAuthSwift&amp;#34; ~&amp;gt; 0.1.7&#xA;&#xA;$ carthage update&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;既存のライブラリcarthage対応&#34;&gt;既存のライブラリCarthage対応&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Targets に 新しい Cocoa Touch Framework Schemeを作る。Shared になってること確認。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://farm8.staticflickr.com/7583/15666092073_76b41b17b1.jpg&#34; alt=&#34;Scheme Shared&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;既存ライブラリを新しいTargetに移す&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Swift Compiler設定&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8598/16098635750_0c10d33669.jpg&#34; alt=&#34;Swift Compiler&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Compile Sourcesに必要なSwiftファイル追加&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8561/16100158557_400084b6c6.jpg&#34; alt=&#34;Swift Compiler&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Schemeを新しいtargetにしてビルドする。（iOS Deviceにして）&#xA;エラーになったら自己解決&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;carthage buildしてみる。githubに上げる前に、ローカルでビルとして、正常に ******.framework が出来上がるのを確認。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ carthage build --no-skip-current&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;githubに上げる。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git tag v0.1.0&#xA;$ git push origin v0.1.0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上でcarthage対応完了。&lt;/p&gt;&#xA;&lt;p&gt;対応したプロジェクトがこれ。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/OAuthSwift&#34;&gt;https://github.com/dongri/OAuthSwift&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>OAuthSwift</title>
      <link>https://dongri.github.io/2014/06/oauthswift/</link>
      <pubDate>Sun, 29 Jun 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/06/oauthswift/</guid>
      <description>&lt;p&gt;先日社内SwiftハッカソンでFlickrのPrivate写真を見せるアプリを作ろうとしたところ、&#xA;FlickrのOAuth認証で半日ハマって結局Private写真はだめで、キーワード検索アプリを作った。&#xA;その後Githubで検索しても、ちょっと汎用的なiOSのOAuthライブラリがなくて、&#xA;Swiftの勉強も含めてOAuthライブラリを書いてみた。(OAuth1.0, OAuth2.0両方対応したつもりであるが)&lt;/p&gt;&#xA;&lt;p&gt;Github : &lt;a href=&#34;https://github.com/dongri/OAuthSwift&#34; title=&#34;OAuthSwift&#34;&gt;https://github.com/dongri/OAuthSwift&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用例：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// OAuth1.0&#xA;let oauthswift = OAuth1Swift(&#xA;    consumerKey:    &amp;#34;********&amp;#34;,&#xA;    consumerSecret: &amp;#34;********&amp;#34;,&#xA;    requestTokenUrl: &amp;#34;https://api.twitter.com/oauth/request_token&amp;#34;,&#xA;    authorizeUrl:    &amp;#34;https://api.twitter.com/oauth/authorize&amp;#34;,&#xA;    accessTokenUrl:  &amp;#34;https://api.twitter.com/oauth/access_token&amp;#34;&#xA;)&#xA;oauthswift.authorizeWithCallbackURL( NSURL(string: &amp;#34;oauth-swift://oauth-callback/twitter&amp;#34;), success: {&#xA;    credential, response in&#xA;    println(credential.oauth_token)&#xA;    println(credential.oauth_token_secret)&#xA;}, failure: failureHandler)&#xA;&#xA;// OAuth2.0&#xA;let oauthswift = OAuth2Swift(&#xA;    consumerKey:    &amp;#34;********&amp;#34;,&#xA;    consumerSecret: &amp;#34;********&amp;#34;,&#xA;    authorizeUrl:   &amp;#34;https://api.instagram.com/oauth/authorize&amp;#34;,&#xA;    responseType:   &amp;#34;token&amp;#34;&#xA;)&#xA;oauthswift.authorizeWithCallbackURL( NSURL(string: &amp;#34;oauth-swift://oauth-callback/instagram&amp;#34;), scope: &amp;#34;likes+comments&amp;#34;, state:&amp;#34;INSTAGRAM&amp;#34;, success: {&#xA;    credential, response in&#xA;    println(credential.oauth_token)&#xA;}, failure: failureHandler)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;各サービスoauth関連ページ&#34;&gt;各サービスOAuth関連ページ&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Twitter:&lt;br&gt;&#xA;&lt;a href=&#34;%22oauth%22&#34;&gt;https://dev.twitter.com/docs/auth/oauth&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Flickr:&lt;br&gt;&#xA;&lt;a href=&#34;%22oauth%22&#34;&gt;https://www.flickr.com/services/api/auth.oauth.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>mongri</title>
      <link>https://dongri.github.io/2014/05/mongri/</link>
      <pubDate>Sun, 18 May 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/05/mongri/</guid>
      <description>&lt;p&gt;mongohqのweb consoleに慣れてから、自前でmongodb構築した場合に一番困ったのがadmin toolでした。&lt;br&gt;&#xA;一応公式ページ &lt;a href=&#34;http://docs.mongodb.org/ecosystem/tools/administration-interfaces/&#34; title=&#34;Admin UIs&#34;&gt;Admin UIs&lt;/a&gt; にいろいろ載ってるけど、&#xA;どれも使い物にならない。Mac AppはRetina対応してないし、PHPで作れてるし、正規表現で検索でないし、開発止まってるし。。。&lt;br&gt;&#xA;ということで自分で作ることにしました。言語、フレームワークとか考えたらmongodbならnodeと相性がいいので、nodejs + express + mongooseで作りました。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Github : &lt;a href=&#34;https://github.com/dongri/mongri&#34; title=&#34;mongri&#34;&gt;mongri&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Demo   : &lt;a href=&#34;http://mongri.heroku.com&#34; title=&#34;mongri on heroku&#34;&gt;mongri on heroku&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone git@github.com:dongri/mongri.git&#xA;$ cd mongri&#xA;$ npm install&#xA;$ node app.js&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;TODO: collection作成、collection削除、db status監視&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
