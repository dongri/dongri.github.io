<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grpc on dongri</title>
    <link>https://dongri.github.io/tags/grpc/</link>
    <description>Recent content in Grpc on dongri</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Dec 2017 23:36:27 +0900</lastBuildDate>
    <atom:link href="https://dongri.github.io/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SwiftでgRPC対応する</title>
      <link>https://dongri.github.io/2017/12/swift%E3%81%A7grpc%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B/</link>
      <pubDate>Thu, 14 Dec 2017 23:36:27 +0900</pubDate>
      <guid>https://dongri.github.io/2017/12/swift%E3%81%A7grpc%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B/</guid>
      <description>&lt;p&gt;サーバー側gRPC対応終わったので、クライアントもgRPC対応してみました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;サーバー側api&#34;&gt;サーバー側API&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://lgtm.lol/api&#34;&gt;https://lgtm.lol/api&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;protoファイル準備&#34;&gt;protoファイル準備&lt;/h2&gt;&#xA;&lt;p&gt;protosディレクトリを作成して、↑のドキュメントから &lt;code&gt;api.proto&lt;/code&gt; を作成します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;specファイル作成&#34;&gt;specファイル作成&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;api.podspec&lt;/code&gt; ファイルを作成&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Pod::Spec.new do |s|&#xA;  s.name     = &amp;#34;api&amp;#34;&#xA;  s.version  = &amp;#34;0.0.1&amp;#34;&#xA;  s.license  = &amp;#34;MIT&amp;#34;&#xA;  s.authors  = { &amp;#39;Dongri Jin&amp;#39; =&amp;gt; &amp;#39;dongrify@gmail.com&amp;#39; }&#xA;  s.homepage = &amp;#34;https://github.com/dongri&amp;#34;&#xA;  s.summary = &amp;#34;gRPC API&amp;#34;&#xA;  s.source = { :git =&amp;gt; &amp;#39;https://github.com/dongri/grpc.git&amp;#39; }&#xA;&#xA;  s.ios.deployment_target = &amp;#34;10.1&amp;#34;&#xA;&#xA;  src = &amp;#34;./protos&amp;#34;&#xA;&#xA;  # gRPC Plugin&#xA;  s.dependency &amp;#34;!ProtoCompiler-gRPCPlugin&amp;#34;, &amp;#34;~&amp;gt; 1.0&amp;#34;&#xA;&#xA;  pods_root = &amp;#39;Pods&amp;#39;&#xA;&#xA;  protoc_dir = &amp;#34;#{pods_root}/!ProtoCompiler&amp;#34;&#xA;  protoc = &amp;#34;#{protoc_dir}/protoc&amp;#34;&#xA;  plugin = &amp;#34;#{pods_root}/!ProtoCompiler-gRPCPlugin/grpc_objective_c_plugin&amp;#34;&#xA;&#xA;  dir = &amp;#34;#{pods_root}/#{s.name}&amp;#34;&#xA;&#xA;  # source files&#xA;  s.prepare_command = &amp;lt;&amp;lt;-CMD&#xA;    mkdir -p #{dir}&#xA;    #{protoc} \&#xA;        --plugin=protoc-gen-grpc=#{plugin} \&#xA;        --objc_out=#{dir} \&#xA;        --grpc_out=#{dir} \&#xA;        -I #{src} \&#xA;        -I #{protoc_dir} \&#xA;        #{src}/api.proto&#xA;  CMD&#xA;&#xA;  # subspec&#xA;  s.subspec &amp;#34;Messages&amp;#34; do |ms|&#xA;    ms.source_files = &amp;#34;#{dir}/*.pbobjc.{h,m}&amp;#34;, &amp;#34;#{dir}/**/*.pbobjc.{h,m}&amp;#34;&#xA;    ms.header_mappings_dir = dir&#xA;    ms.requires_arc = false&#xA;    ms.dependency &amp;#34;Protobuf&amp;#34;&#xA;  end&#xA;&#xA;  # subspec&#xA;  s.subspec &amp;#34;Services&amp;#34; do |ss|&#xA;    ss.source_files = &amp;#34;#{dir}/*.pbrpc.{h,m}&amp;#34;, &amp;#34;#{dir}/**/*.pbrpc.{h,m}&amp;#34;&#xA;    ss.header_mappings_dir = dir&#xA;    ss.requires_arc = true&#xA;    ss.dependency &amp;#34;gRPC-ProtoRPC&amp;#34;&#xA;    ss.dependency &amp;#34;#{s.name}/Messages&amp;#34;&#xA;  end&#xA;&#xA;  s.pod_target_xcconfig = {&#xA;    &amp;#39;GCC_PREPROCESSOR_DEFINITIONS&amp;#39; =&amp;gt; &amp;#39;$(inherited) GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS=1&amp;#39;,&#xA;    &amp;#39;CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES&amp;#39; =&amp;gt; &amp;#39;YES&amp;#39;,&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.&#xA;├── LGTM&#xA;├── Podfile&#xA;├── Podfile.lock&#xA;├── api.podspec&#xA;└── protos&#xA;    └── api.proto&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;install&#34;&gt;install&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ pod init&#xA;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これで &lt;code&gt;Pods -&amp;gt; Development Pods -&amp;gt; api&lt;/code&gt; ができるので &lt;code&gt;Bridging-Header.h&lt;/code&gt; ファイルを作成してimpoorします。&lt;/p&gt;</description>
    </item>
    <item>
      <title>RubyでgRPC対応する</title>
      <link>https://dongri.github.io/2017/12/ruby%E3%81%A7grpc%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B/</link>
      <pubDate>Thu, 14 Dec 2017 19:13:30 +0900</pubDate>
      <guid>https://dongri.github.io/2017/12/ruby%E3%81%A7grpc%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B/</guid>
      <description>&lt;p&gt;既存のRailsのRest APIをgRPC対応しました。&lt;/p&gt;&#xA;&lt;h1 id=&#34;gem-install&#34;&gt;gem install&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gem install grpc&#xA;$ gem install grpc-tools&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;protoファイル作成&#34;&gt;protoファイル作成&lt;/h1&gt;&#xA;&lt;p&gt;api.proto&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;syntax = &amp;#34;proto3&amp;#34;;&#xA;&#xA;package api;&#xA;&#xA;service LGTM {&#xA;  rpc Items (ItemsRequest) returns (ItemsResponse) {}&#xA;  rpc Upload (UploadRequest) returns (UploadResponse) {}&#xA;  rpc Item (ItemRequest) returns (ItemResponse) {}&#xA;}&#xA;&#xA;message Item {&#xA;    int64 id = 1;&#xA;    string url = 2;&#xA;}&#xA;&#xA;message ItemsRequest {&#xA;  int64 page = 1;&#xA;}&#xA;&#xA;message ItemsResponse {&#xA;  repeated Item items = 1;&#xA;}&#xA;&#xA;message ItemRequest {&#xA;  int64 id = 1;&#xA;}&#xA;&#xA;message ItemResponse {&#xA;  Item item = 1;&#xA;}&#xA;&#xA;message UploadRequest {&#xA;  string image = 1;&#xA;}&#xA;&#xA;message UploadResponse {&#xA;  string result = 1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;ファイル生成&#34;&gt;ファイル生成&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ grpc_tools_ruby_protoc -I . --ruby_out=lib --grpc_out=lib ./api.proto&#xA;&#xA;$ tree lib&#xA;lib&#xA;├── api_pb.rb&#xA;├── api_services_pb.rb&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;server側&#34;&gt;Server側&lt;/h1&gt;&#xA;&lt;p&gt;grpc_api_server.rb&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
