<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Heroku on dongri</title>
    <link>https://dongri.github.io/tags/heroku/</link>
    <description>Recent content in Heroku on dongri</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Apr 2019 14:40:34 +0900</lastBuildDate>
    <atom:link href="https://dongri.github.io/tags/heroku/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Haskellで自分のWebページをリニューアルした</title>
      <link>https://dongri.github.io/2019/04/haskell%E3%81%A7%E8%87%AA%E5%88%86%E3%81%AEweb%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E3%83%AA%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%A2%E3%83%AB%E3%81%97%E3%81%9F/</link>
      <pubDate>Sun, 21 Apr 2019 14:40:34 +0900</pubDate>
      <guid>https://dongri.github.io/2019/04/haskell%E3%81%A7%E8%87%AA%E5%88%86%E3%81%AEweb%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E3%83%AA%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%A2%E3%83%AB%E3%81%97%E3%81%9F/</guid>
      <description>&lt;p&gt;二週間前からHaskellにハマっており、当初は会社のあるサンプルコードをHaskellに書いてみようと思ったのがサーバーのスペックなど考えて諦めて自分のWebページをリニューアルに至ったところです。&lt;/p&gt;&#xA;&lt;p&gt;以下HaskellでWebページの開発、公開まで書いてみようと思います。 &lt;code&gt;Webページ　\= Webシステム&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;開発環境はMac OSXでのDocker for Macです。haskell, dockerのインストールなど省略させてください。&lt;/p&gt;&#xA;&lt;h2 id=&#34;haskellでweb開発&#34;&gt;HaskellでWeb開発？&lt;/h2&gt;&#xA;&lt;p&gt;正気なの？と思う方もいるかと思います、意外とその辺のWebフレームワークは存在してました。&lt;/p&gt;&#xA;&lt;h4 id=&#34;haskell-web-framework&#34;&gt;Haskell Web Framework&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Yesod (&lt;a href=&#34;https://www.yesodweb.com/&#34;&gt;https://www.yesodweb.com/&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Scotty (&lt;a href=&#34;https://github.com/scotty-web/scotty&#34;&gt;https://github.com/scotty-web/scotty&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Miso (&lt;a href=&#34;https://github.com/dmjio/miso&#34;&gt;https://github.com/dmjio/miso&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Servant (&lt;a href=&#34;https://www.servant.dev/&#34;&gt;https://www.servant.dev/&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;今回はScottyを使うことにしました。Yesodと違ってScottyはWeb API向け軽量フレームワークでhtmlのレンダリングにはまた別のものを用意しなければなりませんでした。レンダリングエンジンもいろいろあるみたいですが、今回はblaze-htmlを使うことにしました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;デプロイサーバー&#34;&gt;デプロイサーバー&lt;/h2&gt;&#xA;&lt;p&gt;もともと自分のWebページはgoogle appengineの無料枠で動かしてました。今回もdockerでappengineでなんとかしようとしてみました。具体的にはgoogle container registryにimageをpushしてappengineからそれをデプロイする方法です。無料枠だとデプロイはやっと成功するが、ページにアクセスするとエラーが出ました。（「サーバーが一時的に停止、30秒後にもう一回試してみろ」のエラーだけどあてにならない）&lt;/p&gt;&#xA;&lt;p&gt;次は自分が持ってるvultr vpsでdocker-composeでなんとか動かせないかと。既にサーバーに別のものが動いていて残りメモリは700MBぐらいでした。そこでdocker-compose up (stack build) したらsshが反応しなくなり、ほかのdocker containerも不正終了されました。&lt;/p&gt;&#xA;&lt;p&gt;諦めようかと思ったが、最後にherokuで試してみようと思いました。調べてみたら、heroku container registryこいつが非常に優秀てgoogle container registryより使い勝手が良かったです。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ heroku container:push web&#xA;$ heroku container:release web&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;この2つのコマンドでデプロイ、リリースが完了です！&lt;/p&gt;&#xA;&lt;h2 id=&#34;herokuのプロセススリープ&#34;&gt;herokuのプロセススリープ&lt;/h2&gt;&#xA;&lt;p&gt;herokuの無料dynoでは一定時間アクセスがないとプロセスを殺して、再びアクセス来る時にプロセスを起動するので、最初の表示に非常に時間かかります。そこはheroku schedulerを使って10分おきにcurlコマンドでサイト起こしてあげることにしました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;https化&#34;&gt;https化&lt;/h2&gt;&#xA;&lt;p&gt;herokuではカスタムドメインの設定できますが、httpsにするには有料プランのdynoを買わないと駄目ぽいです。そこはcloudflareを使うことにしました。&#xA;ネームサーバー変更して数時間待てば反映されます。しかもroot domainもサポートしていてwwwも消すことができます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;&#xA;&lt;p&gt;これで完全無料でHaskellでWebページ公開できました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dongri.org&#34;&gt;https://dongri.org&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;詳細はGitHubのRepo見ればわかるかと思います。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/iam&#34;&gt;https://github.com/dongri/iam&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust on Heroku with Docker</title>
      <link>https://dongri.github.io/2016/08/rust-on-heroku-with-docker/</link>
      <pubDate>Tue, 16 Aug 2016 00:42:53 +0900</pubDate>
      <guid>https://dongri.github.io/2016/08/rust-on-heroku-with-docker/</guid>
      <description>&lt;p&gt;Rustで書いたhello rustをherokuに載せてみた。&#xA;普通ならrust用のBuildpack使うのだが、今回はdockerを使うようにした。&#xA;Dockerfile、ソースコードなどはこちら&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/hello-rust&#34;&gt;https://github.com/dongri/hello-rust&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;はじめはalpineで頑張ってみようかと思ったがrustのインストールがうまく行かなくて、ubuntuに変更。&#xA;Dockerfileは以下のようになっている。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM ubuntu:latest&#xA;&#xA;# rust, cargo buildに必要なソフトウェアインストール&#xA;RUN apt-get -y update&#xA;RUN apt-get -y install curl file sudo gcc&#xA;&#xA;# rustのインストール&#xA;RUN curl -sSf https://static.rust-lang.org/rustup.sh | sh&#xA;&#xA;RUN mkdir -p /app&#xA;WORKDIR /app&#xA;COPY . /app&#xA;&#xA;# ビルドして ./target/release/helloバイナリを作る&#xA;RUN cargo build --release&#xA;&#xA;EXPOSE 8080&#xA;&#xA;# 実行&#xA;CMD /app/target/release/hello&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;readmeにも書いてあるがherokuはdockerをサポートしていて、pushするだけでローカルのdockerと&#xA;同じように動かせる。必要なのは、heroku-container-toolsというheroku plugin。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ heroku plugins:install heroku-container-tools&#xA;$ heroku container:push web&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これでだけでherokuにアップされて動く。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hello-rust.herokuapp.com/&#34;&gt;https://hello-rust.herokuapp.com/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goodbye Heroku</title>
      <link>https://dongri.github.io/2015/05/goodbye-heroku/</link>
      <pubDate>Mon, 11 May 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/05/goodbye-heroku/</guid>
      <description>&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;これが2007年同時のherokuでした。エディタ使わずブラウザでコード書いてSaveするとRailsが動く！素晴らしい！&lt;/p&gt;&#xA;&lt;p&gt;その後gitが流行り始めgit pushでデプロイできるようになりましたね。heroku buttonも出てOne Clickでデプロイできるようになったり。&lt;/p&gt;&#xA;&lt;p&gt;2007年から今まで使ってて、Privateのプロジェクトも一時には会社のプロジェクトにも使いました。&lt;/p&gt;&#xA;&lt;p&gt;初めはRubyだけだったのが、今はjava, scala, php, python, nodejs, goまでサポートしてます。最近はdockerもサポートするので、言語問わなくデプロイできちゃいますね。&lt;/p&gt;&#xA;&lt;p&gt;herokuの特徴と言えばとりあえず動かせるを場を提供する。そのかわりファイルアップロードできない、一定時間でスリープ、などいろいろ制限されるけど、sandboxとしては十分で便利なプラットフォームです。&lt;/p&gt;&#xA;&lt;p&gt;自分のリポジトリ数えてみたらびっくりしました。50個近くのアプリがデプロイされてました。(ほとんどがゴミ w w w)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.heroku.com/archives/2015/5/7/new-dyno-types-public-beta&#34;&gt;https://blog.heroku.com/archives/2015/5/7/new-dyno-types-public-beta&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;こんなので自分の遊びがなくなりました。$7 払えないわけではない。しかし昔みたいにとりあえずherokuみたいな感じにはなれない。&lt;/p&gt;&#xA;&lt;p&gt;herokuの代わりのものを Google Cloud, AWS も検討してみましたが、結局は DigitalOceanでサーバー立てて、&lt;a href=&#34;https://github.com/progrium/dokku&#34;&gt;dokku&lt;/a&gt; 入れて自分専用の遊び場を作ることにしました。&lt;/p&gt;&#xA;&lt;p&gt;今のところ4GBでnode, rails, goなど10個のcontainer立ち上げても問題なさそうです。&lt;/p&gt;&#xA;&lt;p&gt;heroku長い間お世話になりました！&lt;/p&gt;&#xA;&lt;p&gt;Goodbye! Heroku!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ghost On Heroku</title>
      <link>https://dongri.github.io/2015/02/ghost-on-heroku/</link>
      <pubDate>Tue, 17 Feb 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/02/ghost-on-heroku/</guid>
      <description>&lt;p&gt;Ghostをherokuにデプロイしてみた。&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;以下はあくまでの自分の環境で、nodeとpostgresなど一通りの開発環境は整った環境です。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;ghostをローカルで動かしてみる&#34;&gt;Ghostをローカルで動かしてみる&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd /path/to/ghost/folder/&#xA;$ npm install --production&#xA;&#xA;$ npm start&#xA;$ open http://localhost:2368&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;herokuにpg-addon追加&#34;&gt;herokuにpg addon追加&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ heroku addons:add heroku-postgresql:dev&#xA;&#xA;$ heroku config&#xA;DATABASE_URL:                 postgres://{username}:{password}@ec2-***.compute-1.amazonaws.com:5432/{database}&#xA;HEROKU_POSTGRESQL_PURPLE_URL: postgres://{username}:{password}@ec2-***.compute-1.amazonaws.com:5432/{database}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;packagejson-修正&#34;&gt;package.json 修正&lt;/h2&gt;&#xA;&lt;p&gt;package.jsonのdependenciesにpg追加。バージョンは固定にしたほうがいいかも。。。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;dependencies&amp;#34;: {&#xA;  ....,&#xA;  &amp;#34;pg&amp;#34;: &amp;#34;4.2.0&amp;#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;configjs-修正&#34;&gt;config.js 修正&lt;/h2&gt;&#xA;&lt;p&gt;以下の部分をproductionのところに設定する。databaseの部分は上のDATABASE_URLのところ参照&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;database: {&#xA;  client: &amp;#39;postgres&amp;#39;,&#xA;  connection: {&#xA;        host: &amp;#39;ec2-***.compute-1.amazonaws.com&amp;#39;,&#xA;        user: &amp;#39;{username}&amp;#39;,&#xA;        password: &amp;#39;{password}&amp;#39;,&#xA;        database: &amp;#39;{database}&amp;#39;,&#xA;        port: &amp;#39;5432&amp;#39;&#xA;  }&#xA;},&#xA;&#xA;server: {&#xA;    host: &amp;#39;0.0.0.0&amp;#39;,&#xA;    port: process.env.PORT&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;procfileファイル追加&#34;&gt;Procfileファイル追加&lt;/h2&gt;&#xA;&lt;p&gt;herokuにnodejsアプリをデプロイした人にはわかると思うがProfileを作成&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim Procfile&#xA;web: node index.js --production&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;git-remote-push&#34;&gt;git remote, push&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git init&#xA;$ git remote add origin git@heroku.com:{app}.git&#xA;$ git add .&#xA;$ git commit -m &amp;#34;Ghost&amp;#34;&#xA;$ git push origin master&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;debug&#34;&gt;Debug&lt;/h2&gt;&#xA;&lt;p&gt;heroku上でApplication Error!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Migrating to Cedar-14 Stack</title>
      <link>https://dongri.github.io/2015/01/migrating-to-cedar-14-stack/</link>
      <pubDate>Sat, 10 Jan 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/01/migrating-to-cedar-14-stack/</guid>
      <description>&lt;p&gt;bamboo-mri-1.9.2 stack 下岗了。&lt;/p&gt;&#xA;&lt;p&gt;Migrating to the Celadon Cedar-14 Stack&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ heroku stack:set cedar-14&#xA;stack set, next release on production-app will use cedar-14&#xA;Run `git push heroku master` to create a new release on cedar-14&#xA;&#xA;$ git commit --allow-empty -m &amp;#34;Upgrading to Cedar-14&amp;#34;&#xA;[master 973c3f7] Upgrading to Cedar-14&#xA;&#xA;$ git push heroku master&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Revel on Heroku</title>
      <link>https://dongri.github.io/2014/12/revel-on-heroku/</link>
      <pubDate>Thu, 11 Dec 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/12/revel-on-heroku/</guid>
      <description>&lt;p&gt;RevelをHerokuにデプロイしてみる。&lt;/p&gt;&#xA;&lt;h3 id=&#34;事前確認&#34;&gt;事前確認&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ echo $GOPATH&#xA;/Users/dongri/go&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;revelプロジェクト作成&#34;&gt;Revelプロジェクト作成&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ revel new team&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;↑で $GOPATH/src/にteamフォルダが出来上がる&lt;/p&gt;&#xA;&lt;h3 id=&#34;ローカルで実行してみる&#34;&gt;ローカルで実行してみる&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ revel run team&#xA;&#xA;$ open http://localhost:9000&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;herokuにbuildpackでデプロイ&#34;&gt;herokuにbuildpackでデプロイ&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ heroku create -b https://github.com/robfig/heroku-buildpack-go-revel.git&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;heroku画面でアプリの名前を変更する&#34;&gt;heroku画面でアプリの名前を変更する。&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git remote -v&#xA;$ git retemo rm origin&#xA;$ git remote add origin git@heroku.com:[app].git&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;godirファイル作成&#34;&gt;.godirファイル作成&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ pwd&#xA;/Users/dongri/go/src/team&#xA;$ echo &amp;#34;team&amp;#34; &amp;gt; .godir&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;デプロイ&#34;&gt;デプロイ&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git add .&#xA;$ git commit -m &amp;#34;hoge&amp;#34;&#xA;$ git push origin master&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上で完了&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang on heroku</title>
      <link>https://dongri.github.io/2014/10/golang-on-heroku/</link>
      <pubDate>Sat, 11 Oct 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/10/golang-on-heroku/</guid>
      <description>&lt;p&gt;今までGolangプロジェクトはGoogle App Engineにデプロイしたが、管理画面がいまだに&#xA;使い慣れてないのとAppEngine特有の癖があるので、やめてherokuにデプロイしてみた。&#xA;herokuも公式にはGolang対応してなくて、buildpackを使わないとダメ。&lt;/p&gt;&#xA;&lt;p&gt;herokuサポート言語&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://devcenter.heroku.com/categories/language-support&#34;&gt;https://devcenter.heroku.com/categories/language-support&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;buildpackはこちら&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kr/heroku-buildpack-go&#34;&gt;https://github.com/kr/heroku-buildpack-go&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;まずローカルでgoプロジェクトを作成して確認みる&#34;&gt;まずローカルでGoプロジェクトを作成して確認みる。&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd $GOPATH/src&#xA;&#xA;$ mkdir osakago&#xA;$ cd osakago&#xA;$ vim server.go&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;&#x9;&amp;#34;fmt&amp;#34;&#xA;&#x9;&amp;#34;net/http&amp;#34;&#xA;&#x9;&amp;#34;os&amp;#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;http.HandleFunc(&amp;#34;/&amp;#34;, hello)&#xA;&#x9;fmt.Printf(&amp;#34;Server listening on port %v ...\n&amp;#34;, os.Getenv(&amp;#34;PORT&amp;#34;))&#xA;&#x9;err := http.ListenAndServe(&amp;#34;:&amp;#34;+os.Getenv(&amp;#34;PORT&amp;#34;), nil)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;}&#xA;&#xA;func hello(res http.ResponseWriter, req *http.Request) {&#xA;&#x9;fmt.Fprintln(res, &amp;#34;hello, world&amp;#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ PORT=8080 go run server.go&#xA;Server listening on port 8080 ...&#xA;&#xA;$ curl -i localhost:8080&#xA;HTTP/1.1 200 OK&#xA;Date: Sat, 11 Oct 2014 05:04:01 GMT&#xA;Content-Length: 13&#xA;Content-Type: text/plain; charset=utf-8&#xA;&#xA;hello, world&#xA;$&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;バイナリ作成サーバー起動して確認&#34;&gt;バイナリ作成、サーバー起動して確認&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ go get&#xA;$ which osakago&#xA;/Users/you/go/bin/osakago&#xA;$ PORT=8080 osakago&#xA;$ curl -i localhost:8080&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;heroku側設定&#34;&gt;Heroku側設定&lt;/h3&gt;&#xA;&lt;p&gt;メールアドレスとか変わった場合とか認証がうまくいかない場合があるので、念の為loginしておく。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
