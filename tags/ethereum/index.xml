<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ethereum on dongri</title>
    <link>https://dongri.github.io/tags/ethereum/</link>
    <description>Recent content in Ethereum on dongri</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Jan 2023 18:15:43 +0900</lastBuildDate>
    <atom:link href="https://dongri.github.io/tags/ethereum/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Merge後のEthereumステーキングの話</title>
      <link>https://dongri.github.io/2023/01/the-merge%E5%BE%8C%E3%81%AEethereum%E3%82%B9%E3%83%86%E3%83%BC%E3%82%AD%E3%83%B3%E3%82%B0%E3%81%AE%E8%A9%B1/</link>
      <pubDate>Tue, 10 Jan 2023 18:15:43 +0900</pubDate>
      <guid>https://dongri.github.io/2023/01/the-merge%E5%BE%8C%E3%81%AEethereum%E3%82%B9%E3%83%86%E3%83%BC%E3%82%AD%E3%83%B3%E3%82%B0%E3%81%AE%E8%A9%B1/</guid>
      <description>&lt;p&gt;2022年9月15日にマージが無事完了。&#xA;ステーキングに関してinfura,alchemyなどのRPCがマージ後は使えなくなった。&#xA;つまりノードを自分で建てないといけない。2TBのストレージ用意するのは結構なコスト。&lt;/p&gt;&#xA;&lt;p&gt;今まではawsで月1万円ちょっとでalexaアプリ開発のクレジット50ドル分があったので、実質5千円ぐらいでステーキングできたのが、2TBストレージのノードまで建てると月7万円まで膨らんだ。クリプトのこの冬にこれはやってられないと思って、自宅でノード建てようと思った。使ってないMacBookでやってみたが1TBストレージが10日間ぐらいでいっぱいになった。外部SSD接続してもよいが、どうせやるならRaspberry Piで遊んでみようと思ってRaspberry Piと4TBのSSDを買って構築。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ハードウェア&#34;&gt;ハードウェア&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Raspberry Pi 4B 8GB&#xA;4TB SSD&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;いろいろな問題&#34;&gt;いろいろな問題&lt;/h2&gt;&#xA;&lt;p&gt;いろんな想定外の問題に遭遇したのでリストしてみた&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;2TB以上のストレージマウント問題&lt;br&gt;&#xA;OSとデータを4TB SSDで動かそうとして、マウントで2TB以上だとマウントがうまく行かない問題。GPTフォーマットにしないといけない。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Ethereum on Arm イメージ動かない問題&lt;br&gt;&#xA;&lt;a href=&#34;https://ethereum-on-arm-documentation.readthedocs.io/en/latest/index.html&#34;&gt;https://ethereum-on-arm-documentation.readthedocs.io/en/latest/index.html&lt;/a&gt;&#xA;インストールしたけど、ethereum/etehreumでログインできない。&#xA;諦めて自前でRaspberry Pi用のUbuntuを入れる&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;4TBストレージが壊れた&lt;br&gt;&#xA;Gethの同期中突然書き込めなくなった。試しに修復コマンドで頑張ってみたがだめだった。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Geth最後の100 blockぐらいで同期が終わらない問題&lt;br&gt;&#xA;最後の100 blockが12時間経っても同期が終わらない、ディスクI/Oか、bandwidthの問題&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;USB 2が遅い問題&lt;br&gt;&#xA;SSDをUSB 2のところに挿してた。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;WiFiが遅い問題&lt;br&gt;&#xA;MacBookではWiFiで問題なくステーキングできたけど、Raspberry PiのWiFiは遅い、LANケーブルに変更&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;電源問題&lt;br&gt;&#xA;Raspberry Pi買った時に付いて来た電源を使ってたが、しばらく動かすとsshできなくなり、Raspberry Piが無反応状態になる、PC用の電源に変更。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Prysmがメモリ食う問題&lt;br&gt;&#xA;Go製のPrysmは8GBのメモリでGethと一緒に動かすとメモリが足りなくてすぐ死ぬ、Rust製のLighthouseに変更&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;それでもメモリ足りない問題&lt;br&gt;&#xA;Lighthouseはある程度動かしたけど、数時間立つとvalidator client側が落ちる。&#xA;3GBのswapfile作成してswapスペースを確保する&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;普段クラウド（aws, gcp）で動かすとなかなか出会えない問題で辛かった。面白かったところもあるけど&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://dongri.github.io/images/post/2023-01-10/raspberry-pi.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ETH2 Staking</title>
      <link>https://dongri.github.io/2020/12/eth2-staking/</link>
      <pubDate>Sun, 13 Dec 2020 09:46:43 +0900</pubDate>
      <guid>https://dongri.github.io/2020/12/eth2-staking/</guid>
      <description>&lt;p&gt;ETH2のステーキング方法について、まともな日本語記事がなかったり、あっても会員登録必要だったり、逆にわかりにくかったりしたので、自分がやった手順を書こうと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;staking&#34;&gt;Staking&lt;/h2&gt;&#xA;&lt;p&gt;ステーキングとはPoS（Proof of Stake）において、仮想通貨を自由に動かせない状態（ロック状態）にしてブロックに追加するデータの承認などの面でネットワークの維持に関わる見返りとして、その報酬を仮想通貨で受け取る仕組みです。&#xA;ETH2のステーキングだと年利4.9% ~ 21.6%ですが、stakeするETHが多ければ多いほど下がります。12月12日時点で13%程度です。&#xA;デポジットに関しても始まった時の進捗では524,288 ETHまで間に合うか心配してたが、後半になって一気に増えて予定した12月1日のローンチに間に合いました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;deposit&#34;&gt;Deposit&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://launchpad.ethereum.org/&#34;&gt;https://launchpad.ethereum.org/&lt;/a&gt; で32ETHをデポジットします。（注意: デポジットされた32ETHは今のところ2年間ロックされるので注意が必要）&#xA;デポジット方法は、 &lt;a href=&#34;https://launchpad.ethereum.org/overview&#34;&gt;https://launchpad.ethereum.org/overview&lt;/a&gt; ここの手順のまま進めばできるかと思います。&#xA;特に難しいことはありませんでしたが、ETH1とETH2のクライアント選ぶ時もしかすると注意が必要です。後ほどBeacon node起動する時のクライアントと関係してるので。&#xA;自分の場合はどっちもGo言語実装のGethとPrysmを選択しました。&#xA;デポジットが完了すると、validator_keysファイルを取得できるので、安全な場所に保管します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;prysm-環境&#34;&gt;Prysm 環境&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.prylabs.network/docs/install/install-with-script#system-requirements&#34;&gt;https://docs.prylabs.network/docs/install/install-with-script#system-requirements&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Recommended specifications&#xA;* Processor: Intel Core i7–4770 or AMD FX-8310 or better&#xA;* Memory: 16GB RAM&#xA;* Storage: 100GB available space SSD&#xA;* Internet: Broadband connection&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ラズパイとかでやってみようかと思ってたけど、このスペックは難しいのでペナルティ受ける可能性のあるawsにしました。&#xA;aws, gcp, azureなど大手クラウドサービスだと障害が起きた時大規模のノードが止まる可能性があるので、ペナルティがあるようです。&lt;/p&gt;&#xA;&lt;p&gt;EC2インスタンス&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Memory: 16GB&#xA;Storage: 100GB&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;beacon-node&#34;&gt;Beacon node&lt;/h2&gt;&#xA;&lt;p&gt;続いてbeacon chainのnodeを起動する必要あります。&#xA;&lt;a href=&#34;https://docs.prylabs.network/docs/install/install-with-script/&#34;&gt;https://docs.prylabs.network/docs/install/install-with-script/&lt;/a&gt; こちらからprysm.shをダウンロードします。&#xA;続いて &lt;a href=&#34;https://docs.prylabs.network/docs/mainnet/joining-eth2&#34;&gt;https://docs.prylabs.network/docs/mainnet/joining-eth2&lt;/a&gt; こちらに書いてあるStepでbeacon nodeの起動、validator accountのインポート、validatorの起動順にやっていきます。&lt;/p&gt;&#xA;&lt;h3 id=&#34;prysmshダウンロード&#34;&gt;prysm.shダウンロード&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mkdir prysm &amp;amp;&amp;amp; cd prysm&#xA;$ curl https://raw.githubusercontent.com/prysmaticlabs/prysm/master/prysm.sh --output prysm.sh &amp;amp;&amp;amp; chmod +x prysm.sh&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;beacon-node-1&#34;&gt;Beacon node&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ./prysm.sh beacon-chain --http-web3provider=https://mainnet.infura.io/v3/****&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;自前のETH1ノード使いたくなかったので、infuraを使うようにしました。もちろん自前のETHノードでも問題ないです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SNSアカウントを使ったETH送金システム</title>
      <link>https://dongri.github.io/2020/05/sns%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9Feth%E9%80%81%E9%87%91%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0/</link>
      <pubDate>Sun, 31 May 2020 00:42:14 +0900</pubDate>
      <guid>https://dongri.github.io/2020/05/sns%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9Feth%E9%80%81%E9%87%91%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0/</guid>
      <description>&lt;p&gt;プライベートプロジェクトで &lt;a href=&#34;https://cryptotako.com&#34;&gt;cryptotako.com&lt;/a&gt; というサービスを開発しました。&lt;/p&gt;&#xA;&lt;p&gt;相手のイーサリアムアドレスを聞かなくてもシステム通してETHを送金することが可能です。&lt;/p&gt;&#xA;&lt;p&gt;サービスの主な機能は以下のようになります&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Twitter, GitHubなどのソーシャルネットワークアカウントでログイン&lt;/li&gt;&#xA;&lt;li&gt;Metamask, Dapperなどのウォレットからログイン&lt;/li&gt;&#xA;&lt;li&gt;Twitter, GitHub, ETH Addressを選択して送金&lt;/li&gt;&#xA;&lt;li&gt;Twttter, GitHub上での通知&lt;/li&gt;&#xA;&lt;li&gt;トランザクション履歴&lt;/li&gt;&#xA;&lt;li&gt;Twitter, GitHubアカウント連携でアドレス生成&lt;/li&gt;&#xA;&lt;li&gt;秘密鍵エクスポート&lt;/li&gt;&#xA;&lt;li&gt;email, username 変更&lt;/li&gt;&#xA;&lt;li&gt;法定通貨USD, JPYで換算表示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://dongri.github.io/images/post/2020-05-31/cryptotako1.png&#34; alt=&#34;image1&#34;&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2020-05-31/cryptotako2.png&#34; alt=&#34;image2&#34;&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2020-05-31/cryptotako3.png&#34; alt=&#34;image3&#34;&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2020-05-31/cryptotako4.png&#34; alt=&#34;image4&#34;&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2020-05-31/cryptotako5.png&#34; alt=&#34;image5&#34;&gt;&#xA;&lt;img src=&#34;https://dongri.github.io/images/post/2020-05-31/cryptotako6.png&#34; alt=&#34;image6&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>どんぐりコインを作ってみた</title>
      <link>https://dongri.github.io/2018/03/%E3%81%A9%E3%82%93%E3%81%90%E3%82%8A%E3%82%B3%E3%82%A4%E3%83%B3%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Tue, 06 Mar 2018 06:39:14 +0900</pubDate>
      <guid>https://dongri.github.io/2018/03/%E3%81%A9%E3%82%93%E3%81%90%E3%82%8A%E3%82%B3%E3%82%A4%E3%83%B3%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>&lt;p&gt;ICOで必要な新しい通貨の開発で、自分の中でずっともやもやしてたいくつかの疑問がちょっとはっきりしたので、&#xA;メモしながらみんなと共有できればと思います。&lt;/p&gt;&#xA;&lt;p&gt;ICOしてる企業は自分独自のブロックチェーンを作ってその上に新しい仮想通貨を発行してる、ずっとそう思って来たが、&#xA;それがちょっと違ったみたいでした。そういう企業もあれば、既存のプラットフォーム（Ethereum）でコインを発行するのが普通だったみたいです。&lt;/p&gt;&#xA;&lt;p&gt;以下、実際新しいトークンをEthereum上に作ってみた記事になります。&lt;/p&gt;&#xA;&lt;p&gt;GitHub: &lt;a href=&#34;https://github.com/dongri/DongriCoin&#34;&gt;https://github.com/dongri/DongriCoin&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;まず、今回の記事で使う用語、ソフトウェア、ツールをまとめます。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ethereum-イーサリアム&#34;&gt;Ethereum (イーサリアム)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;スマートコントラクトを実行するためのプラットフォーム。&lt;/li&gt;&#xA;&lt;li&gt;Ethereum Virtual Machine (EVM)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ethereum.org/&#34;&gt;https://www.ethereum.org/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;token-トークン&#34;&gt;Token (トークン)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;独自コインのこと&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;erc20トークン&#34;&gt;ERC20トークン&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ERC20 は、Ethereum ブロックチェーン上でトークンを発行する際の標準規格。&lt;/li&gt;&#xA;&lt;li&gt;ERC20 に準拠したトークンであれば、無数に存在する種類のトークンを同じ枠組みで価値移転することができます。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;truffle-トリュフ&#34;&gt;Truffle (トリュフ)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ethereum開発用フレームワーク。&lt;/li&gt;&#xA;&lt;li&gt;トークン作成、コンパイル、デプロイなど&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://truffleframework.com/&#34;&gt;http://truffleframework.com/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;solidity-ソリディティ&#34;&gt;Solidity (ソリディティ)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;スマートコントラクトを記述するための言語。&lt;/li&gt;&#xA;&lt;li&gt;デファクトスタンダードになりつつある。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ethereum.github.io/browser-solidity/&#34;&gt;https://ethereum.github.io/browser-solidity/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;infuraio&#34;&gt;infura.io&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ethereumホスティングサービス&lt;/li&gt;&#xA;&lt;li&gt;geth(go-ethereum)でノードの同期などしなくて済む&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://infura.io/&#34;&gt;https://infura.io/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;metamaskio&#34;&gt;metamask.io&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;イーサリアムウォレット&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://metamask.io/&#34;&gt;https://metamask.io/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;必要なソフトウェアはnodejsのみです。その後はnpmで必要なモジュールをインストールします。&lt;/p&gt;&#xA;&lt;h2 id=&#34;nodejsインストール&#34;&gt;nodejsインストール&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash&#xA;$ nvm ls-remote&#xA;$ nvm instal 8.9.4&#xA;$ nvm alias default 8.9.4&#xA;$ node -v&#xA;v8.9.4&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;truffleインストール&#34;&gt;truffleインストール&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ npm instal -g truffle&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;プロジェクト作成&#34;&gt;プロジェクト作成&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mkdir DongriCoin&#xA;$ cd DongriCoin&#xA;&#xA;$ truffle init&#xA;$ ls -l&#xA;&#xA;$ npm -f init&#xA;$ npm install zeppelin-solidity --save&#xA;$ npm install truffle-hdwallet-provider --save&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;contract作成&#34;&gt;contract作成&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim contracts/DongriCoin.sol&#xA;&#xA;pragma solidity ^0.4.18;&#xA;import &amp;#39;zeppelin-solidity/contracts/token/ERC20/MintableToken.sol&amp;#39;;&#xA;&#xA;contract DongriCoin is StandardToken {&#xA;  string public name = &amp;#34;DongriCoin&amp;#34;;&#xA;  string public symbol = &amp;#34;DON&amp;#34;;&#xA;  uint public decimals = 18;&#xA;&#xA;  function DongriCoin(uint initialSupply) public {&#xA;    totalSupply_ = initialSupply;&#xA;    balances[msg.sender] = initialSupply;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;migrate作成&#34;&gt;migrate作成&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim migrations/2_deploy_dongri_token.js&#xA;&#xA;const DongriCoin = artifacts.require(&amp;#39;./DongriCoin.sol&amp;#39;)&#xA;&#xA;module.exports = (deployer) =&amp;gt; {&#xA;  let initialSupply = 1000000e18 // 100万(初期発行量)&#xA;  deployer.deploy(DongriCoin, initialSupply)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;develop環境にデプロイ送金確認&#34;&gt;develop環境にデプロイ、送金確認&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ truffle compile&#xA;$ truffle develop&#xA;&#xA;truffle(develop)&amp;gt; migrate&#xA;&#xA;truffle(develop)&amp;gt; token = DongriCoin.at(DongriCoin.address)&#xA;&#xA;truffle(develop)&amp;gt; token.name()&#xA;&amp;#39;DongriCoin&amp;#39;&#xA;truffle(develop)&amp;gt; token.symbol()&#xA;&amp;#39;DON&amp;#39;&#xA;truffle(develop)&amp;gt; token.totalSupply()&#xA;BigNumber { s: 1, e: 24, c: [ 10000000000 ] }&#xA;&#xA;truffle(develop)&amp;gt; token.balanceOf(web3.eth.coinbase)&#xA;BigNumber { s: 1, e: 24, c: [ 10000000000 ] }&#xA;truffle(develop)&amp;gt; token.balanceOf(web3.eth.accounts[0])&#xA;BigNumber { s: 1, e: 24, c: [ 10000000000 ] }&#xA;truffle(develop)&amp;gt; token.balanceOf(web3.eth.accounts[1])&#xA;BigNumber { s: 1, e: 0, c: [ 0 ] }&#xA;truffle(develop)&amp;gt; token.transfer(web3.eth.accounts[1], 20000e18)&#xA;&#xA;truffle(develop)&amp;gt; token.balanceOf(web3.eth.accounts[1])&#xA;BigNumber { s: 1, e: 22, c: [ 200000000 ] }&#xA;truffle(develop)&amp;gt; token.balanceOf(web3.eth.accounts[0])&#xA;BigNumber { s: 1, e: 23, c: [ 9800000000 ] }&#xA;&#xA;truffle(develop)&amp;gt; token.totalSupply()&#xA;BigNumber { s: 1, e: 24, c: [ 10000000000 ] }&#xA;truffle(develop)&amp;gt;&#xA;&#xA;$ truffle compile&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;live環境にデプロイ&#34;&gt;live環境にデプロイ&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim truffle.js&#xA;const Web3 = require(&amp;#34;web3&amp;#34;);&#xA;const web3 = new Web3();&#xA;const HDWalletProvider = require(&amp;#34;truffle-hdwallet-provider&amp;#34;);&#xA;&#xA;// process.env.MNEMONIC: metamask.io 登録時の12 wordsを記載。&#xA;// process.env.INFURA_ACCESS_TOKEN: infura.io 登録で取得したaccess tokenを記載。&#xA;// process.env.FROM_ADDRESS: metamask.io でのアカウントアドレス。&#xA;&#xA;var mnemonic = process.env.MNEMONIC;&#xA;var accessToken = process.env.INFURA_ACCESS_TOKEN;&#xA;var fromAddress = process.env.FROM_ADDRESS&#xA;&#xA;module.exports = {&#xA;  networks: {&#xA;    live: {&#xA;      provider: function() {&#xA;        return new HDWalletProvider(&#xA;          mnemonic,&#xA;          &amp;#34;https://mainnet.infura.io/&amp;#34; + accessToken&#xA;        );&#xA;      },&#xA;      network_id: &amp;#34;1&amp;#34;,&#xA;      from: fromAddress,&#xA;      gas: 3000000,&#xA;      gasPrice: web3.toWei(&amp;#34;10&amp;#34;, &amp;#34;gwei&amp;#34;)&#xA;    }&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下のコマンド実行する前に、fromに書いてるアドレスに0.1ETHぐらい入れたほうがいいです。gasが足りないと失敗します。&#xA;2018/03/04 時点で2800円ぐらいでできました。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
