<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on dongri</title>
    <link>https://dongri.github.io/tags/golang/</link>
    <description>Recent content in Golang on dongri</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Feb 2015 11:28:57 +0900</lastBuildDate>
    <atom:link href="https://dongri.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>new vs make</title>
      <link>https://dongri.github.io/2015/02/new-vs-make/</link>
      <pubDate>Mon, 09 Feb 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/02/new-vs-make/</guid>
      <description>&lt;h2 id=&#34;new&#34;&gt;new&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://golang.org/pkg/builtin/#new&#34;&gt;http://golang.org/pkg/builtin/#new&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func new(Type) *Type&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;組み込み関数 new はメモリの割り当て、第一引数は型であり、値ではない。戻り値はポインタである。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;make&#34;&gt;make&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://golang.org/pkg/builtin/#make&#34;&gt;http://golang.org/pkg/builtin/#make&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func make(Type, size IntegerType) Type&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;組み込み関数 make は slice, map, chan型のメモリ割り当てとオブジェクトを初期化する。&lt;/li&gt;&#xA;&lt;li&gt;new と似ている、第一に引数は型であり、値ではない。new との違いは、make の戻り値はポインタではなく、値である。第一引数の型による。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;まとめ&#34;&gt;まとめ&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;new の役割はポインタの処理機か(*T)。make の役割は slice, map, chan 初期化かつ引用を戻す(T)。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main&#xA;&#xA;import &amp;#34;fmt&amp;#34;&#xA;&#xA;func main() {&#xA;  i := new(int)&#xA;  fmt.Println(&amp;amp;i)&#xA;  fmt.Println(*i)&#xA;  *i = 1&#xA;  fmt.Println(*i)&#xA;&#xA;  mySlice := make([]int, 10, 100)&#xA;  fmt.Println(mySlice)&#xA;  mySlice[2] = 2&#xA;  fmt.Println(mySlice)&#xA;&#xA;  myMap := make(map[string]string)&#xA;  fmt.Println(myMap)&#xA;  myMap[&amp;#34;Android&amp;#34;] = &amp;#34;OnePlus&amp;#34;&#xA;  myMap[&amp;#34;iOS&amp;#34;] = &amp;#34;iPhone&amp;#34;&#xA;  fmt.Println(myMap)&#xA;&#xA;  myChan := make(chan int, 2)&#xA;  myChan &amp;lt;- 1&#xA;  myChan &amp;lt;- 2&#xA;  fmt.Println(myChan)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Revel on Heroku</title>
      <link>https://dongri.github.io/2014/12/revel-on-heroku/</link>
      <pubDate>Thu, 11 Dec 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/12/revel-on-heroku/</guid>
      <description>&lt;p&gt;RevelをHerokuにデプロイしてみる。&lt;/p&gt;&#xA;&lt;h3 id=&#34;事前確認&#34;&gt;事前確認&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ echo $GOPATH&#xA;/Users/dongri/go&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;revelプロジェクト作成&#34;&gt;Revelプロジェクト作成&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ revel new team&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;↑で $GOPATH/src/にteamフォルダが出来上がる&lt;/p&gt;&#xA;&lt;h3 id=&#34;ローカルで実行してみる&#34;&gt;ローカルで実行してみる&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ revel run team&#xA;&#xA;$ open http://localhost:9000&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;herokuにbuildpackでデプロイ&#34;&gt;herokuにbuildpackでデプロイ&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ heroku create -b https://github.com/robfig/heroku-buildpack-go-revel.git&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;heroku画面でアプリの名前を変更する&#34;&gt;heroku画面でアプリの名前を変更する。&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git remote -v&#xA;$ git retemo rm origin&#xA;$ git remote add origin git@heroku.com:[app].git&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;godirファイル作成&#34;&gt;.godirファイル作成&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ pwd&#xA;/Users/dongri/go/src/team&#xA;$ echo &amp;#34;team&amp;#34; &amp;gt; .godir&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;デプロイ&#34;&gt;デプロイ&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git add .&#xA;$ git commit -m &amp;#34;hoge&amp;#34;&#xA;$ git push origin master&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上で完了&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang on heroku</title>
      <link>https://dongri.github.io/2014/10/golang-on-heroku/</link>
      <pubDate>Sat, 11 Oct 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/10/golang-on-heroku/</guid>
      <description>&lt;p&gt;今までGolangプロジェクトはGoogle App Engineにデプロイしたが、管理画面がいまだに&#xA;使い慣れてないのとAppEngine特有の癖があるので、やめてherokuにデプロイしてみた。&#xA;herokuも公式にはGolang対応してなくて、buildpackを使わないとダメ。&lt;/p&gt;&#xA;&lt;p&gt;herokuサポート言語&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://devcenter.heroku.com/categories/language-support&#34;&gt;https://devcenter.heroku.com/categories/language-support&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;buildpackはこちら&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kr/heroku-buildpack-go&#34;&gt;https://github.com/kr/heroku-buildpack-go&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;まずローカルでgoプロジェクトを作成して確認みる&#34;&gt;まずローカルでGoプロジェクトを作成して確認みる。&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd $GOPATH/src&#xA;&#xA;$ mkdir osakago&#xA;$ cd osakago&#xA;$ vim server.go&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;&#x9;&amp;#34;fmt&amp;#34;&#xA;&#x9;&amp;#34;net/http&amp;#34;&#xA;&#x9;&amp;#34;os&amp;#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;http.HandleFunc(&amp;#34;/&amp;#34;, hello)&#xA;&#x9;fmt.Printf(&amp;#34;Server listening on port %v ...\n&amp;#34;, os.Getenv(&amp;#34;PORT&amp;#34;))&#xA;&#x9;err := http.ListenAndServe(&amp;#34;:&amp;#34;+os.Getenv(&amp;#34;PORT&amp;#34;), nil)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;}&#xA;&#xA;func hello(res http.ResponseWriter, req *http.Request) {&#xA;&#x9;fmt.Fprintln(res, &amp;#34;hello, world&amp;#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ PORT=8080 go run server.go&#xA;Server listening on port 8080 ...&#xA;&#xA;$ curl -i localhost:8080&#xA;HTTP/1.1 200 OK&#xA;Date: Sat, 11 Oct 2014 05:04:01 GMT&#xA;Content-Length: 13&#xA;Content-Type: text/plain; charset=utf-8&#xA;&#xA;hello, world&#xA;$&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;バイナリ作成サーバー起動して確認&#34;&gt;バイナリ作成、サーバー起動して確認&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ go get&#xA;$ which osakago&#xA;/Users/you/go/bin/osakago&#xA;$ PORT=8080 osakago&#xA;$ curl -i localhost:8080&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;heroku側設定&#34;&gt;Heroku側設定&lt;/h3&gt;&#xA;&lt;p&gt;メールアドレスとか変わった場合とか認証がうまくいかない場合があるので、念の為loginしておく。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
