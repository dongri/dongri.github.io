<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haskell on dongri</title>
    <link>https://dongri.github.io/tags/haskell/</link>
    <description>Recent content in Haskell on dongri</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Apr 2019 14:40:34 +0900</lastBuildDate>
    <atom:link href="https://dongri.github.io/tags/haskell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Haskellで自分のWebページをリニューアルした</title>
      <link>https://dongri.github.io/2019/04/haskell%E3%81%A7%E8%87%AA%E5%88%86%E3%81%AEweb%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E3%83%AA%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%A2%E3%83%AB%E3%81%97%E3%81%9F/</link>
      <pubDate>Sun, 21 Apr 2019 14:40:34 +0900</pubDate>
      <guid>https://dongri.github.io/2019/04/haskell%E3%81%A7%E8%87%AA%E5%88%86%E3%81%AEweb%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E3%83%AA%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%A2%E3%83%AB%E3%81%97%E3%81%9F/</guid>
      <description>&lt;p&gt;二週間前からHaskellにハマっており、当初は会社のあるサンプルコードをHaskellに書いてみようと思ったのがサーバーのスペックなど考えて諦めて自分のWebページをリニューアルに至ったところです。&lt;/p&gt;&#xA;&lt;p&gt;以下HaskellでWebページの開発、公開まで書いてみようと思います。 &lt;code&gt;Webページ　\= Webシステム&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;開発環境はMac OSXでのDocker for Macです。haskell, dockerのインストールなど省略させてください。&lt;/p&gt;&#xA;&lt;h2 id=&#34;haskellでweb開発&#34;&gt;HaskellでWeb開発？&lt;/h2&gt;&#xA;&lt;p&gt;正気なの？と思う方もいるかと思います、意外とその辺のWebフレームワークは存在してました。&lt;/p&gt;&#xA;&lt;h4 id=&#34;haskell-web-framework&#34;&gt;Haskell Web Framework&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Yesod (&lt;a href=&#34;https://www.yesodweb.com/&#34;&gt;https://www.yesodweb.com/&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Scotty (&lt;a href=&#34;https://github.com/scotty-web/scotty&#34;&gt;https://github.com/scotty-web/scotty&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Miso (&lt;a href=&#34;https://github.com/dmjio/miso&#34;&gt;https://github.com/dmjio/miso&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Servant (&lt;a href=&#34;https://www.servant.dev/&#34;&gt;https://www.servant.dev/&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;今回はScottyを使うことにしました。Yesodと違ってScottyはWeb API向け軽量フレームワークでhtmlのレンダリングにはまた別のものを用意しなければなりませんでした。レンダリングエンジンもいろいろあるみたいですが、今回はblaze-htmlを使うことにしました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;デプロイサーバー&#34;&gt;デプロイサーバー&lt;/h2&gt;&#xA;&lt;p&gt;もともと自分のWebページはgoogle appengineの無料枠で動かしてました。今回もdockerでappengineでなんとかしようとしてみました。具体的にはgoogle container registryにimageをpushしてappengineからそれをデプロイする方法です。無料枠だとデプロイはやっと成功するが、ページにアクセスするとエラーが出ました。（「サーバーが一時的に停止、30秒後にもう一回試してみろ」のエラーだけどあてにならない）&lt;/p&gt;&#xA;&lt;p&gt;次は自分が持ってるvultr vpsでdocker-composeでなんとか動かせないかと。既にサーバーに別のものが動いていて残りメモリは700MBぐらいでした。そこでdocker-compose up (stack build) したらsshが反応しなくなり、ほかのdocker containerも不正終了されました。&lt;/p&gt;&#xA;&lt;p&gt;諦めようかと思ったが、最後にherokuで試してみようと思いました。調べてみたら、heroku container registryこいつが非常に優秀てgoogle container registryより使い勝手が良かったです。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ heroku container:push web&#xA;$ heroku container:release web&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;この2つのコマンドでデプロイ、リリースが完了です！&lt;/p&gt;&#xA;&lt;h2 id=&#34;herokuのプロセススリープ&#34;&gt;herokuのプロセススリープ&lt;/h2&gt;&#xA;&lt;p&gt;herokuの無料dynoでは一定時間アクセスがないとプロセスを殺して、再びアクセス来る時にプロセスを起動するので、最初の表示に非常に時間かかります。そこはheroku schedulerを使って10分おきにcurlコマンドでサイト起こしてあげることにしました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;https化&#34;&gt;https化&lt;/h2&gt;&#xA;&lt;p&gt;herokuではカスタムドメインの設定できますが、httpsにするには有料プランのdynoを買わないと駄目ぽいです。そこはcloudflareを使うことにしました。&#xA;ネームサーバー変更して数時間待てば反映されます。しかもroot domainもサポートしていてwwwも消すことができます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;&#xA;&lt;p&gt;これで完全無料でHaskellでWebページ公開できました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dongri.org&#34;&gt;https://dongri.org&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;詳細はGitHubのRepo見ればわかるかと思います。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/iam&#34;&gt;https://github.com/dongri/iam&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
