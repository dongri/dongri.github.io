<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oauth on dongri</title>
    <link>https://dongri.github.io/tags/oauth/</link>
    <description>Recent content in Oauth on dongri</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Feb 2015 11:28:57 +0900</lastBuildDate>
    <atom:link href="https://dongri.github.io/tags/oauth/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Google OAuth2</title>
      <link>https://dongri.github.io/2015/02/google-oauth2/</link>
      <pubDate>Mon, 16 Feb 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/02/google-oauth2/</guid>
      <description>&lt;p&gt;Google OAuth2のトークンを手動で取得メモ。通常はWebアプリはブラウザで取得してトークンとか保存すればいいのだが、&#xA;hubot scriptでcalendar情報とか取得したい場合は、そうはいかない。&lt;/p&gt;&#xA;&lt;h2 id=&#34;クライアントid作成&#34;&gt;クライアントID作成&lt;/h2&gt;&#xA;&lt;p&gt;予めGoogle Developer Console画面で、クライアントIDを作成&#xA;&lt;a href=&#34;https://console.developers.google.com/project&#34;&gt;https://console.developers.google.com/project&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;code-取得&#34;&gt;code 取得&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://accounts.google.com/o/oauth2/auth&#xA;?client_id={client_id}&#xA;&amp;amp;redirect_uri={callback_url}&#xA;&amp;amp;scope={scope}&#xA;&amp;amp;response_type=code&#xA;&amp;amp;approval_prompt=force&#xA;&amp;amp;access_type=offline&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;scopeは &lt;a href=&#34;https://www.googleapis.com/auth/calendar.readonly&#34;&gt;https://www.googleapis.com/auth/calendar.readonly&lt;/a&gt; など&lt;/p&gt;&#xA;&lt;p&gt;GETで上のURLを叩く。認証画面が開き、承認すると、指定したcallback_urlにcodeが返ってくる。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{callback_url}?code=4/W30HqfsDKmamqdW*****************&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;access_token-refresh_token-取得&#34;&gt;access_token, refresh_token 取得&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl&#xA;-d client_id={client_id}&#xA;-d client_secret={client_secret}&#xA;-d redirect_uri={callback_url}&#xA;-d grant_type=authorization_code&#xA;-d code={code} https://accounts.google.com/o/oauth2/token&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以下のJSON結果が返ってくる&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{&#xA;  &amp;#34;access_token&amp;#34; : &amp;#34;{access_token}&amp;#34;,&#xA;  &amp;#34;token_type&amp;#34; : &amp;#34;Bearer&amp;#34;,&#xA;  &amp;#34;expires_in&amp;#34; : 3600,&#xA;  &amp;#34;refresh_token&amp;#34; : &amp;#34;{refresh_token}&amp;#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;access_tokenの情報を確認してみる。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://www.googleapis.com/oauth2/v1/tokeninfo?access_token={access_token}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;アクセスする度にexpires_inが減って行くのがわかる。0になると、access_tokenは失効されるので、使えない。&lt;/p&gt;&#xA;&lt;h2 id=&#34;新しいaccess_tokenを取得&#34;&gt;新しいaccess_tokenを取得&lt;/h2&gt;&#xA;&lt;p&gt;expires_inで有効期限切れるまえに以下のPOSTで新しいaccess_tokenを取得&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl&#xA;-d client_id={client_id}&#xA;-d client_secret={client_secret}&#xA;-d refresh_token={refresh_token}&#xA;-d grant_type=refresh_token https://accounts.google.com/o/oauth2/token&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上の結果、新しいexpires_inが3600の新しいaccess_tokenが返ってくる。&lt;/p&gt;&#xA;&lt;p&gt;3600秒以内にaccess_tokenを更新して使えばOK!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Carthage</title>
      <link>https://dongri.github.io/2015/01/carthage/</link>
      <pubDate>Thu, 15 Jan 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/01/carthage/</guid>
      <description>&lt;p&gt;OAuthSwiftをCarthageに対応したので、メモとして残します。&lt;/p&gt;&#xA;&lt;h3 id=&#34;carthageってなんなの&#34;&gt;Carthageってなんなの？&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;https://github.com/Carthage/Carthage&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;「カルタゴ」と読んで、Swift対応したライブラリ管理ツールです。&lt;/p&gt;&#xA;&lt;p&gt;インストール、使い方はgithubページ見ればわかると思います。&lt;/p&gt;&#xA;&lt;p&gt;基本的な使い方は Cartfile 作成して使いたいgithubのライブラリをリストで書いてから&#xA;「carthage update」するとCarthage/Buildの下に ******.framework ファイルが出来上がるので&#xA;それをプロジェクトにドラッグアンドドロップして入れる。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim Cartfile&#xA;github &amp;#34;dongri/OAuthSwift&amp;#34; ~&amp;gt; 0.1.7&#xA;&#xA;$ carthage update&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;既存のライブラリcarthage対応&#34;&gt;既存のライブラリCarthage対応&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Targets に 新しい Cocoa Touch Framework Schemeを作る。Shared になってること確認。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://farm8.staticflickr.com/7583/15666092073_76b41b17b1.jpg&#34; alt=&#34;Scheme Shared&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;既存ライブラリを新しいTargetに移す&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Swift Compiler設定&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8598/16098635750_0c10d33669.jpg&#34; alt=&#34;Swift Compiler&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Compile Sourcesに必要なSwiftファイル追加&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8561/16100158557_400084b6c6.jpg&#34; alt=&#34;Swift Compiler&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Schemeを新しいtargetにしてビルドする。（iOS Deviceにして）&#xA;エラーになったら自己解決&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;carthage buildしてみる。githubに上げる前に、ローカルでビルとして、正常に ******.framework が出来上がるのを確認。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ carthage build --no-skip-current&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;githubに上げる。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git tag v0.1.0&#xA;$ git push origin v0.1.0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上でcarthage対応完了。&lt;/p&gt;&#xA;&lt;p&gt;対応したプロジェクトがこれ。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dongri/OAuthSwift&#34;&gt;https://github.com/dongri/OAuthSwift&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>OAuthSwift</title>
      <link>https://dongri.github.io/2014/06/oauthswift/</link>
      <pubDate>Sun, 29 Jun 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/06/oauthswift/</guid>
      <description>&lt;p&gt;先日社内SwiftハッカソンでFlickrのPrivate写真を見せるアプリを作ろうとしたところ、&#xA;FlickrのOAuth認証で半日ハマって結局Private写真はだめで、キーワード検索アプリを作った。&#xA;その後Githubで検索しても、ちょっと汎用的なiOSのOAuthライブラリがなくて、&#xA;Swiftの勉強も含めてOAuthライブラリを書いてみた。(OAuth1.0, OAuth2.0両方対応したつもりであるが)&lt;/p&gt;&#xA;&lt;p&gt;Github : &lt;a href=&#34;https://github.com/dongri/OAuthSwift&#34; title=&#34;OAuthSwift&#34;&gt;https://github.com/dongri/OAuthSwift&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用例：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// OAuth1.0&#xA;let oauthswift = OAuth1Swift(&#xA;    consumerKey:    &amp;#34;********&amp;#34;,&#xA;    consumerSecret: &amp;#34;********&amp;#34;,&#xA;    requestTokenUrl: &amp;#34;https://api.twitter.com/oauth/request_token&amp;#34;,&#xA;    authorizeUrl:    &amp;#34;https://api.twitter.com/oauth/authorize&amp;#34;,&#xA;    accessTokenUrl:  &amp;#34;https://api.twitter.com/oauth/access_token&amp;#34;&#xA;)&#xA;oauthswift.authorizeWithCallbackURL( NSURL(string: &amp;#34;oauth-swift://oauth-callback/twitter&amp;#34;), success: {&#xA;    credential, response in&#xA;    println(credential.oauth_token)&#xA;    println(credential.oauth_token_secret)&#xA;}, failure: failureHandler)&#xA;&#xA;// OAuth2.0&#xA;let oauthswift = OAuth2Swift(&#xA;    consumerKey:    &amp;#34;********&amp;#34;,&#xA;    consumerSecret: &amp;#34;********&amp;#34;,&#xA;    authorizeUrl:   &amp;#34;https://api.instagram.com/oauth/authorize&amp;#34;,&#xA;    responseType:   &amp;#34;token&amp;#34;&#xA;)&#xA;oauthswift.authorizeWithCallbackURL( NSURL(string: &amp;#34;oauth-swift://oauth-callback/instagram&amp;#34;), scope: &amp;#34;likes+comments&amp;#34;, state:&amp;#34;INSTAGRAM&amp;#34;, success: {&#xA;    credential, response in&#xA;    println(credential.oauth_token)&#xA;}, failure: failureHandler)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;各サービスoauth関連ページ&#34;&gt;各サービスOAuth関連ページ&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Twitter:&lt;br&gt;&#xA;&lt;a href=&#34;%22oauth%22&#34;&gt;https://dev.twitter.com/docs/auth/oauth&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Flickr:&lt;br&gt;&#xA;&lt;a href=&#34;%22oauth%22&#34;&gt;https://www.flickr.com/services/api/auth.oauth.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
