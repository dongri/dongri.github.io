<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on dongri</title>
    <link>https://dongri.github.io/tags/blog/</link>
    <description>Recent content in Blog on dongri</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Sep 2017 22:34:49 +0900</lastBuildDate>
    <atom:link href="https://dongri.github.io/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>社内サイドプロジェクトについて考えてみた</title>
      <link>https://dongri.github.io/2017/09/%E7%A4%BE%E5%86%85%E3%82%B5%E3%82%A4%E3%83%89%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%80%83%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Tue, 05 Sep 2017 22:34:49 +0900</pubDate>
      <guid>https://dongri.github.io/2017/09/%E7%A4%BE%E5%86%85%E3%82%B5%E3%82%A4%E3%83%89%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%80%83%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>&lt;p&gt;そもそも社内サイドプロジェクトとは何なのか？&#xA;自分の中ではGoogleの20%ルールの20%を業務時間外と考えた言葉。&lt;/p&gt;&#xA;&lt;p&gt;自分は決まったスケジュール、決まった仕様で開発するのがつまらないと思った。&#xA;そこで非エンジニアの方々からこんなのできるといいですねを拾ってプライベートの時間で社内サイドプロジェクトをするのが本業より面白かった。&#xA;そっちのほうがもっと達成感を感じるからだ。&lt;/p&gt;&#xA;&lt;p&gt;Apple WatchやTVなど今までいろいろやってきたサイドプロジェクトの感想を書いてみよう。&lt;/p&gt;&#xA;&lt;p&gt;流れは大体以下のようだ。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;作ると宣言せず家に帰って黙々とコードを書く&lt;/li&gt;&#xA;&lt;li&gt;みんなが集まる場を借りてみせる（デモ）&lt;/li&gt;&#xA;&lt;li&gt;おー！すごい！リアクションをもらう。質問に答える&lt;/li&gt;&#xA;&lt;li&gt;解散&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;ここで抜けてるのは個別に上の人達と話をしなかったことだ。そこが問題？&#xA;デモもデモの後開発進めてリリースできるレベルまで持っていくところまでは問題ない。&#xA;それはお前のプライベートの時間で好きてやってるのでどうぞだね。&#xA;応援する人が多くなって本プロジェクト化もしくはリリース直前になると問題になる。&#xA;どんな問題になるかは各自想像してください。&lt;/p&gt;&#xA;&lt;p&gt;それで以下のようにまとめてみた。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;いろんな人と話して意見を交換して成功か失敗か早い段階ではっきりさせる&lt;/li&gt;&#xA;&lt;li&gt;自分が好きてやってるので成功か失敗か気にしない&lt;/li&gt;&#xA;&lt;li&gt;デモまでやって自己満足で終わらせる&lt;/li&gt;&#xA;&lt;li&gt;この会社はサイドプロジェクト文化がないのでさようなら&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;1からやってみよう&lt;/p&gt;</description>
    </item>
    <item>
      <title>Twitterを愛してた</title>
      <link>https://dongri.github.io/2017/05/twitter%E3%82%92%E6%84%9B%E3%81%97%E3%81%A6%E3%81%9F/</link>
      <pubDate>Fri, 05 May 2017 16:17:12 +0900</pubDate>
      <guid>https://dongri.github.io/2017/05/twitter%E3%82%92%E6%84%9B%E3%81%97%E3%81%A6%E3%81%9F/</guid>
      <description>&lt;p&gt;Twitterやらなくなって二ヶ月ほど経ちますが、支障なく生きています。今はたまに開いてニュース見たり、aws障害検索したりするぐらいです。&lt;/p&gt;&#xA;&lt;p&gt;かつてはTwitterを愛してました。9年ぐらい前はTwitterのお陰で会ったこともない人と一緒にiPhoneアプリ作って出したり、&#xA;7年前はTwitterのお陰で転職できたし、テック系イベント参加するとフォロワーが増えてコミュニケーションしたり、いいことばかりでした。&lt;/p&gt;&#xA;&lt;p&gt;#腹減ったー #ラーメンうまい #githubダウンした などなどどうでもいいツイートばかりで、&#xA;偶に毒吐いたりして周りに迷惑かけたりすることもしました。酒を飲むと特に&lt;/p&gt;&#xA;&lt;p&gt;徐々に人間関係にも影響が出始めました。Twitterを愛してる人から見るとフォローから外れるということはもう絶交と同じでしたね。&#xA;Twitterにキレイな自分しか出さない人達からは嫌われ始めたし、絡まなくなると嫌われ始めたし、&#xA;正直この数年はTwitterのお陰で何が良かったことはありませんでしたね。&lt;/p&gt;&#xA;&lt;p&gt;「腹減ったー」「酒飲みたい」は呟きたい、しかしTwitterは嫌だ。結果として自分でTwitterみたいなのを作って呟くことにしました。&lt;/p&gt;&#xA;&lt;p&gt;今のところ数人のフォロワーしかいないけど、楽しく呟いてます、なぜかReplyが多いですね。&lt;/p&gt;&#xA;&lt;p&gt;昔みたいに酒飲みながら話に集中するのではなくTwitter開いて見たり、呟いたりしなくなったのと、&#xA;仕事中のTwitter割り込みもなくなって、少しDeep Workできた気がします。&lt;/p&gt;&#xA;&lt;p&gt;去年はInstagramのアカウント削除して、AndroidからFacebookアプリ消して、最近はTwitterやらなくなって、これはもう「年だね」と思いますね。&lt;/p&gt;</description>
    </item>
    <item>
      <title>エンジニアの10大ウソ</title>
      <link>https://dongri.github.io/2017/02/%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE10%E5%A4%A7%E3%82%A6%E3%82%BD/</link>
      <pubDate>Sat, 04 Feb 2017 01:01:48 +0900</pubDate>
      <guid>https://dongri.github.io/2017/02/%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE10%E5%A4%A7%E3%82%A6%E3%82%BD/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;後でコメント付けるから&lt;/li&gt;&#xA;&lt;li&gt;これは暫定的な方法、本番リリース時はこの方法で書かない&lt;/li&gt;&#xA;&lt;li&gt;大体終わった。後小さい問題何個か残ってるだけ&lt;/li&gt;&#xA;&lt;li&gt;エンジニア：”十日は必要”。Boss：”五日でできる？”。エンジニア：”できる！”&lt;/li&gt;&#xA;&lt;li&gt;TODO&lt;/li&gt;&#xA;&lt;li&gt;私の端末ではちゃんと動くのに&lt;/li&gt;&#xA;&lt;li&gt;これはテストする必要ない、絶対問題ないから&lt;/li&gt;&#xA;&lt;li&gt;そう、もうテストした&lt;/li&gt;&#xA;&lt;li&gt;一行の修正だけ、他の処理に影響しない&lt;/li&gt;&#xA;&lt;li&gt;これは前からあった問題&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;追加10ウソ&#34;&gt;追加10ウソ&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;次コード修正する時ユニットテスト書くよ&lt;/li&gt;&#xA;&lt;li&gt;９０％は終わった&lt;/li&gt;&#xA;&lt;li&gt;これは二分で解決できる&lt;/li&gt;&#xA;&lt;li&gt;そう、これは既知のBugだ&lt;/li&gt;&#xA;&lt;li&gt;昨日はちゃんと動いてたのに&lt;/li&gt;&#xA;&lt;li&gt;そんなのありえない&lt;/li&gt;&#xA;&lt;li&gt;これはハードウェア/ネットワークの問題、私のコードと関係ない&lt;/li&gt;&#xA;&lt;li&gt;これはBugではなく、特性だ&lt;/li&gt;&#xA;&lt;li&gt;私は今ドキュメント読んでる&lt;/li&gt;&#xA;&lt;li&gt;私はサボってない、今ビルド中&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>LINE Translate BOT</title>
      <link>https://dongri.github.io/2016/12/line-translate-bot/</link>
      <pubDate>Sat, 03 Dec 2016 16:42:42 +0900</pubDate>
      <guid>https://dongri.github.io/2016/12/line-translate-bot/</guid>
      <description>&lt;p&gt;LINE BOTがMessaging apiを正式にリリースしたので翻訳BOTを作りました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://wise.nilth.com&#34;&gt;https://wise.nilth.com&lt;/a&gt;&lt;!-- raw HTML omitted --&gt; (shutdown)&lt;/p&gt;&#xA;&lt;p&gt;公式の通訳BOTも何個かあるのに何で今更翻訳BOT? と思う人もいるかも知らないですが、理由は2つあります。&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-汎用性の問題&#34;&gt;1. 汎用性の問題&lt;/h3&gt;&#xA;&lt;p&gt;LINE公式通訳BOTをディスってるわけではないが、正直言って不便でした。日英、日中、日韓と一つ一つが単体のBOTになっていて、一つのグループに複数BOTを招待できないのと、あくまで日本語をベースにしてるので、例えば韓国語を英語に翻訳することはできません。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-進化した翻訳技術&#34;&gt;2. 進化した翻訳技術&lt;/h3&gt;&#xA;&lt;p&gt;ちょっと前に話題になっていた翻訳技術の進化です。ニューラルネットワーク機械学習の応用により翻訳の精度が今までと比較できないレベルまで進化してきました。&lt;/p&gt;&#xA;&lt;p&gt;上の理由から今更なんですが翻訳BOTを作りました。英語がダメな私はまず普段辞書の代わりによく使うと思います。&lt;/p&gt;&#xA;&lt;h3 id=&#34;エンジニア的な話をちょっと&#34;&gt;エンジニア的な話をちょっと&lt;/h3&gt;&#xA;&lt;p&gt;今はdocker container一つで動かしていて正直言ってどれくらいのリクエストで死ぬかわからないです。&#xA;このBOTの利用者が増えてリクエストをさばけない時にはサーバー増やしたりスペック上げたりなど考えることにしました。&#xA;エンジニア達はすぐ分かったと思いますが、この俺が翻訳エンジンなんか作れるわけではないので、Google Translate APIを使ってます。&#xA;こいつにも金取られるので、これ以上無理だと判断した時にはまた考えようかと思います。&#xA;BOTサーバーはGo言語で書いていて、LINE BOT API Trialの時から自前で作ったGo言語用SDKを使ってます。&#xA;&lt;a href=&#34;https://github.com/dongri/line-bot-sdk-go&#34;&gt;line-bot-sdk-go&lt;/a&gt; 。&#xA;Landing PageはF7さんのLp使いました。 &lt;a href=&#34;https://github.com/F7/Lp&#34;&gt;https://github.com/F7/Lp&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;line-bot-awards&#34;&gt;LINE BOT AWARDS&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://botawards.line.me&#34;&gt;https://botawards.line.me&lt;/a&gt; これなんですが、この翻訳BOTはある意味今のLINE公式通訳BOTと競合？してるので、どうかなと思いますｗ。&#xA;それと元中の人だったので応募するとなんか気まずいところもあって、悩んてるところですｗ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Code review</title>
      <link>https://dongri.github.io/2016/10/code-review/</link>
      <pubDate>Thu, 13 Oct 2016 21:08:26 +0900</pubDate>
      <guid>https://dongri.github.io/2016/10/code-review/</guid>
      <description>&lt;p&gt;こういうコードレビュー系の記事はたくさんありますが、今まで悩んてたところと気を付けてたところをリストしてみようと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;レビューが終わってるかどうかわからない問題&#34;&gt;レビューが終わってるかどうかわからない問題&lt;/h2&gt;&#xA;&lt;p&gt;PR出して半日経ったけど、コメントがない。やっとコメントが入り半日経過。よっし、レビューの修正とコメントに返信しようと思い修正なり、コメントに返事する。しかし、レビュー終わってなかった。また残りのレビューでコメントが入る。この繰り返しが数日続く時もある。こういうレビューの反映はほかのタスクやってうちに割り込みで対応するのでおそらくコードのクオリティよくないでしょう。割り込みで本来のタスクにも影響がでますよね。なのでレビュアーは時間をかけてもいいから一気にレビューして最後にレビュー終わりましたの合図を出すべきです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;言葉使いの問題&#34;&gt;言葉使いの問題&lt;/h2&gt;&#xA;&lt;p&gt;「こうしてください。」「こうしたほうがいい。」「これ意味分からないｗｗｗ」などなど、理由もなしにこういう言い方されるとイラッとしますよね？こうしてくださいの代わりにこういう理由があってこうした方がいいと思います。この部分の意図が理解できないので説明してくれると助かります。などなど、代わりの言葉はいくらでもあると思います。敬語はもちろんで、です、ますだけではなく言い方にも気を付けましょう。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アサインされても気付かない問題&#34;&gt;アサインされても気付かない問題&lt;/h2&gt;&#xA;&lt;p&gt;PR出したけど、なかなか見てくれない。しょうがなくダイレクトメールかチャットでURL送ってお願いする場合もありますね。この問題はツールで解決できる問題だと思います。一日2,3回自分にアサインされて見てないPRをメールか、チャットで催促など、方法はいくらでもあるので、問題ないはずです。しかし、気付いたけどわざと見ないのはその人達間の人間関係の問題で解決方法は別途探しましょう。&lt;/p&gt;&#xA;&lt;h2 id=&#34;対象ではないことろに触れる問題&#34;&gt;対象ではないことろに触れる問題&lt;/h2&gt;&#xA;&lt;p&gt;プロジェクト全体のコードが理想の形になってない状態で1つの小さなPRでプロジェクト全体に対してのツッコミが入る時があります。それは今回のPRと関係ないです！と返す人もプロジェクト全体のコードを綺麗にしたいレビュアーもどっちも悪くはない思います。やる気あって且つデキる人はわかった全部直してやる！黙々と今回のPRと関係ないところも修正してPRを出し直す人もいれば、この機能のリリースが先だ、そんなの知らないよ！と返す人もいると思います。この辺は優先順位を決めれる人を捕まえて話し合いが必要ですね。&lt;/p&gt;&#xA;&lt;h2 id=&#34;土日レビューしてくれる人がいない問題&#34;&gt;土日レビューしてくれる人がいない問題&lt;/h2&gt;&#xA;&lt;p&gt;若者が（若者に限らないが）土日やる気出して1つの機能追加してリリースしたいのにレビュー出してもレビューしてくれそうな人がいない時があると思います。月曜日まで待ちたくない、今すぐリリースしたい、こういう時どうすればいいのか？自分でPR作って自分でマージする。コードレビューの意味がなくなってる。そもそもそういう若者をフォロー出来ないのは組織の問題なので、ここではその辺の話には触れたくないです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goodbye Instagram</title>
      <link>https://dongri.github.io/2016/08/goodbye-instagram/</link>
      <pubDate>Mon, 15 Aug 2016 00:32:35 +0900</pubDate>
      <guid>https://dongri.github.io/2016/08/goodbye-instagram/</guid>
      <description>&lt;p&gt;ついにInstagramの写真まで全部消した。API仕様が変わってからずっと投稿してなくて、写真残しても意味ないと思って全部消してしまった。&lt;/p&gt;&#xA;&lt;p&gt;Instagramは他のSNSと違って見てると気分がよくなる。&#xA;Twitterみたいに他人の悪口も無ければ毒もない。&#xA;あるのは綺麗な景色と美味しそうな食べ物と可愛いペット、見ててこの世の中は幸せだなと思うぐらいだ。&lt;/p&gt;&#xA;&lt;p&gt;しかし、それがFacebookに買われた後からかどうかは分からないが、タイムラインがFacebookのように&#xA;時系列ではなく勝手にユーザーの好みに合わせて表示されるようになったみたい。&#xA;猫にいいねたくさんすると猫の写真が優先されたり、美人の写真によくいいねをすると美人の写真が上に表示されたり、とにかく「おまら勝手に！」。&lt;/p&gt;&#xA;&lt;p&gt;実はInstagramがWeb版がない時代からAPIを使って「Stagram」という名前でブラウザでInstagramの写真見れるサービス？作って、&#xA;趣味でInstagramのiOS、Androidアプリまで作るぐらいInstagramが好きだった。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://flic.kr/s/aHskEFaE1Y&#34;&gt;https://flic.kr/s/aHskEFaE1Y&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;タイムラインが気持ち悪くパソナライズされたのと別に私がやめた理由はAPI制限だった。&#xA;前までは楽しいAPIで自分の写真はもちろん、他人の写真まで自分が好きなようにいじれた。&#xA;しかしそのAPIが6月1日から変わった、ずっとまえから変わるとブログには書いてあったがついに変わって、&#xA;ちゃんとした理由でAPIクライアントを申請して審査通らないとほとんどのAPIが使えない。&#xA;APIの制限にはそれなりの理由があると思うが、これ以上付き合いたくなくなった。&lt;/p&gt;&#xA;&lt;p&gt;有用性、透明性、正当性、、、俺みたいなやつがプライベートでそんな意識高いのサービス、アプリを作れるのか？！バカヤロー w&lt;/p&gt;</description>
    </item>
    <item>
      <title>認めるエンジニア</title>
      <link>https://dongri.github.io/2016/08/%E8%AA%8D%E3%82%81%E3%82%8B%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2/</link>
      <pubDate>Sat, 13 Aug 2016 20:11:11 +0900</pubDate>
      <guid>https://dongri.github.io/2016/08/%E8%AA%8D%E3%82%81%E3%82%8B%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2/</guid>
      <description>&lt;p&gt;自分の弱点から言うと人を簡単に認めないこと。例えその人があることですごい成功したとしても気軽く認めないこと。&lt;/p&gt;&#xA;&lt;p&gt;でも、今まで認めたエンジニアは二人いる。一人は元L社のチームマネージャー、もう一人のはやめたAndroidエンジニア。&lt;/p&gt;&#xA;&lt;p&gt;一人目の元L社のチームマネージャーは検索エンジンや、ゲームプログラミングの出身でiOSの開発には知識はゼロと言っても過言ではない。&#xA;しかし途中で自分のコードにメモリリークじゃないの？こうやったほうがいいじゃないの？のアドバイスをしてくれた。&#xA;自分も確かにと思いながらやって、プロジェクトの終わりの飲み会でその真実を知った。&#xA;&amp;ldquo;大変だったよ、俺はiOSの知識が全く無くてお前らが書いたObjcコードを深夜3,4時まで本読みながら解読して勉強した。まあ過去の話だし、今日は飲もう！&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;もう一人はやめたやつだけど、厳しいやつだった。自分が作ったAPIのバグを探すのが趣味みたい。いろんな例外ケースを試してここがだめだ、そこがダメだ、と言ってくる。&#xA;言ってることが正しいので、反論することなく修正してあげる。というかあいつはなんでそんな例外ケースを思い出すんだろうと思うぐらいだ。&#xA;普段は無口で余計なことはしゃべらず、ただただ論理的にシステムを正しく設計しようとしてた。&lt;/p&gt;&#xA;&lt;p&gt;よく考えてみると二人は共通点がある。なにことも終わってから話すことだ。&#xA;先にここがもしかしてダメじゃない？とかなくて、自分まず試してから話す、要は手を動かす人達だった。&#xA;それにわざわざ仕事のアピールする人ではなかった。どっちも普段無口でコレをやるの宣言してからやるのではなく、コレをやった派だった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>新卒SI</title>
      <link>https://dongri.github.io/2016/07/%E6%96%B0%E5%8D%92si/</link>
      <pubDate>Fri, 22 Jul 2016 02:10:36 +0900</pubDate>
      <guid>https://dongri.github.io/2016/07/%E6%96%B0%E5%8D%92si/</guid>
      <description>&lt;p&gt;新卒でSIの会社に入った。小さい会社で社員研修もくそもない。&lt;/p&gt;&#xA;&lt;p&gt;初日から社長に取引先(現場)に連れて行って面接。面接で初めて気付いた、履歴書に俺の年が2つ上がってる！しかも入社三年目。いろんなシステム開発経験あり、いろんな言語でコード書ける、いろんなデータベース触ったことあることになってる。まあ、しょうがない、知ってるふりして質問に答えた。幸いに面接パスして現場で働けるようになった。&lt;/p&gt;&#xA;&lt;p&gt;面接がそんなもんだから、同然現場では新卒扱いされない、いきなりJavaでフレームワーク作りに入る。業務関連の質問はできるけど、技術的な質問はできない雰囲気になってる。Javaもデータベースも知ってるふりしながら家に帰って必死にググる。それが数ヶ月続いたら本当にJavaもデータベースも知るようになった。&lt;/p&gt;&#xA;&lt;p&gt;今も偶にその時の社長と飲みに行くんだけど、その時の履歴書改竄の話出ると笑いながら「しょうがないじゃ、現場のマネージャーは新卒はいらないと言ってるから、、、」&lt;/p&gt;&#xA;&lt;p&gt;多分その時のよくない経験が影響してるか、その後現場が変わっても転職して別の会社に行っても業務関連の質問はよくするけど、技術的な質問はあんまりしないでググるか、本を買うことになってる。&lt;/p&gt;&#xA;&lt;p&gt;幸いに途中で師匠に出会えていろいろ勉強ができた。技術だけではなく、社会人としての常識的なものも勉強できた。&lt;/p&gt;&#xA;&lt;p&gt;偶に思うのは、もしちゃんとした社員研修もあって、何でも聞ける先輩がいる会社に新卒で入ったら俺はどれだけできる人間になったかなとwww。その逆もありうるけどね。&lt;/p&gt;&#xA;&lt;p&gt;(今日ツイッターで「新卒SI」についてブログ書くと宣言したので、ここまで書くか)&lt;/p&gt;</description>
    </item>
    <item>
      <title>エンジニア軽蔑チェーン</title>
      <link>https://dongri.github.io/2016/02/%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E8%BB%BD%E8%94%91%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3/</link>
      <pubDate>Tue, 23 Feb 2016 00:05:42 +0900</pubDate>
      <guid>https://dongri.github.io/2016/02/%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E8%BB%BD%E8%94%91%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3/</guid>
      <description>&lt;h2 id=&#34;言語編&#34;&gt;言語編&lt;/h2&gt;&#xA;&lt;p&gt;Functional Programmingをわかるエンジニアはよくデザインパターンを口にするエンジニアを軽蔑する。&#xA;よくデザインパターンを口にするエンジニアは「そのように書くとオブジェクト指向ではない」と言うエンジニアを軽蔑する。&#xA;「そのように書くとオブジェクト指向ではない」と言うエンジニアは「重複するコードをfunctionにまとめばいいじゃ」と言ってるエンジニアを軽蔑する。&#xA;コードをコピしてあっちこっちに貼り付けるエンジニアはPMを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;アセンブラ書くエンジニアはC言語書くエンジニアを軽蔑する。&#xA;C言語書くエンジニアはC++書くを軽蔑する。&#xA;C++書くエンジニアはC#書くエンジニアを軽蔑する。&#xA;C#書くエンジニアはHTMLを一種のプログラミング言語と思ってるデザイナーを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;Python3エンジニアはPython2エンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;iOSエンジニアはAndroidエンジニアを軽蔑する。&#xA;AndroidエンジニアはWindows Phoneエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;一年のSwift経験あるエンジニアは5年のObjective-C経験持つエンジニアを軽蔑する。&#xA;Objective-C書くエンジニアはPhoneGap書くエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;React.js書くエンジニアはAngularJS書くエンジニアを軽蔑する。&#xA;AngularJS書くエンジニアはjQuery書くエンジニアを軽蔑する。&#xA;jQuery書くエンジニアはVanilla JSを書くエンジニアを軽蔑する。&#xA;Vanilla JS書くエンジニアはIE使用者を軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;debuggerを使えるエンジニアはassertを使ってるエンジニアを軽蔑する。&#xA;assertを使えるエンジニアはprint()しか書けないエンジニアを軽蔑する。&#xA;console.logでdebugするエンジニアはalertでdebugするエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;Ruby on Railsエンジニアはその他すべての言語のエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;すべてのエンジニアはPHPエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ツール編&#34;&gt;ツール編&lt;/h2&gt;&#xA;&lt;p&gt;text editorを使ってるエンジニアはIDEを使ってるエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;Vim使ってるエンジニアはEmacs使ってるエンジニアを軽蔑する、Emacs使ってるエンジニアはVimを使ってるエンジニアを軽蔑する。&#xA;VimとEmacs使ってるエンジニアはほかすべてのtext editorを使ってるエンジニアを軽蔑する。例えば：atom, sublime, windows editor&lt;/p&gt;&#xA;&lt;p&gt;Android Studioを使ってるか、IntelliJ IDEAを使ってるエンジニアはEclipse使ってるエンジニアを軽蔑する。&#xA;Eclipse使ってるエンジニアはNetBeans使ってるエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;GitかMercurialを使ってるエンジニアはSubversionを使ってるエンジニアを軽蔑する。&#xA;Subversionを使ってるエンジニアはDropboxでバージョン管理してるエンジニアを軽蔑する。&#xA;Dropboxでバージョン管理してるエンジニアはバージョン管理しないエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;Githubを知ってるエンジニアはGithubを知らないエンジニアを軽蔑する。&#xA;Githubでprivate repoを持ってるエンジニアは無料repoのためBitBucketに行っちゃうエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;Zsh使ってるエンジニアはBashを使ってるエンジニアを軽蔑する。&#xA;Bashを使ってるエンジニアはCygwinを使ってるエンジニアを軽蔑する。&#xA;Cygwinを使ってるエンジニアはGUIツール使ってるエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;IRCを使ってるエンジニアはHipChatを使ってるエンジニアを軽蔑する。&#xA;HipChatを使ってるエンジニアはSlackを使ってるデザイナーを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;reStructuredTextで文章作成するエンジニアはMarkdownで文章作成するエンジニアを軽蔑する。&#xA;Markdownで文章作成するエンジニアはHTMLで文章作成するエンジニアを軽蔑する。&#xA;HTMLで文章作成するエンジニアは文章書かないエンジニアを軽蔑する。&#xA;LaTeX使って文章作成するエンジニアはすべてのエンジニアを軽蔑する&lt;/p&gt;&#xA;&lt;p&gt;Nginxを使ってるエンジニアはApacheを使ってるエンジニアを軽蔑する。&#xA;Apacheを使ってるエンジニアはIISを使ってるエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;Dockerでサーバー構築するエンジニアはAnsible、Puppetでサーバー構築するエンジニアを軽蔑する。&#xA;Ansible、Puppetでサーバー構築するエンジニアはFabricでサーバー構築するエンジニアを軽蔑する。&#xA;Fabricでサーバー構築するエンジニアは手動SSHするエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;h2 id=&#34;os編&#34;&gt;OS編&lt;/h2&gt;&#xA;&lt;p&gt;Mac OS X使ってるエンジニアはLinux使ってるエンジニアを軽蔑する。&#xA;Linux使ってるエンジニアはWindows使ってるエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;p&gt;Debian使ってるエンジニアはUbuntu使ってるエンジニアを軽蔑する。&#xA;Ubuntu使ってるエンジニアは非LTS版Ubuntuを使ってるエンジニアを軽蔑する。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ハードウエア編&#34;&gt;ハードウエア編&lt;/h2&gt;&#xA;&lt;p&gt;MacBook Pro Retina使ってるエンジニアはMacBook Air使ってるエンジニアを軽蔑する。&#xA;MacBook Air使ってるエンジニアはThinkPad使ってるエンジニアを軽蔑する。&#xA;そして、Raspberry Piを使ってるエンジニアはMacBook Pro Retinaを使ってるエンジニアを軽蔑する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo</title>
      <link>https://dongri.github.io/2016/01/hugo/</link>
      <pubDate>Sun, 17 Jan 2016 15:20:15 +0900</pubDate>
      <guid>https://dongri.github.io/2016/01/hugo/</guid>
      <description>&lt;p&gt;macクリーンインストールした後、middlemanのインストールでgemにバージョンとかでいろいろ引っかかったので、hugoに引っ越しするようにした。&#xA;もともとビルドが遅いmiddlemanそんなに好きではなかったし、いいきっかけたと思って引越しした。いい感じ。&lt;/p&gt;&#xA;&lt;h3 id=&#34;hgが必要なのでhgをインストールする&#34;&gt;hgが必要なのでhgをインストールする&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ brew install hg&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;hugoインストール&#34;&gt;hugoインストール&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ go get -v github.com/spf13/hugo&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;site作成&#34;&gt;site作成&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ hugo new site dongri.github.io&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;テーマを取得&#34;&gt;テーマを取得&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd dongri.github.io&#xA;$ git clone --recursive https://github.com/spf13/hugoThemes themes&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;テーマ設定&#34;&gt;テーマ設定&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim config.toml&#xA;...&#xA;theme = &amp;#34;boro&amp;#34;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;post作成&#34;&gt;post作成&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ hugo new post/2016-01-17-hugo.md&#xA;$ vim post/2016-01-17-hugo.md&#xA;+++&#xA;date = &amp;#34;2016-01-17T15:20:15+09:00&amp;#34;&#xA;title = &amp;#34;Hugo&amp;#34;&#xA;tags = [&amp;#34;blog&amp;#34;]&#xA;+++&#xA;&#xA;hogehoge&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;サーバー起動して確認&#34;&gt;サーバー起動して確認&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ hugo server -w&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;github-pagesにデプロイ&#34;&gt;github pagesにデプロイ&lt;/h3&gt;&#xA;&lt;p&gt;hugo siteをrepoAにして、publicをsubtreeで username.github.io にして毎回pushする。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;deploy.sh&lt;/code&gt; を作成&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash&#xA;&#xA;echo -e &amp;#34;Deploying updates to GitHub...&amp;#34;&#xA;&#xA;# Build the project.&#xA;hugo&#xA;&#xA;# Add changes to git.&#xA;git add -A&#xA;&#xA;# Commit changes.&#xA;msg=&amp;#34;rebuilding site `date`&amp;#34;&#xA;if [ $# -eq 1 ]&#xA;  then msg=&amp;#34;$1&amp;#34;&#xA;fi&#xA;git commit -m &amp;#34;$msg&amp;#34;&#xA;&#xA;# Push source and build repos.&#xA;git push origin master&#xA;git subtree push --prefix=public git@github.com:dongri/dongri.github.io.git master&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Birthday</title>
      <link>https://dongri.github.io/2015/02/birthday/</link>
      <pubDate>Tue, 03 Feb 2015 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2015/02/birthday/</guid>
      <description>&lt;p&gt;先月にFacebookの誕生日をOnly Meに設定して、誰も知らないように設定したのが始まり。&lt;/p&gt;&#xA;&lt;p&gt;今までは誕生日になると一日中、Facebookの友達から「誕生日おめでとう！」「Happy Birthday!」「생일축하해요」などのメッセージでnotificationが止まらない。&#xA;そして、キリの良い時に、全てのメッセージにLikeと「ありがとうございます！」とコメントを残す。で終わり。なんの感情も入ってない。。。&lt;/p&gt;&#xA;&lt;p&gt;今年はあえて見えないようにしてみた結果どうなったか？&lt;/p&gt;&#xA;&lt;p&gt;朝からWechatで祝いメッセージが来たり、&#xA;mixi経由でスタバックスのギフトカード送ってもらって一緒にスタバに行ったり、&#xA;Twitterで「今日誕生日って本当？Google Nowがそう言ってるけど」、&#xA;Facebookメッセンジャーで「誕生日おめでとうございます！」「どうやって知った？」「Skypeからreminderが来てね w」、&#xA;Google+から「생일이에요? 축하해요」だったり、とにかく意外なところから。&lt;/p&gt;&#xA;&lt;p&gt;一つ一つのメッセージが嬉しかった。一人一人が親しい友人だから！&lt;/p&gt;&#xA;&lt;p&gt;Facebookは隠せたけど、社内カレンダーの誕生日は消せなかったので、会社から素敵な誕生日ケーキで祝ってもらった。&#xA;同僚のみなさん、ありがとうございました！&lt;/p&gt;</description>
    </item>
    <item>
      <title>middleman blog</title>
      <link>https://dongri.github.io/2014/04/middleman-blog/</link>
      <pubDate>Mon, 21 Apr 2014 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2014/04/middleman-blog/</guid>
      <description>&lt;p&gt;Octopress, Jekyll, Cabin いろいろあるみたいけど、Middlemanを使ってみようかと思って設置してみた。&lt;/p&gt;&#xA;&lt;h2 id=&#34;middleman-middleman-blogインストール&#34;&gt;middleman, middleman-blogインストール&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gem install middleman&#xA;$ gem install middleman-blog&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;middleman-プロジェクト作成&#34;&gt;middleman プロジェクト作成&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ middleman init dongri.github.io --template=blog&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;レポジトリ設定&#34;&gt;レポジトリ設定&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd dongri.github.io&#xA;$ git init&#xA;$ git remote add origin git@github.com:dongri/dongri.github.io.git&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;gemfile-を修正&#34;&gt;Gemfile を修正&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gem &amp;#34;middleman-deploy&amp;#34;&#xA;gem &amp;#34;middleman-livereload&amp;#34;&#xA;gem &amp;#34;middleman-syntax&amp;#34;&#xA;gem &amp;#34;redcarpet&amp;#34;&#xA;gem &amp;#34;nokogiri&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt; する。&lt;/p&gt;&#xA;&lt;h2 id=&#34;configrb-を設定&#34;&gt;config.rb を設定&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Time.zone = &amp;#34;Tokyo&amp;#34;&#xA;&#xA;page &amp;#34;archives/*&amp;#34;, layout: :post&#xA;page &amp;#34;archives/index.html&amp;#34;, layout: :layout&#xA;&#xA;configure :build do&#xA;  activate :minify_css&#xA;  activate :minify_javascript&#xA;  activate :asset_hash&#xA;end&#xA;&#xA;set :markdown_engine, :redcarpet&#xA;set :markdown, :fenced_code_blocks =&amp;gt; true, :smartypants =&amp;gt; true&#xA;&#xA;activate :livereload&#xA;activate :directory_indexes&#xA;activate :syntax, line_numbers: true&#xA;&#xA;# デプロイの設定&#xA;activate :deploy do |deploy|&#xA;  deploy.build_before = true&#xA;  deploy.method = :git&#xA;  deploy.branch = &amp;#39;main&amp;#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;server起動&#34;&gt;server起動&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ middleman server&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;new-post&#34;&gt;New Post&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ middleman article new-post&#xA;      create  source/2014-04-21-new-post.html.markdown&#xA;$&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;source2014-04-21-new-posthtmlmarkdown-編集&#34;&gt;source/2014-04-21-new-post.html.markdown 編集&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---&#xA;layout: post&#xA;title: middleman blog&#xA;date: 2014-04-21&#xA;tags: middleman, blog&#xA;---&#xA;&#xA;# ほげほげ&#xA;&#xA;## Code&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;build--deploy&#34;&gt;build &amp;amp; deploy&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ middleman build&#xA;$ middleman deploy&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;template--css&#34;&gt;template &amp;amp; css&lt;/h2&gt;&#xA;&lt;p&gt;theme, templateなどググっても出てこない。&lt;br&gt;&#xA;しょうがなく自分デザイン?してcss組んでこんなページが生まれた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Example Article</title>
      <link>https://dongri.github.io/2012/01/example-article/</link>
      <pubDate>Sun, 01 Jan 2012 11:28:57 +0900</pubDate>
      <guid>https://dongri.github.io/2012/01/example-article/</guid>
      <description>&lt;p&gt;This is an example article. You probably want to delete it and write your own articles!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
